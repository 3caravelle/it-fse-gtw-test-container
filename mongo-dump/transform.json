[{
  "_id": {
    "$oid": "63fdbd3a4afb2a4bc2c12be6"
  },
  "maps": [
    {
      "name_map": "RefertodilaboratorioFULLBODY",
      "filename_map": "StructureMap_Referto_di_Laboratorio_v2.0_corretto.map",
      "content_map": {
        "$binary": {
          "base64": "map "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/RefertodilaboratorioFULLBODY" = "RefertodilaboratorioFULLBODY"

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Specimen" alias Specimen as produced
uses "http://hl7.org/fhir/StructureDefinition/Procedure" alias Procedure as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL-PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target
uses "http://hl7.org/fhir/cda/StructureDefinition/Organizer" alias Organizer as source

imports "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes"
imports "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
  cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('https://example/Composition/', uuid1), request.url = 'Composition',  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Patient/', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3),request.url = 'Encounter',
 bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST',  e6.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid6,  e6.fullUrl = append('https://example/DocumentReference/', uuid6),request.url = 'DocumentReference' then {
  cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle,DocumentReference) "cdatobundle";
  cda.recordTarget as recordTarget then{
    recordTarget.patientRole as patient then{
        patient.id as id-> patient.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
           id.extension as ext1 -> identifier.value = ext1 "value";
           id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
         }"idfr";
         patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7')
         or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17') or (root='2.16.840.1.113883.2.9.4.3.15')  then {
           id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
           }"ext";
         }"record";
   }"patient";
 } "ClinicalDocumentToBody";
}

group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle , target documentreference : DocumentReference) {
  cda -> bundle.id = uuid() "id";
  cda.id -> bundle.identifier "identifier";
  cda -> bundle.type = 'transaction' "type";
  cda -> bundle.timestamp=(timestamp.now()) "date";
  cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle,documentreference) "composition";
  cda.component as component then {
    component.structuredBody as body then {
      body.component as component  then {
	     component.section as srcSection then {
        srcSection.code -> composition.section as tgtSection  then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle,encounter,documentreference);       
       };
      };
    }"body";
  };
}

group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter,target documentreference : DocumentReference) {
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  }"cdaText";
  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('DiagnosticReport') as DiagnosticReport,  DiagnosticReport.id = uuid() as uuid1,  e1.fullUrl = append('https://example/DiagnosticReport/', uuid1), request.url = 'DiagnosticReport' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/DiagnosticReport/' + %DiagnosticReport.id) then {
    entry1.act as act1 then Act(act1, patient, DiagnosticReport , enc , bundle) "act";
  }"entry";
  src.component as component then {
    component.section as sec -> tgt.section as tgtSection then ClinicalDocumentSection(cda, sec, patient, tgtSection, bundle,enc,documentreference);
  }"component";
}

group Observation (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {
    
  obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference"; 
  obs.code -> ob.code;

  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
  obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
  obs.effectiveTime as eff-> ob.effective=create('Period') as period then IVLTSPeriod(eff,period);
  }"where";
  obs.interpretationCode -> ob.interpretation;
  obs.methodCode -> ob.method;
  obs.value:INT as int->ob.value=(int.value) "value";
  obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";
  obs.value:CE as val then{
    val->ob.value =create('CodeableConcept') as ce then {
      val.originalText as originalText then{
        originalText.reference as reference-> ce.text=reference;
      }"originltext";
      val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        val.codeSystemVersion as version -> coding.version = cast(version, 'string');
      }"code";
      val.translation as translation -> ce.coding as coding then {
        translation.code as code -> coding.code = cast(code, 'string');
        translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        translation.displayName as display -> coding.display = cast(display, 'string');
        translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
        translation.qualifier as qualifier then{
          qualifier.value as value -> ce.coding as coding then {
            value.code as code -> coding.code = cast(code, 'string');
            value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
            value.displayName as display -> coding.display = cast(display, 'string');
            value.codeSystemVersion as version -> coding.version = cast(version, 'string');
          }"value";
        }"qualifier";
      }"translation";
    }"coding";
  }"val";
  obs.value:CD as val then{
    val->ob.value =create('CodeableConcept') as ce then {
      val.originalText as originalText then{
        originalText.reference as reference-> ce.text=reference;
      }"originltext";
      val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        val.codeSystemVersion as version -> coding.version = cast(version, 'string');
      }"code";
      val.translation as translation -> ce.coding as coding then {
        translation.code as code -> coding.code = cast(code, 'string');
        translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        translation.displayName as display -> coding.display = cast(display, 'string');
        translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
        translation.qualifier as qualifier then{
          qualifier.value as value -> ce.coding as coding then {
            value.code as code -> coding.code = cast(code, 'string');
            value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
            value.displayName as display -> coding.display = cast(display, 'string');
            value.codeSystemVersion as version -> coding.version = cast(version, 'string');
          }"value";
        }"qualifier";
      }"translation";
    }"coding";
  }"val";
  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
      val.value as value->quantity.value = value;
      val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";
  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";

  //Note e commenti
  obs.entryRelationship as entryRelationship then {
    entryRelationship.act as act then {
      act.text as text then {
        text.reference as reference -> ob.note as note then {
          reference->note.text =(reference.value)"reference";
        }"reference";
      }"text";
    }"Act";
  }"entryRelationship";

  //subject
  obs.subject as sbj then {
    sbj.relatedSubject as relatedSubj-> patient.extension as extension2 then ExtSubjectAnimal(relatedSubj, extension2);
  }"subject";
  
  //performer
  obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',  e1.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e1.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url = 'PractitionerRole' then{
    performer -> ob.performer = create('Reference') as reference,  reference.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
      performer.assignedEntity as entity then {
        entity.code -> practitionerRole.code;
        entity -> bundle.entry as e2,  e2.request = create('BackboneElement') as request, request.method = 'PUT', e2.resource = create('Practitioner') as practitioner then {
          entity->practitioner.meta as meta then {
            entity->meta.tag = create('Coding') as coding then {
              entity -> coding.system ='http://algoritmodiscoring'"system";
              entity -> coding.code ='ClinicalDocument/body/observation/performer'"code";
            }"coding";
          }"meta";
          entity.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              entity-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e2.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "performer";
            }"r";
          }"identifier";
          entity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";
          entity.addr -> practitioner.address;      
          entity.telecom -> practitioner.telecom;
          entity.assignedPerson as person then {
            person.name -> practitioner.name;
            person.birthTime as birthTime then{
              birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
            }"birth";
          }"name";
          //organization
          entity.representedOrganization as representedOrganization ->  bundle.entry as e3,  e3.request = create('BackboneElement') as request, request.method = 'PUT',  e3.resource = create('Organization') as organization  then {
            representedOrganization->organization.meta as meta then {
              representedOrganization->meta.tag = create('Coding') as coding then {
                representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
                representedOrganization -> coding.code ='ClinicalDocument/body/observation/performer/representedOrganization'"code";
              }"coding";
            }"meta";
           representedOrganization.id as id -> organization.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid3,  e3.fullUrl = append('https://example/Organization/', uuid3), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid3)"aut";
              }"r";
            }"identifier";
            representedOrganization.name as v -> organization.name = (v.other);
            representedOrganization.telecom -> organization.telecom;
            representedOrganization.addr -> organization.address;
            representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e4,  e4.request = create('BackboneElement') as request, e4.resource = create('Organization') as organization1, request.method = 'PUT' then {
              OrgPartOf->organization1.meta as meta then {
                OrgPartOf->meta.tag = create('Coding') as coding then {
                  OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
                  OrgPartOf -> coding.code ='ClinicalDocument/body/observation/performer/representedOrganization/asOrganizationPartOf'"code";
                }"coding";
              }"meta"; 
              OrgPartOf.id as id -> organization1.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization1.id  = (r +'-'+ ext) as uuid4,  e4.fullUrl = append('https://example/Organization/', uuid4), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id)  "org";
                }"r";
              }"identifier";
              OrgPartOf.code -> organization1.type;
              OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
              OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e5,  e5.request = create('BackboneElement') as request, request.method = 'PUT',  e5.resource = create('Organization') as organization2 then{
                wholeOrgan->organization2.meta as meta then {
                  wholeOrgan->meta.tag = create('Coding') as coding then {
                    wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                    wholeOrgan -> coding.code ='ClinicalDocument/body/observation/performer/representedOrganization/wholeOrganization'"code";
                  }"coding";
                }"meta";
                wholeOrgan.id as id -> organization2.identifier as identifier then {
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext then {
                    wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
                  }"ext";
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                  id.root as r then {
                    id.extension as ext  -> organization2.id  = (r +'-'+ ext) as uuid5,  e5.fullUrl = append('https://example/Organization/', uuid5), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id) "org";
                  }"r"; 
                }"identifier";
                wholeOrgan.name as v -> organization2.name = (v.other);
                wholeOrgan.telecom -> organization2.telecom;
                wholeOrgan.addr -> organization2.address;
              }"wholeOrganization";
            }"OrgPartOf";
          }"representedOrganization"; 
        }"practitioner";
      }"entity";
    }"practitionerRole";
  }"performer";

  //author
  obs.author as srcAuthor ->  bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST', e6.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid6,  e6.fullUrl = append('https://example/PractitionerRole/', uuid6), request.url='PractitionerRole', ob.performer = create('Reference') as referenceaut,  referenceaut.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
    srcAuthor.assignedAuthor as assignedAuthor then {
      assignedAuthor.code as codice -> practitionerRole.code as code2 then CECodeableConcept(codice,code2);
      assignedAuthor -> bundle.entry as e7,  e7.request = create('BackboneElement') as request, request.method = 'PUT', e7.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid7 then {
        srcAuthor.functionCode -> practitionerRole.code;
        assignedAuthor->practitioner.meta as meta then {
          assignedAuthor->meta.tag = create('Coding') as coding then {
            assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
            assignedAuthor -> coding.code ='ClinicalDocument/body/observation/author'"code";
          }"coding";
        }"meta";
        assignedAuthor.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            assignedAuthor-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,   e7.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"aut";
          }"r";
          assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";
        }"identifier";
        assignedAuthor.addr -> practitioner.address;      
        assignedAuthor.telecom -> practitioner.telecom;
        //person
        assignedAuthor.assignedPerson as person then {
          person.name -> practitioner.name;
          person.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
          }"birth";
        }"name";
      }"ASSAUth";
      //organization
      assignedAuthor.representedOrganization as representedOrganization ->  bundle.entry as e8,  e8.request = create('BackboneElement') as request, request.method = 'PUT',  e8.resource = create('Organization') as organization then {
        representedOrganization->organization.meta as meta then {
          representedOrganization->meta.tag = create('Coding') as coding then {
            representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
            representedOrganization -> coding.code ='ClinicalDocument/body/observation/author/representedOrganization'"code";
          }"coding";
        }"meta";
        representedOrganization.id as id -> organization.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid3,   e8.fullUrl = append('https://example/Organization/', uuid3), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid3)"org";
          }"r";
        }"identifier";
        representedOrganization.name as v -> organization.name = (v.other);
        representedOrganization.telecom -> organization.telecom;
        representedOrganization.addr -> organization.address;
        representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e9,  e9.request = create('BackboneElement') as request, request.method = 'PUT',  e9.resource = create('Organization') as organization1 then {
          OrgPartOf->organization1.meta as meta then {
            OrgPartOf->meta.tag = create('Coding') as coding then {
              OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
              OrgPartOf -> coding.code ='ClinicalDocument/body/observation/author/representedOrganization/asOrganizationPartOf'"code";
            }"coding";
          }"meta";
          OrgPartOf.id as id -> organization1.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> organization1.id = (r +'-'+ ext) as uuid4,   e9.fullUrl = append('https://example/Organization/', uuid4), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id) "org";
            }"r"; 
          }"identifier";
          OrgPartOf.code -> organization1.type;
          OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
          OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e10,  e10.request = create('BackboneElement') as request, request.method = 'PUT',  e10.resource = create('Organization') as organization2 then{
            wholeOrgan->organization2.meta as meta then {
              wholeOrgan->meta.tag = create('Coding') as coding then {
                wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                wholeOrgan -> coding.code ='ClinicalDocument/body/observation/author/representedOrganization/asOrganizationPartOf/wholeOrganization'"code";
              }"coding";
            }"meta";
            wholeOrgan.id as id -> organization2.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> organization2.id = (r +'-'+ ext) as uuid4, e10.fullUrl = append('https://example/Organization/', uuid4), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id)    "org";
              }"r"; 
            }"identifier";
            wholeOrgan.name as v -> organization2.name = (v.other);
            wholeOrgan.telecom -> organization2.telecom;
            wholeOrgan.addr -> organization2.address;
          }"wholeOrganization";
        }"OrgPartOf";
      }"representedOrganization"; 
      //device
      assignedAuthor.assignedAuthoringDevice as assignedAuthoringDevice -> bundle.entry as e11,  e11.request = create('BackboneElement') as request, request.method = 'POST',  e11.resource = create('Device') as device,  device.id = uuid() as uuid11,  e11.fullUrl = append('https://example/Device/', uuid11), request.url ='Device', tgt.author = create('Reference') as reference, reference.reference= ('https://example/Device/' + %device.id) then{
        assignedAuthoringDevice.templateId -> device.identifier; 
        assignedAuthoringDevice.code -> device.type;
        assignedAuthoringDevice.manufacturerModelName as manufacturerModelName then{
          manufacturerModelName as m-> device.manufacturer = (m.displayName) "displayRule";
        }"manufacturer"; 
        assignedAuthoringDevice.softwareName as softwareName -> device.deviceName as deviceName then{
          softwareName -> deviceName.type = 'other' "typeName";		
          softwareName as s -> deviceName.name = (s.displayName) "name";
        }"deviceName";
      }"Device";
    }"assignedAuthor";
  }"author";

  //participant person
  obs.participant as participant where(typeCode!='DEV') ->  ob.encounter = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) then {
    participant -> encounter.participant as FhirParticipant then {
      participant as p -> FhirParticipant.type as type then { 
        p -> type.coding as coding then{
          p-> coding.code = (p.typeCode) "codice";
          p-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
        } "codeType"; 
      }"type";
    }"fhirParticipant";
    participant.participantRole as participantRole -> bundle.entry as e12,   e12.request = create('BackboneElement') as request, request.method = 'POST',  e12.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid12 ,  e12.fullUrl = append('https://example/PractitionerRole/', uuid12), request.url = 'PractitionerRole', encounter.participant = create('BackboneElement') as participant1, participant1.individual = create('Reference') as referencepart, referencepart.reference =  ('https://example/Practitioner/' + %practitionerRole.id) then { 
     // participant.time -> participant1.period;
      participant.time as time1 -> participant1.period = create('Period') as period then{
        time1 -> period.start = create('dateTime') as start then TSDateTime(time1,start) "val";
       }"time";
       participant.time as time1 -> participant1.period =create('Period') as period then IVLTSPeriod(time1,period);
      participant.functionCode -> practitionerRole.code;
      //non mappa i 2 precedenti
      participantRole  -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'PUT', e13.resource = create('Practitioner') as practitioner then {
        participantRole->practitioner.meta as meta then {
          participantRole->meta.tag = create('Coding') as coding then {
            participantRole -> coding.system ='http://algoritmodiscoring'"system";
            participantRole -> coding.code ='ClinicalDocument/body/observation/participant'"code";
          }"coding";
        }"meta";
        participantRole.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            participantRole-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id  = (r +'-'+ ext) as uuid4,  e13.fullUrl = append('https://example/Practitioner/', uuid4),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "org";
          }"r";
        }"identifier";
        participantRole.code -> practitionerRole.code;
        participantRole.addr -> practitioner.address;
        participantRole.telecom -> practitioner.telecom;
        participantRole.playingEntity as playingEntity then {
          playingEntity.name -> practitioner.name;
          playingEntity.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
          }"birth";
        }"name";
      }"practitioner";
    }"partRole";
  }"participantEncounter";

  //participant device
  obs.participant as devParticipant where(typeCode='DEV') -> bundle.entry as e14, e14.request = create('BackboneElement') as request, request.method = 'POST', e14.resource = create('Device') as device,  device.id = uuid() as uuid14,  e14.fullUrl = append('https://example/Device/', uuid14), request.url='Device', ob.device = create('Reference') as reference,  reference.reference = ('https://example/Device/' + %device.id) then {
    devParticipant.participantRole as participantRoleDev then {
      participantRoleDev.playingDevice as playingDevice then {
        playingDevice.code -> device.type;
        playingDevice.manufacturerModelName as manufacturerModelName then{
          manufacturerModelName as m-> device.manufacturer = (m.displayName) "displayRule";
        }"manufacturer"; 
        playingDevice.softwareName as softwareName -> device.deviceName as deviceName then{
          softwareName -> deviceName.type = 'other' "typeName";		
          softwareName as s -> deviceName.name = (s.displayName) "name";
        }"deviceName";
      }"playingDevice";
    }"participantRoleDev";
  }"devParticipant";

  //observationMedia
  obs.entryRelationship as er then {
    er.observationMedia as obsMedia -> bundle.entry as e15, e15.request = create('BackboneElement') as request, request.method = 'POST', e15.resource = create('Media') as media1,  media1.id = uuid() as uuid15,  e15.fullUrl = append('https://example/Media/', uuid15), request.url='Media', ob.derivedFrom = create('Reference') as reference,  reference.reference = ('https://example/Media/' + %media1.id) then {
      obsMedia-> media1.content = create('Attachment') as Attachment then {
        obsMedia -> media1.status='unknown'"status";
        obsMedia.value as valueMedia then {
          valueMedia.mediaType as type -> Attachment.contentType=type "type";
          valueMedia -> Attachment.data=(valueMedia.dataBase64Binary) "data";
        }"valuemedia";
      } "Attachment";
    }"media";
  }"observationMedia";

  //referenceRange   
  obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
    refRange.observationRange as obsRange then {
    obsRange.value:ST as value->ref.text =create('string'),ref.text= (value.dataString) "value";
      obsRange -> ref.low = create('Quantity') as Low  then {
      obsRange.value: IVL_PQ as v  then {
        v.low as l1 then {
          l1.value as decValue-> Low.value = decValue;
          l1.unit as Unit-> Low.unit = Unit;
        }"decValue"; 
        v->ref.high = create('Quantity') as high  then {
          v.high as h1 then {
            h1.value as decValue1-> high.value = decValue1;
            h1.unit as Unit1-> high.unit = Unit1;
          }"decValue";
        }"high";           
      }"IVL_PQ";
      obsRange.interpretationCode->ref.type;
      obsRange.precondition as precondition then { 
        precondition.criterion as criterion then{ 
          criterion.code -> ref.appliesTo "appliesTo";
          criterion.value: IVL_PQ as v then {
            v.high as l1 then {
           l1-> ref.age = create('Quantity')as age then {
            l1 -> age.high as high then {
              l1.value as decValue -> high.value = decValue;
              l1.unit as Unit1-> high.unit = Unit1;
                      }"high";
                    }"age";
                  } "low"; 
             } "v"; 
          } "criterion"; 
       }"precondition";
    }"obsRange";              
  }"refRange";  
 }"ref";

}

group Observation2 (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle, source cda: Act, target specimenp : Specimen) {
    
  obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference"; 
  obs.code -> ob.code;

  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
  obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
  obs.effectiveTime as eff-> ob.effective=create('Period') as period then IVLTSPeriod(eff,period);
  }"where";
  obs.interpretationCode -> ob.interpretation;
  obs.methodCode -> ob.method;
  obs.value:INT as int->ob.value=(int.value) "value";
  obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";
  obs.value:CE as val then{
    val->ob.value =create('CodeableConcept') as ce then {
      val.originalText as originalText then{
        originalText.reference as reference-> ce.text=reference;
      }"originltext";
      val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        val.codeSystemVersion as version -> coding.version = cast(version, 'string');
      }"code";
      val.translation as translation -> ce.coding as coding then {
        translation.code as code -> coding.code = cast(code, 'string');
        translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        translation.displayName as display -> coding.display = cast(display, 'string');
        translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
        translation.qualifier as qualifier then{
          qualifier.value as value -> ce.coding as coding then {
            value.code as code -> coding.code = cast(code, 'string');
            value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
            value.displayName as display -> coding.display = cast(display, 'string');
            value.codeSystemVersion as version -> coding.version = cast(version, 'string');
          }"value";
        }"qualifier";
      }"translation";
    }"coding";
  }"val";
  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
      val.value as value->quantity.value = value;
      val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";
  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";


  //Note e commenti
  obs.entryRelationship as entryRelationship then {
    entryRelationship.act as act then {
      act.text as text then {
        text.reference as reference -> ob.note as note then {
          reference->note.text =(reference.value)"reference";
        }"reference";
      }"text";
    }"Act";
  }"entryRelationship";

  //subject
  obs.subject as sbj then {
    sbj.relatedSubject as relatedSubj-> patient.extension as extension2 then ExtSubjectAnimal(relatedSubj, extension2);
  }"subject";

  cda where cda.entryRelationship.act.exists() then {
  //specimen
    obs.specimen as spmn  then {
      spmn.specimenRole as specimenRole then{  
        specimenRole.id as id then{
          id.extension as extobs then{
            cda.entryRelationship as entryRelationship then{
              entryRelationship.act as a then{
                a.specimen as sp then{
                  sp.specimenRole as spr then{
                    spr.id where(extension = extobs) -> bundle.entry as e4o, e4o.request = create('BackboneElement') as request, request.method = 'POST', e4o.resource = create('Specimen') as specimen, specimen.id = uuid() as uuid4o, e4o.fullUrl = append('https://example/Specimen/', uuid4o), request.url = 'Specimen', ob.specimen=create('Reference') as reference, reference.reference = ('https://example/Specimen/' + %specimen.id) then{
                      spr -> specimen.parent=create('Reference') as reference,  reference.reference = ('https://example/Specimen/' + %specimenp.id) "reference";   
                      spr.id -> specimen.identifier;
                      specimenRole.specimenPlayingEntity as spent then{
                        spent.code -> specimen.type;
                      }"ent";
                      spr.specimenPlayingEntity as specimenPlayingEntity then {
                        specimenPlayingEntity.code -> specimen.type;
                      }"specimenPlayingEntity";   
                        a -> specimen.collection=create('BackboneElement') as collection then {
                          a.effectiveTime as effectivetime -> collection.collected =create('dateTime') as value then TSDateTime(effectivetime,value)"value";
                          a where effectiveTime.low.exists() or effectiveTime.high.exists() then {
                          a.effectiveTime as eff-> collection.collected=create('Period') as period then IVLTSPeriod(eff,period);
                          }"where";
                          a.participant as participant ->bundle.entry as e10, e10.request = create('BackboneElement') as request, request.method = 'PUT', e10.resource = create('Practitioner') as practitioner, practitioner.id = uuid() as uuid11, e10.fullUrl = append('https://example/Practitioner/', uuid11),  collection.collector = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) then {
                            participant.participantRole as participantRole then {
                              participantRole->practitioner.meta as meta then {
                                participantRole->meta.tag = create('Coding') as coding then {
                                  participantRole -> coding.system ='http://algoritmodiscoring'"system";
                                  participantRole -> coding.code ='ClinicalDocument/body/act/participant'"code";
                                }"coding";
                              }"meta";
                              participantRole.id as id -> practitioner.identifier as identifier then {
                                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                                id.extension as ext->identifier.value = ext then {
                                  participantRole-> request.url = append('Practitioner?identifier=',ext)"UUID";
                                }"ext";
                                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                              }"identifier";
                              participantRole.addr -> practitioner.address;
                              participantRole.playingEntity  as playingEntity then{
                                playingEntity.name -> practitioner.name;
                              }"playingEntity";
                            }"participantRole";
                          }"participant";
                        }"collection";  
                    }"cont";
                  }"spr";
                }"sp";
              }"a";
            }"en";             
          }"extobs";
        }"id"; 
    }"specimenRole";  
    }"specimen";
  }"condition act exists";
  
  cda where cda.entryRelationship.act.exists().not() and (obs.specimen.specimenRole.specimenPlayingEntity.code.code != specimenp.type.coding.code) then {
    obs.specimen as spmn ->bundle.entry as e4o, e4o.request = create('BackboneElement') as request, request.method = 'POST', e4o.resource = create('Specimen') as specimen, specimen.id = uuid() as uuid4o, e4o.fullUrl = append('https://example/Specimen/', uuid4o), request.url = 'Specimen', ob.specimen=create('Reference') as reference, reference.reference = ('https://example/Specimen/' + %specimen.id) then {
      spmn.specimenRole as specimenRole then{
        specimenRole.id  -> specimen.identifier;
     specimenRole.specimenPlayingEntity as specimenPlayingEntity then {
          specimenPlayingEntity.code -> specimen.type;
        }"specimenPlayingEntity";
      }"specimenRole";
    }"specimen";    
  }"where not exists";
  
  //performer
  obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',  e1.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e1.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url = 'PractitionerRole' then{
    performer -> ob.performer = create('Reference') as reference,  reference.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
      performer.assignedEntity as entity then {
        entity.code -> practitionerRole.code;
        entity -> bundle.entry as e2,  e2.request = create('BackboneElement') as request, request.method = 'PUT', e2.resource = create('Practitioner') as practitioner then {
          entity->practitioner.meta as meta then {
            entity->meta.tag = create('Coding') as coding then {
              entity -> coding.system ='http://algoritmodiscoring'"system";
              entity -> coding.code ='ClinicalDocument/body/observation/performer'"code";
            }"coding";
          }"meta";
          entity.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              entity-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e2.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "performer";
            }"r";
          }"identifier";
          entity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";
          entity.addr -> practitioner.address;      
          entity.telecom -> practitioner.telecom;
          entity.assignedPerson as person then {
            person.name -> practitioner.name;
            person.birthTime as birthTime then{
              birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
            }"birth";
          }"name";
          //organization
          entity.representedOrganization as representedOrganization ->  bundle.entry as e3,  e3.request = create('BackboneElement') as request, request.method = 'PUT',  e3.resource = create('Organization') as organization  then {
            representedOrganization->organization.meta as meta then {
              representedOrganization->meta.tag = create('Coding') as coding then {
                representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
                representedOrganization -> coding.code ='ClinicalDocument/body/observation/performer/representedOrganization'"code";
              }"coding";
            }"meta";
           representedOrganization.id as id -> organization.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid3,  e3.fullUrl = append('https://example/Organization/', uuid3), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid3)"aut";
              }"r";
            }"identifier";
            representedOrganization.name as v -> organization.name = (v.other);
            representedOrganization.telecom -> organization.telecom;
            representedOrganization.addr -> organization.address;
            representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e4,  e4.request = create('BackboneElement') as request, e4.resource = create('Organization') as organization1, request.method = 'PUT' then {
              OrgPartOf->organization1.meta as meta then {
                OrgPartOf->meta.tag = create('Coding') as coding then {
                  OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
                  OrgPartOf -> coding.code ='ClinicalDocument/body/observation/performer/representedOrganization/asOrganizationPartOf'"code";
                }"coding";
              }"meta"; 
              OrgPartOf.id as id -> organization1.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization1.id  = (r +'-'+ ext) as uuid4,  e4.fullUrl = append('https://example/Organization/', uuid4), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id)  "org";
                }"r";
              }"identifier";
              OrgPartOf.code -> organization1.type;
              OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
              OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e5,  e5.request = create('BackboneElement') as request, request.method = 'PUT',  e5.resource = create('Organization') as organization2 then{
                wholeOrgan->organization2.meta as meta then {
                  wholeOrgan->meta.tag = create('Coding') as coding then {
                    wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                    wholeOrgan -> coding.code ='ClinicalDocument/body/observation/performer/representedOrganization/wholeOrganization'"code";
                  }"coding";
                }"meta";
                wholeOrgan.id as id -> organization2.identifier as identifier then {
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext then {
                    wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
                  }"ext";
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                  id.root as r then {
                    id.extension as ext  -> organization2.id  = (r +'-'+ ext) as uuid5,  e5.fullUrl = append('https://example/Organization/', uuid5), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id) "org";
                  }"r"; 
                }"identifier";
                wholeOrgan.name as v -> organization2.name = (v.other);
                wholeOrgan.telecom -> organization2.telecom;
                wholeOrgan.addr -> organization2.address;
              }"wholeOrganization";
            }"OrgPartOf";
          }"representedOrganization"; 
        }"practitioner";
      }"entity";
    }"practitionerRole";
  }"performer";

  //author
  obs.author as srcAuthor ->  bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST', e6.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid6,  e6.fullUrl = append('https://example/PractitionerRole/', uuid6), request.url='PractitionerRole', ob.performer = create('Reference') as referenceaut,  referenceaut.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
    srcAuthor.assignedAuthor as assignedAuthor then {
      assignedAuthor.code as codice -> practitionerRole.code as code2 then CECodeableConcept(codice,code2);
      assignedAuthor -> bundle.entry as e7,  e7.request = create('BackboneElement') as request, request.method = 'PUT', e7.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid7 then {
        srcAuthor.functionCode -> practitionerRole.code;
        assignedAuthor->practitioner.meta as meta then {
          assignedAuthor->meta.tag = create('Coding') as coding then {
            assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
            assignedAuthor -> coding.code ='ClinicalDocument/body/observation/author'"code";
          }"coding";
        }"meta";
        assignedAuthor.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            assignedAuthor-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,   e7.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"aut";
          }"r";
          assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";
        }"identifier";
        assignedAuthor.addr -> practitioner.address;      
        assignedAuthor.telecom -> practitioner.telecom;
        //person
        assignedAuthor.assignedPerson as person then {
          person.name -> practitioner.name;
          person.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
          }"birth";
        }"name";
      }"ASSAUth";
      //organization
      assignedAuthor.representedOrganization as representedOrganization ->  bundle.entry as e8,  e8.request = create('BackboneElement') as request, request.method = 'PUT',  e8.resource = create('Organization') as organization then {
        representedOrganization->organization.meta as meta then {
          representedOrganization->meta.tag = create('Coding') as coding then {
            representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
            representedOrganization -> coding.code ='ClinicalDocument/body/observation/author/representedOrganization'"code";
          }"coding";
        }"meta";
        representedOrganization.id as id -> organization.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid3,   e8.fullUrl = append('https://example/Organization/', uuid3), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid3)"org";
          }"r";
        }"identifier";
        representedOrganization.name as v -> organization.name = (v.other);
        representedOrganization.telecom -> organization.telecom;
        representedOrganization.addr -> organization.address;
        representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e9,  e9.request = create('BackboneElement') as request, request.method = 'PUT',  e9.resource = create('Organization') as organization1 then {
          OrgPartOf->organization1.meta as meta then {
            OrgPartOf->meta.tag = create('Coding') as coding then {
              OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
              OrgPartOf -> coding.code ='ClinicalDocument/body/observation/author/representedOrganization/asOrganizationPartOf'"code";
            }"coding";
          }"meta";
          OrgPartOf.id as id -> organization1.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> organization1.id = (r +'-'+ ext) as uuid4,   e9.fullUrl = append('https://example/Organization/', uuid4), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id) "org";
            }"r"; 
          }"identifier";
          OrgPartOf.code -> organization1.type;
          OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
          OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e10,  e10.request = create('BackboneElement') as request, request.method = 'PUT',  e10.resource = create('Organization') as organization2 then{
            wholeOrgan->organization2.meta as meta then {
              wholeOrgan->meta.tag = create('Coding') as coding then {
                wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                wholeOrgan -> coding.code ='ClinicalDocument/body/observation/author/representedOrganization/asOrganizationPartOf/wholeOrganization'"code";
              }"coding";
            }"meta";
            wholeOrgan.id as id -> organization2.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> organization2.id = (r +'-'+ ext) as uuid4, e10.fullUrl = append('https://example/Organization/', uuid4), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id)    "org";
              }"r"; 
            }"identifier";
            wholeOrgan.name as v -> organization2.name = (v.other);
            wholeOrgan.telecom -> organization2.telecom;
            wholeOrgan.addr -> organization2.address;
          }"wholeOrganization";
        }"OrgPartOf";
      }"representedOrganization"; 
      //device
      assignedAuthor.assignedAuthoringDevice as assignedAuthoringDevice -> bundle.entry as e11,  e11.request = create('BackboneElement') as request, request.method = 'POST',  e11.resource = create('Device') as device,  device.id = uuid() as uuid11,  e11.fullUrl = append('https://example/Device/', uuid11), request.url ='Device', tgt.author = create('Reference') as reference, reference.reference= ('https://example/Device/' + %device.id) then{
        assignedAuthoringDevice.templateId -> device.identifier; 
        assignedAuthoringDevice.code -> device.type;
        assignedAuthoringDevice.manufacturerModelName as manufacturerModelName then{
          manufacturerModelName as m-> device.manufacturer = (m.displayName) "displayRule";
        }"manufacturer"; 
        assignedAuthoringDevice.softwareName as softwareName -> device.deviceName as deviceName then{
          softwareName -> deviceName.type = 'other' "typeName";		
          softwareName as s -> deviceName.name = (s.displayName) "name";
        }"deviceName";
      }"Device";
    }"assignedAuthor";
  }"author";

  //participant person
  obs.participant as participant where(typeCode!='DEV') ->  ob.encounter = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) then {
    participant -> encounter.participant as FhirParticipant then {
      participant as p -> FhirParticipant.type as type then { 
        p -> type.coding as coding then{
          p-> coding.code = (p.typeCode) "codice";
          p-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
        } "codeType"; 
      }"type";
    }"fhirParticipant";
    participant.participantRole as participantRole -> bundle.entry as e12,   e12.request = create('BackboneElement') as request, request.method = 'POST',  e12.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid12 ,  e12.fullUrl = append('https://example/PractitionerRole/', uuid12), request.url = 'PractitionerRole', encounter.participant = create('BackboneElement') as participant1, participant1.individual = create('Reference') as referencepart, referencepart.reference =  ('https://example/Practitioner/' + %practitionerRole.id) then { 
      //participant.time -> participant1.period;
      participant.time as time1 -> participant1.period = create('Period') as period then{
        time1 -> period.start = create('dateTime') as start then TSDateTime(time1,start) "val";
       }"time"; 
       participant.time as time1 -> participant1.period =create('Period') as period then IVLTSPeriod(time1,period);
      participant.functionCode -> practitionerRole.code;
      //non mappa i 2 precedenti
      participantRole  -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'PUT', e13.resource = create('Practitioner') as practitioner then {
        participantRole->practitioner.meta as meta then {
          participantRole->meta.tag = create('Coding') as coding then {
            participantRole -> coding.system ='http://algoritmodiscoring'"system";
            participantRole -> coding.code ='ClinicalDocument/body/observation/participant'"code";
          }"coding";
        }"meta";
        participantRole.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            participantRole-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id  = (r +'-'+ ext) as uuid4,  e13.fullUrl = append('https://example/Practitioner/', uuid4),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "org";
          }"r";
        }"identifier";
        participantRole.code -> practitionerRole.code;
        participantRole.addr -> practitioner.address;
        participantRole.telecom -> practitioner.telecom;
        participantRole.playingEntity as playingEntity then {
          playingEntity.name -> practitioner.name;
          playingEntity.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
          }"birth";
        }"name";
      }"practitioner";
    }"partRole";
  }"participantEncounter";

  //participant device
  obs.participant as devParticipant where(typeCode='DEV') -> bundle.entry as e14, e14.request = create('BackboneElement') as request, request.method = 'POST', e14.resource = create('Device') as device,  device.id = uuid() as uuid14,  e14.fullUrl = append('https://example/Device/', uuid14), request.url='Device', ob.device = create('Reference') as reference,  reference.reference = ('https://example/Device/' + %device.id) then {
    devParticipant.participantRole as participantRoleDev then {
      participantRoleDev.playingDevice as playingDevice then {
        playingDevice.code -> device.type;
        playingDevice.manufacturerModelName as manufacturerModelName then{
          manufacturerModelName as m-> device.manufacturer = (m.displayName) "displayRule";
        }"manufacturer"; 
        playingDevice.softwareName as softwareName -> device.deviceName as deviceName then{
          softwareName -> deviceName.type = 'other' "typeName";		
          softwareName as s -> deviceName.name = (s.displayName) "name";
        }"deviceName";
      }"playingDevice";
    }"participantRoleDev";
  }"devParticipant";

  //observationMedia
  obs.entryRelationship as er then {
    er.observationMedia as obsMedia -> bundle.entry as e15, e15.request = create('BackboneElement') as request, request.method = 'POST', e15.resource = create('Media') as media1,  media1.id = uuid() as uuid15,  e15.fullUrl = append('https://example/Media/', uuid15), request.url='Media', ob.derivedFrom = create('Reference') as reference,  reference.reference = ('https://example/Media/' + %media1.id) then {
      obsMedia-> media1.content = create('Attachment') as Attachment then {
        obsMedia -> media1.status='unknown'"status";
        obsMedia.value as valueMedia then {
          valueMedia.mediaType as type -> Attachment.contentType=type "type";
          valueMedia -> Attachment.data=(valueMedia.dataBase64Binary) "data";
        }"valuemedia";
      } "Attachment";
    }"media";
  }"observationMedia";

  //referenceRange   
  obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
    refRange.observationRange as obsRange then {
    obsRange.value:ST as value->ref.text =create('string'),ref.text= (value.dataString) "value";
      obsRange -> ref.low = create('Quantity') as Low  then {
      obsRange.value: IVL_PQ as v  then {
        v.low as l1 then {
          l1.value as decValue-> Low.value = decValue;
          l1.unit as Unit-> Low.unit = Unit;
        }"decValue"; 
        v->ref.high = create('Quantity') as high  then {
          v.high as h1 then {
            h1.value as decValue1-> high.value = decValue1;
            h1.unit as Unit1-> high.unit = Unit1;
          }"decValue";
        }"high";           
      }"IVL_PQ";
      obsRange.interpretationCode->ref.type;
      obsRange.precondition as precondition then { 
        precondition.criterion as criterion then{ 
          criterion.code -> ref.appliesTo "appliesTo";
          criterion.value: IVL_PQ as v then {
            v.high as l1 then {
           l1-> ref.age = create('Quantity')as age then {
            l1 -> age.high as high then {
              l1.value as decValue -> high.value = decValue;
              l1.unit as Unit1-> high.unit = Unit1;
                      }"high";
                    }"age";
                  } "low"; 
             } "v"; 
          } "criterion"; 
       }"precondition";
    }"obsRange";              
  }"refRange";  
 }"ref";

}

group Observation3 (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle, source cda: Act) {
    
  obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference"; 
  obs.code -> ob.code;

  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
  obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
  obs.effectiveTime as eff-> ob.effective=create('Period') as period then IVLTSPeriod(eff,period);
  }"where";
  obs.interpretationCode -> ob.interpretation;
  obs.methodCode -> ob.method;
  obs.value:INT as int->ob.value=(int.value) "value";
  obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";
  obs.value:CE as val then{
    val->ob.value =create('CodeableConcept') as ce then {
      val.originalText as originalText then{
        originalText.reference as reference-> ce.text=reference;
      }"originltext";
      val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        val.codeSystemVersion as version -> coding.version = cast(version, 'string');
      }"code";
      val.translation as translation -> ce.coding as coding then {
        translation.code as code -> coding.code = cast(code, 'string');
        translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        translation.displayName as display -> coding.display = cast(display, 'string');
        translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
        translation.qualifier as qualifier then{
          qualifier.value as value -> ce.coding as coding then {
            value.code as code -> coding.code = cast(code, 'string');
            value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
            value.displayName as display -> coding.display = cast(display, 'string');
            value.codeSystemVersion as version -> coding.version = cast(version, 'string');
          }"value";
        }"qualifier";
      }"translation";
    }"coding";
  }"val";
  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
      val.value as value->quantity.value = value;
      val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";
  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";

  //Note e commenti
  obs.entryRelationship as entryRelationship then {
    entryRelationship.act as act then {
      act.text as text then {
        text.reference as reference -> ob.note as note then {
          reference->note.text =(reference.value)"reference";
        }"reference";
      }"text";
    }"Act";
  }"entryRelationship";

  //subject
  obs.subject as sbj then {
    sbj.relatedSubject as relatedSubj-> patient.extension as extension2 then ExtSubjectAnimal(relatedSubj, extension2);
  }"subject";

  //specimen
  // cda where cda.specimen.exists() then {
  // obs.specimen -> ob.specimen = create('Reference') as reference,  reference.reference = ('https://example/Specimen/' + %specimenp.id) "ref";
  // obs.specimen as spmn  then {    
  //   spmn.specimenRole as specimenRole then{        
  //     specimenRole.specimenPlayingEntity as ent then{
  //       ent where(specimenp.type.exists().not()) then{
  //         ent.code -> specimenp.type;
  //       }"once";
  //     }"ent";
  //   }"specimenRole";  
  // }"specimen";
  // }"cda";
  obs.specimen as  spmn ->bundle.entry as e4o, e4o.request = create('BackboneElement') as request, request.method = 'POST', e4o.resource = create('Specimen') as specimen, specimen.id = uuid() as uuid4o, e4o.fullUrl = append('https://example/Specimen/', uuid4o), request.url = 'Specimen', ob.specimen=create('Reference') as reference, reference.reference = ('https://example/Specimen/' + %specimen.id) then {
      spmn.specimenRole as specimenRole then{
          specimenRole.id as id -> specimen.identifier;
          specimenRole.specimenPlayingEntity as specimenPlayingEntity then {
          specimenPlayingEntity.code -> specimen.type;
            }"specimenPlayingEntity";
        }"specimenRole";
  }"specimen";

  
  //performer
  obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',  e1.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e1.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url = 'PractitionerRole' then{
    performer -> ob.performer = create('Reference') as reference,  reference.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
      performer.assignedEntity as entity then {
        entity.code -> practitionerRole.code;
        entity -> bundle.entry as e2,  e2.request = create('BackboneElement') as request, request.method = 'PUT', e2.resource = create('Practitioner') as practitioner then {
          entity->practitioner.meta as meta then {
            entity->meta.tag = create('Coding') as coding then {
              entity -> coding.system ='http://algoritmodiscoring'"system";
              entity -> coding.code ='ClinicalDocument/body/observation/performer'"code";
            }"coding";
          }"meta";
          entity.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              entity-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e2.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "performer";
            }"r";
          }"identifier";
          entity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";
          entity.addr -> practitioner.address;      
          entity.telecom -> practitioner.telecom;
          entity.assignedPerson as person then {
            person.name -> practitioner.name;
            person.birthTime as birthTime then{
              birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
            }"birth";
          }"name";
          //organization
          entity.representedOrganization as representedOrganization ->  bundle.entry as e3,  e3.request = create('BackboneElement') as request, request.method = 'PUT',  e3.resource = create('Organization') as organization  then {
            representedOrganization->organization.meta as meta then {
              representedOrganization->meta.tag = create('Coding') as coding then {
                representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
                representedOrganization -> coding.code ='ClinicalDocument/body/observation/performer/representedOrganization'"code";
              }"coding";
            }"meta";
           representedOrganization.id as id -> organization.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid3,  e3.fullUrl = append('https://example/Organization/', uuid3), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid3)"aut";
              }"r";
            }"identifier";
            representedOrganization.name as v -> organization.name = (v.other);
            representedOrganization.telecom -> organization.telecom;
            representedOrganization.addr -> organization.address;
            representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e4,  e4.request = create('BackboneElement') as request, e4.resource = create('Organization') as organization1, request.method = 'PUT' then {
              OrgPartOf->organization1.meta as meta then {
                OrgPartOf->meta.tag = create('Coding') as coding then {
                  OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
                  OrgPartOf -> coding.code ='ClinicalDocument/body/observation/performer/representedOrganization/asOrganizationPartOf'"code";
                }"coding";
              }"meta"; 
              OrgPartOf.id as id -> organization1.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization1.id  = (r +'-'+ ext) as uuid4,  e4.fullUrl = append('https://example/Organization/', uuid4), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id)  "org";
                }"r";
              }"identifier";
              OrgPartOf.code -> organization1.type;
              OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
              OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e5,  e5.request = create('BackboneElement') as request, request.method = 'PUT',  e5.resource = create('Organization') as organization2 then{
                wholeOrgan->organization2.meta as meta then {
                  wholeOrgan->meta.tag = create('Coding') as coding then {
                    wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                    wholeOrgan -> coding.code ='ClinicalDocument/body/observation/performer/representedOrganization/wholeOrganization'"code";
                  }"coding";
                }"meta";
                wholeOrgan.id as id -> organization2.identifier as identifier then {
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext then {
                    wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
                  }"ext";
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                  id.root as r then {
                    id.extension as ext  -> organization2.id  = (r +'-'+ ext) as uuid5,  e5.fullUrl = append('https://example/Organization/', uuid5), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id) "org";
                  }"r"; 
                }"identifier";
                wholeOrgan.name as v -> organization2.name = (v.other);
                wholeOrgan.telecom -> organization2.telecom;
                wholeOrgan.addr -> organization2.address;
              }"wholeOrganization";
            }"OrgPartOf";
          }"representedOrganization"; 
        }"practitioner";
      }"entity";
    }"practitionerRole";
  }"performer";

  //author
  obs.author as srcAuthor ->  bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST', e6.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid6,  e6.fullUrl = append('https://example/PractitionerRole/', uuid6), request.url='PractitionerRole', ob.performer = create('Reference') as referenceaut,  referenceaut.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
    srcAuthor.assignedAuthor as assignedAuthor then {
      assignedAuthor.code as codice -> practitionerRole.code as code2 then CECodeableConcept(codice,code2);
      assignedAuthor -> bundle.entry as e7,  e7.request = create('BackboneElement') as request, request.method = 'PUT', e7.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid7 then {
        srcAuthor.functionCode -> practitionerRole.code;
        assignedAuthor->practitioner.meta as meta then {
          assignedAuthor->meta.tag = create('Coding') as coding then {
            assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
            assignedAuthor -> coding.code ='ClinicalDocument/body/observation/author'"code";
          }"coding";
        }"meta";
        assignedAuthor.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            assignedAuthor-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,   e7.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"aut";
          }"r";
          assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";
        }"identifier";
        assignedAuthor.addr -> practitioner.address;      
        assignedAuthor.telecom -> practitioner.telecom;
        //person
        assignedAuthor.assignedPerson as person then {
          person.name -> practitioner.name;
          person.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
          }"birth";
        }"name";
      }"ASSAUth";
      //organization
      assignedAuthor.representedOrganization as representedOrganization ->  bundle.entry as e8,  e8.request = create('BackboneElement') as request, request.method = 'PUT',  e8.resource = create('Organization') as organization then {
        representedOrganization->organization.meta as meta then {
          representedOrganization->meta.tag = create('Coding') as coding then {
            representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
            representedOrganization -> coding.code ='ClinicalDocument/body/observation/author/representedOrganization'"code";
          }"coding";
        }"meta";
        representedOrganization.id as id -> organization.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid3,   e8.fullUrl = append('https://example/Organization/', uuid3), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid3)"org";
          }"r";
        }"identifier";
        representedOrganization.name as v -> organization.name = (v.other);
        representedOrganization.telecom -> organization.telecom;
        representedOrganization.addr -> organization.address;
        representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e9,  e9.request = create('BackboneElement') as request, request.method = 'PUT',  e9.resource = create('Organization') as organization1 then {
          OrgPartOf->organization1.meta as meta then {
            OrgPartOf->meta.tag = create('Coding') as coding then {
              OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
              OrgPartOf -> coding.code ='ClinicalDocument/body/observation/author/representedOrganization/asOrganizationPartOf'"code";
            }"coding";
          }"meta";
          OrgPartOf.id as id -> organization1.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> organization1.id = (r +'-'+ ext) as uuid4,   e9.fullUrl = append('https://example/Organization/', uuid4), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id) "org";
            }"r"; 
          }"identifier";
          OrgPartOf.code -> organization1.type;
          OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
          OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e10,  e10.request = create('BackboneElement') as request, request.method = 'PUT',  e10.resource = create('Organization') as organization2 then{
            wholeOrgan->organization2.meta as meta then {
              wholeOrgan->meta.tag = create('Coding') as coding then {
                wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                wholeOrgan -> coding.code ='ClinicalDocument/body/observation/author/representedOrganization/asOrganizationPartOf/wholeOrganization'"code";
              }"coding";
            }"meta";
            wholeOrgan.id as id -> organization2.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> organization2.id = (r +'-'+ ext) as uuid4, e10.fullUrl = append('https://example/Organization/', uuid4), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id)    "org";
              }"r"; 
            }"identifier";
            wholeOrgan.name as v -> organization2.name = (v.other);
            wholeOrgan.telecom -> organization2.telecom;
            wholeOrgan.addr -> organization2.address;
          }"wholeOrganization";
        }"OrgPartOf";
      }"representedOrganization"; 
      //device
      assignedAuthor.assignedAuthoringDevice as assignedAuthoringDevice -> bundle.entry as e11,  e11.request = create('BackboneElement') as request, request.method = 'POST',  e11.resource = create('Device') as device,  device.id = uuid() as uuid11,  e11.fullUrl = append('https://example/Device/', uuid11), request.url ='Device', tgt.author = create('Reference') as reference, reference.reference= ('https://example/Device/' + %device.id) then{
        assignedAuthoringDevice.templateId -> device.identifier; 
        assignedAuthoringDevice.code -> device.type;
        assignedAuthoringDevice.manufacturerModelName as manufacturerModelName then{
          manufacturerModelName as m-> device.manufacturer = (m.displayName) "displayRule";
        }"manufacturer"; 
        assignedAuthoringDevice.softwareName as softwareName -> device.deviceName as deviceName then{
          softwareName -> deviceName.type = 'other' "typeName";		
          softwareName as s -> deviceName.name = (s.displayName) "name";
        }"deviceName";
      }"Device";
    }"assignedAuthor";
  }"author";

  //participant person
  obs.participant as participant where(typeCode!='DEV') ->  ob.encounter = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) then {
    participant -> encounter.participant as FhirParticipant then {
      participant as p -> FhirParticipant.type as type then { 
        p -> type.coding as coding then{
          p-> coding.code = (p.typeCode) "codice";
          p-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
        } "codeType"; 
      }"type";
    }"fhirParticipant";
    participant.participantRole as participantRole -> bundle.entry as e12,   e12.request = create('BackboneElement') as request, request.method = 'POST',  e12.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid12 ,  e12.fullUrl = append('https://example/PractitionerRole/', uuid12), request.url = 'PractitionerRole', encounter.participant = create('BackboneElement') as participant1, participant1.individual = create('Reference') as referencepart, referencepart.reference =  ('https://example/Practitioner/' + %practitionerRole.id) then { 
      //participant.time -> participant1.period;
      participant.time as time1 -> participant1.period = create('Period') as period then {
        time1 -> period.start = create('dateTime') as start then TSDateTime(time1,start) "val";
       }"time";
       participant.time as time1 -> participant1.period =create('Period') as period then IVLTSPeriod(time1,period);
      participant.functionCode -> practitionerRole.code;
      //non mappa i 2 precedenti
      participantRole  -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'PUT', e13.resource = create('Practitioner') as practitioner then {
        participantRole->practitioner.meta as meta then {
          participantRole->meta.tag = create('Coding') as coding then {
            participantRole -> coding.system ='http://algoritmodiscoring'"system";
            participantRole -> coding.code ='ClinicalDocument/body/observation/participant'"code";
          }"coding";
        }"meta";
        participantRole.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            participantRole-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id  = (r +'-'+ ext) as uuid4,  e13.fullUrl = append('https://example/Practitioner/', uuid4),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "org";
          }"r";
        }"identifier";
        participantRole.code -> practitionerRole.code;
        participantRole.addr -> practitioner.address;
        participantRole.telecom -> practitioner.telecom;
        participantRole.playingEntity as playingEntity then {
          playingEntity.name -> practitioner.name;
          playingEntity.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
          }"birth";
        }"name";
      }"practitioner";
    }"partRole";
  }"participantEncounter";

  //participant device
  obs.participant as devParticipant where(typeCode='DEV') -> bundle.entry as e14, e14.request = create('BackboneElement') as request, request.method = 'POST', e14.resource = create('Device') as device,  device.id = uuid() as uuid14,  e14.fullUrl = append('https://example/Device/', uuid14), request.url='Device', ob.device = create('Reference') as reference,  reference.reference = ('https://example/Device/' + %device.id) then {
    devParticipant.participantRole as participantRoleDev then {
      participantRoleDev.playingDevice as playingDevice then {
        playingDevice.code -> device.type;
        playingDevice.manufacturerModelName as manufacturerModelName then{
          manufacturerModelName as m-> device.manufacturer = (m.displayName) "displayRule";
        }"manufacturer"; 
        playingDevice.softwareName as softwareName -> device.deviceName as deviceName then{
          softwareName -> deviceName.type = 'other' "typeName";		
          softwareName as s -> deviceName.name = (s.displayName) "name";
        }"deviceName";
      }"playingDevice";
    }"participantRoleDev";
  }"devParticipant";

  //observationMedia
  obs.entryRelationship as er then {
    er.observationMedia as obsMedia -> bundle.entry as e15, e15.request = create('BackboneElement') as request, request.method = 'POST', e15.resource = create('Media') as media1,  media1.id = uuid() as uuid15,  e15.fullUrl = append('https://example/Media/', uuid15), request.url='Media', ob.derivedFrom = create('Reference') as reference,  reference.reference = ('https://example/Media/' + %media1.id) then {
      obsMedia-> media1.content = create('Attachment') as Attachment then {
        obsMedia -> media1.status='unknown'"status";
        obsMedia.value as valueMedia then {
          valueMedia.mediaType as type -> Attachment.contentType=type "type";
          valueMedia -> Attachment.data=(valueMedia.dataBase64Binary) "data";
        }"valuemedia";
      } "Attachment";
    }"media";
  }"observationMedia";

  //referenceRange   
  obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
    refRange.observationRange as obsRange then {
    obsRange.value:ST as value->ref.text =create('string'),ref.text= (value.dataString) "value";
      obsRange -> ref.low = create('Quantity') as Low  then {
      obsRange.value: IVL_PQ as v  then {
        v.low as l1 then {
          l1.value as decValue-> Low.value = decValue;
          l1.unit as Unit-> Low.unit = Unit;
        }"decValue"; 
        v->ref.high = create('Quantity') as high  then {
          v.high as h1 then {
            h1.value as decValue1-> high.value = decValue1;
            h1.unit as Unit1-> high.unit = Unit1;
          }"decValue";
        }"high";           
      }"IVL_PQ";
      obsRange.interpretationCode->ref.type;
      obsRange.precondition as precondition then { 
        precondition.criterion as criterion then{ 
          criterion.code -> ref.appliesTo "appliesTo";
          criterion.value: IVL_PQ as v then {
            v.high as l1 then {
           l1-> ref.age = create('Quantity')as age then {
            l1 -> age.high as high then {
              l1.value as decValue -> high.value = decValue;
              l1.unit as Unit1-> high.unit = Unit1;
                      }"high";
                    }"age";
                  } "low"; 
             } "v"; 
          } "criterion"; 
       }"precondition";
    }"obsRange";              
  }"refRange";  
 }"ref";

}

group Act (source cda: Act, target pat : Patient, target ac : DiagnosticReport, target enc : Encounter, target bundle : Bundle){
  cda.code -> ac.code;
  cda where cda.statusCode .exists().not() then {
    cda->ac.status ='final'"statuscode";
  }"status";
  cda.statusCode as statusc where (code='completed') -> ac.status ='final';
  cda.statusCode as statusc where (code='active') -> ac.status ='registered';
  cda.statusCode as statusc where (code='aborted') -> ac.status ='cancelled';
  cda.statusCode as statusc where (code='suspended') -> ac.status ='partial';
  cda.effectiveTime as effectiveTime -> ac.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value3";
  cda where effectiveTime.low.exists() or effectiveTime.high.exists() then {
  cda.effectiveTime as eff-> ac.effective=create('Period') as period then IVLTSPeriod(eff,period);
  }"where";
  
  cda -> ac.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %pat.id) "reference";
  cda -> ac.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";

  //specimen
  cda where cda.specimen.exists() then {
    cda.specimen as src->bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST', e4.resource = create('Specimen') as specimen,  specimen.id = uuid() as uuid4,  e4.fullUrl = append('https://example/Specimen/', uuid4), request.url = 'Specimen', ac.specimen=create('Reference') as reference,  reference.reference = ('https://example/Specimen/' + %specimen.id) then {
      src.specimenRole as specimenRole then{
        specimenRole.id ->specimen.identifier;
          specimenRole.specimenPlayingEntity as specimenPlayingEntity then {
          specimenPlayingEntity.code -> specimen.type;
        }"specimenPlayingEntity";
      }"SpecimenRole";
      src->specimen.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      cda.entryRelationship as entryRelationship then {
      entryRelationship.observation as observation then {
      observation -> bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('Observation') as obs,  obs.id = uuid() as uuid13,  e12.fullUrl = append('https://example/Observation/', uuid13), request.url = 'Observation', ac.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs.id) then {
        observation then  Observation2(observation,pat,enc,obs,bundle,cda,specimen) "ORG";
        // procedure
        cda.entryRelationship as entryRelationship1 then {
          entryRelationship1.procedure as proc  -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('Procedure') as procedure,  procedure.id = uuid() as uuid5,  e5.fullUrl = append('https://example/Procedure/', uuid5), request.url = 'Procedure', obs.partOf=create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure.id)  then{
            proc -> procedure.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
            proc -> procedure.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
            proc where proc.statusCode .exists().not() then {
              proc->procedure.status ='unknown'"statuscode";
            }"status";
            proc.statusCode as statusc where (code='completed') -> procedure.status ='completed';
            proc.statusCode as statusc where (code='active') -> procedure.status ='in-progress';
            proc.statusCode as statusc where (code='aborted') -> procedure.status ='stopped';
            proc.statusCode as statusc where (code='suspended') -> procedure.status ='on-hold';
            proc.statusCode as statusc where (code='cancelled') -> procedure.status ='not-done';
            proc.statusCode as statusc where (code='held') -> procedure.status ='on-hold';
            proc.statusCode as statusc where (code='new') -> procedure.status ='preparation';
            proc.statusCode as statusc where (code='obsolete') -> procedure.status ='entered-in-error';
            proc.statusCode as statusc where (code='nullified') -> procedure.status ='unknown';
            proc.effectiveTime as effectiveTime -> procedure.performed = create('dateTime') as value then TSDateTime(effectiveTime, value) "datetime";
            proc where effectiveTime.low.exists() or effectiveTime.high.exists() then {
            proc.effectiveTime as  eff-> procedure.performed=create('Period') as period then IVLTSPeriod(eff,period);
            }"where";
            proc.targetSiteCode -> procedure.bodySite;     
          }"procedure"; 
        }"entryRelationshipprocedure"; 
      }"obs";
      }"observation";

      entryRelationship.organizer as organizer then {
        organizer -> bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('Observation') as obs,  obs.id = uuid() as uuid13,  e12.fullUrl = append('https://example/Observation/', uuid13), request.url = 'Observation', ac.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs.id) then {
          organizer then  Organizer(cda,organizer,pat,enc,obs,bundle) "ORG";
          // procedure
          cda.entryRelationship as entryRelationship1 then {
            entryRelationship1.procedure as proc  -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('Procedure') as procedure,  procedure.id = uuid() as uuid5,  e5.fullUrl = append('https://example/Procedure/', uuid5), request.url = 'Procedure', obs.partOf=create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure.id)  then{
              proc -> procedure.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
              proc -> procedure.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
              proc where proc.statusCode .exists().not() then {
                proc->procedure.status ='unknown'"statuscode";
              }"status";
              proc.statusCode as statusc where (code='completed') -> procedure.status ='completed';
              proc.statusCode as statusc where (code='active') -> procedure.status ='in-progress';
              proc.statusCode as statusc where (code='aborted') -> procedure.status ='stopped';
              proc.statusCode as statusc where (code='suspended') -> procedure.status ='on-hold';
              proc.statusCode as statusc where (code='cancelled') -> procedure.status ='not-done';
              proc.statusCode as statusc where (code='held') -> procedure.status ='on-hold';
              proc.statusCode as statusc where (code='new') -> procedure.status ='preparation';
              proc.statusCode as statusc where (code='obsolete') -> procedure.status ='entered-in-error';
              proc.statusCode as statusc where (code='nullified') -> procedure.status ='unknown';
              proc.effectiveTime as effectiveTime -> procedure.performed = create('dateTime') as value then TSDateTime(effectiveTime, value) "datetime";
              proc where effectiveTime.low.exists() or effectiveTime.high.exists() then {
              proc.effectiveTime as  eff-> procedure.performed=create('Period') as period then IVLTSPeriod(eff,period);
              }"where";
              proc.targetSiteCode -> procedure.bodySite;     
            }"pbservation"; 
          }"entryRelationshiprocedure"; 
        }"Organizer";
      }"organizer";

      }"entryRelationshipobservation";
    }"specimen";
  }"exist";

  cda where cda.specimen.exists().not() then {
   // cda -> bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST', e4.resource = create('Specimen') as specimen,  specimen.id = uuid() as uuid4,  e4.fullUrl = append('https://example/Specimen/', uuid4), request.url = 'Specimen' then {
      cda.entryRelationship as entryRelationship then {
      entryRelationship.observation as observation then {
      observation -> bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('Observation') as obs,  obs.id = uuid() as uuid13,  e12.fullUrl = append('https://example/Observation/', uuid13), request.url = 'Observation', ac.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs.id) then {
        observation then  Observation3(observation,pat,enc,obs,bundle,cda) "ORG";
        // procedure
        cda.entryRelationship as entryRelationship1 then {
          entryRelationship1.procedure as proc  -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('Procedure') as procedure,  procedure.id = uuid() as uuid5,  e5.fullUrl = append('https://example/Procedure/', uuid5), request.url = 'Procedure', obs.partOf=create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure.id)  then{
            proc -> procedure.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
            proc -> procedure.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
            proc where proc.statusCode .exists().not() then {
              proc->procedure.status ='unknown'"statuscode";
            }"status";
            proc.statusCode as statusc where (code='completed') -> procedure.status ='completed';
            proc.statusCode as statusc where (code='active') -> procedure.status ='in-progress';
            proc.statusCode as statusc where (code='aborted') -> procedure.status ='stopped';
            proc.statusCode as statusc where (code='suspended') -> procedure.status ='on-hold';
            proc.statusCode as statusc where (code='cancelled') -> procedure.status ='not-done';
            proc.statusCode as statusc where (code='held') -> procedure.status ='on-hold';
            proc.statusCode as statusc where (code='new') -> procedure.status ='preparation';
            proc.statusCode as statusc where (code='obsolete') -> procedure.status ='entered-in-error';
            proc.statusCode as statusc where (code='nullified') -> procedure.status ='unknown';
            proc.effectiveTime as effectiveTime -> procedure.performed = create('dateTime') as value then TSDateTime(effectiveTime, value) "datetime";
            proc where effectiveTime.low.exists() or effectiveTime.high.exists() then {
            proc.effectiveTime as  eff-> procedure.performed=create('Period') as period then IVLTSPeriod(eff,period);
            }"where";
            proc.targetSiteCode -> procedure.bodySite;     
          }"procedure"; 
        }"entryRelationshipprocedure"; 
      }"obs";
      }"observation";
      entryRelationship.organizer as organizer then {
        organizer -> bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('Observation') as obs,  obs.id = uuid() as uuid13,  e12.fullUrl = append('https://example/Observation/', uuid13), request.url = 'Observation', ac.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs.id) then {
          organizer then  Organizer(cda,organizer,pat,enc,obs,bundle) "ORG";
          // procedure
          cda.entryRelationship as entryRelationship1 then {
            entryRelationship1.procedure as proc  -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('Procedure') as procedure,  procedure.id = uuid() as uuid5,  e5.fullUrl = append('https://example/Procedure/', uuid5), request.url = 'Procedure', obs.partOf=create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure.id)  then{
              proc -> procedure.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
              proc -> procedure.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
              proc where proc.statusCode .exists().not() then {
                proc->procedure.status ='unknown'"statuscode";
              }"status";
              proc.statusCode as statusc where (code='completed') -> procedure.status ='completed';
              proc.statusCode as statusc where (code='active') -> procedure.status ='in-progress';
              proc.statusCode as statusc where (code='aborted') -> procedure.status ='stopped';
              proc.statusCode as statusc where (code='suspended') -> procedure.status ='on-hold';
              proc.statusCode as statusc where (code='cancelled') -> procedure.status ='not-done';
              proc.statusCode as statusc where (code='held') -> procedure.status ='on-hold';
              proc.statusCode as statusc where (code='new') -> procedure.status ='preparation';
              proc.statusCode as statusc where (code='obsolete') -> procedure.status ='entered-in-error';
              proc.statusCode as statusc where (code='nullified') -> procedure.status ='unknown';
              proc.effectiveTime as effectiveTime -> procedure.performed = create('dateTime') as value then TSDateTime(effectiveTime, value) "datetime";
              proc where effectiveTime.low.exists() or effectiveTime.high.exists() then {
              proc.effectiveTime as eff-> procedure.performed=create('Period') as period then IVLTSPeriod(eff,period);
              }"where";
              proc.targetSiteCode -> procedure.bodySite;     
            }"pbservation"; 
          }"entryRelationshiprocedure"; 
        }"Organizer";
      }"organizer";
      }"entryRelationshipobservation";
     
    //}"specimen";
  }"exist not";

  //PARTICIPANT
  cda.participant  as part where(typeCode!='DEV') ->  enc.participant as participant then{
      part  -> participant.type as type then { 
        part -> type.coding as coding then {
        part-> coding.code = (part.typeCode) "codice";
        part-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
        } "codeType"; 
      }"type";
  
     part.participantRole as participantRole ->  participant.individual = create('Reference') as reference then {
        participantRole ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'PUT', e.resource = create('Practitioner') as practitioner  then { 
          part.time as time1 -> participant.period = create('Period') as period then{
            time1 -> period.start = create('dateTime') as start then TSDateTime(time1,start) "val";
           }"time";
           part.time as time1 -> participant.period =create('Period') as period then IVLTSPeriod(time1,period);
          participantRole->practitioner.meta as meta then {
            participantRole->meta.tag = create('Coding') as coding then {
              participantRole -> coding.system ='http://algoritmodiscoring'"system";
              participantRole -> coding.code ='ClinicalDocument/body/act/participant'"code";
            }"coding";
          }"meta";
          participantRole.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
               participantRole-> request.url = append('Practitioner?identifier=',ext)"UUID";
               }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> practitioner.id  = (r +'-'+ ext) as uuid4,  e.fullUrl = append('https://example/Practitioner/', uuid4),  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "org";
            }"r";
            }"identifier";

          participantRole.addr -> practitioner.address;
          participantRole.playingEntity  as playingEntity then{
          playingEntity.name -> practitioner.name;
        }"playingEntity";
      }"participanRoleBund";  
    }"participantRole";
  }"participant";

 // PERFORMER
  cda.performer as performer-> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e1.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url='PractitionerRole', ac.performer = create('Reference') as reference,  reference.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
    performer.assignedEntity as assignedEntity then {
      assignedEntity.code as codice -> practitionerRole.code;
      assignedEntity -> bundle.entry as e2,  e2.request = create('BackboneElement') as request, request.method = 'PUT', e2.resource = create('Practitioner') as practitioner   then {
      assignedEntity.code -> practitionerRole.code;
      assignedEntity->practitioner.meta as meta then {
        assignedEntity->meta.tag = create('Coding') as coding then {
          assignedEntity -> coding.system ='http://algoritmodiscoring'"system";
          assignedEntity -> coding.code ='ClinicalDocument/body/act/performer'"code";
        }"coding";
      }"meta";
      assignedEntity.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            assignedEntity-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id  = (r +'-'+ ext) as uuid4,  e2.fullUrl = append('https://example/Practitioner/', uuid4),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "pra";
          }"r";

          }"identifier";
      assignedEntity.addr -> practitioner.address;      
      assignedEntity.telecom -> practitioner.telecom;
      assignedEntity.assignedPerson as person then {
        person.name -> practitioner.name;
        person.birthTime as birthTime then{
          birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
        }"birth";
      }"name";
      } "ASSAUth";
      assignedEntity.representedOrganization as representedOrganization ->  bundle.entry as e3,  e3.request = create('BackboneElement') as request, request.method = 'PUT',  e3.resource = create('Organization') as organization then {
        representedOrganization->organization.meta as meta then {
          representedOrganization->meta.tag = create('Coding') as coding then {
            representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
            representedOrganization -> coding.code ='ClinicalDocument/body/act/representedOrganization'"code";
          }"coding";
        }"meta";
        representedOrganization.id as id -> organization.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
            }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> organization.id  = (r +'-'+ ext) as uuid2, e3.fullUrl = append('https://example/Organization/', uuid2), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid2)  "org";
          }"r";
          }"identifier";
        representedOrganization.name as v -> organization.name = (v.other);
        representedOrganization.telecom -> organization.telecom;
        representedOrganization.addr -> organization.address;
        representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e4,  e4.request = create('BackboneElement') as request, request.method = 'PUT',  e4.resource = create('Organization') as organization1 then {
          OrgPartOf->organization1.meta as meta then {
            OrgPartOf->meta.tag = create('Coding') as coding then {
              OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
              OrgPartOf -> coding.code ='ClinicalDocument/body/act/representedOrganization/asOrganizationPartOf'"code";
            }"coding";
          }"meta";
          OrgPartOf.id as id -> organization1.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
               }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> organization1.id  = (r +'-'+ ext) as uuid3,   organization1.id = uuid() as uuid3,  e4.fullUrl = append('https://example/Organization/', uuid3), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id) "org";
            }"r";
            }"identifier";
          OrgPartOf.code -> organization1.type;
          OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
          OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e10bis,  e10bis.request = create('BackboneElement') as request, request.method = 'PUT',  e10bis.resource = create('Organization') as organization2 then{
            OrgPartOf->organization2.meta as meta then {
              OrgPartOf->meta.tag = create('Coding') as coding then {
                OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
                OrgPartOf -> coding.code ='ClinicalDocument/body/act/representedOrganization/asOrganizationPartOf/wholeOrganization'"code";
              }"coding";
            }"meta";
            wholeOrgan.id as id -> organization2.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                  wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
               }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> organization2.id  = (r +'-'+ ext) as uuid5,   e10bis.fullUrl = append('https://example/Organization/', uuid5), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id) "org";
              }"r";
              }"identifier";
            wholeOrgan.name as v -> organization2.name = (v.other);
            wholeOrgan.telecom -> organization2.telecom;
            wholeOrgan.addr -> organization2.address;
            }"wholeOrganization";
          } "OrgPartOf";
       } "representedOrganization"; 
    }"performer";
  }; 
 
  // AUTHOR
  cda.author as srcAuthor-> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid6,  e5.fullUrl = append('https://example/PractitionerRole/', uuid6), request.url='PractitionerRole', ac.performer = create('Reference') as reference,  reference.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
    srcAuthor.assignedAuthor as assignedAuthor then {
        assignedAuthor.code as codice -> practitionerRole.code;
        assignedAuthor -> bundle.entry as e7,  e7.request = create('BackboneElement') as request, request.method = 'PUT', e7.resource = create('Practitioner') as practitioner  then {
        srcAuthor.functionCode -> practitionerRole.code;
        assignedAuthor.code -> practitionerRole.code;
        assignedAuthor->practitioner.meta as meta then {
          assignedAuthor->meta.tag = create('Coding') as coding then {
            assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
            assignedAuthor -> coding.code ='ClinicalDocument/body/act/author'"code";
          }"coding";
        }"meta";
        assignedAuthor.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              assignedAuthor-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e7.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
            }"r";
           }"identifier";
           assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";
        assignedAuthor.addr -> practitioner.address;      
        assignedAuthor.telecom -> practitioner.telecom;
        //person
        assignedAuthor.assignedPerson as person then {
          person.name -> practitioner.name;
          person.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
          }"birth";
        }"name";
      }"ASSAUth";
      //organization
      assignedAuthor.representedOrganization as representedOrganization ->  bundle.entry as e8,  e8.request = create('BackboneElement') as request, request.method = 'PUT',  e8.resource = create('Organization') as organization then {
        representedOrganization->organization.meta as meta then {
          representedOrganization->meta.tag = create('Coding') as coding then {
            representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
            representedOrganization -> coding.code ='ClinicalDocument/body/act/author/representedOrganization'"code";
          }"coding";
        }"meta";
        representedOrganization.id as id -> organization.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
             }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid8,  e8.fullUrl = append('https://example/Organization/', uuid8), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid8) "org";
            }"r";
            }"identifier";
        representedOrganization.name as v -> organization.name = (v.other);
        representedOrganization.telecom -> organization.telecom;
        representedOrganization.addr -> organization.address;
        representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e9,  e9.request = create('BackboneElement') as request, request.method = 'PUT',  e9.resource = create('Organization') as organization1   then {
          OrgPartOf->organization1.meta as meta then {
            OrgPartOf->meta.tag = create('Coding') as coding then {
              OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
              OrgPartOf -> coding.code ='ClinicalDocument/body/act/author/representedOrganization/asOrganizationPartOf'"code";
            }"coding";
          }"meta";  
          OrgPartOf.id as id -> organization1.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
               }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> organization1.id = (r +'-'+ ext) as uuid9,  e9.fullUrl = append('https://example/Organization/', uuid9), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id) "org";
            }"r";
            }"identifier";
            OrgPartOf.code -> organization1.type;
            OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
            OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e10,  e10.request = create('BackboneElement') as request, request.method = 'PUT',  e10.resource = create('Organization') as organization2   then{
              wholeOrgan->organization2.meta as meta then {
                wholeOrgan->meta.tag = create('Coding') as coding then {
                  wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                  wholeOrgan -> coding.code ='ClinicalDocument/body/act/author/representedOrganization/asOrganizationPartOf/wholeOrganization'"code";
                }"coding";
              }"meta";  
              wholeOrgan.id as id -> organization2.identifier as identifier then {
                 id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                 id.extension as ext->identifier.value = ext then {
                   wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization2.id = (r +'-'+ ext) as uuid10,  e10.fullUrl = append('https://example/Organization/', uuid10), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id) "org";
                }"r";
              }"identifier";
                wholeOrgan.name as v -> organization2.name = (v.other);
                wholeOrgan.telecom -> organization2.telecom;
                wholeOrgan.addr -> organization2.address;
               }"wholeOrganization";
           }"OrgPartOf";
        }"representedOrganization"; 
     }"author";
  };

  //<!--entryRelationship per la gestione delle note e commenti-->
  cda.entryRelationship as entryRelationship then {
    entryRelationship.act as act then {
      act.text as text then {
        text.reference as reference -> ac.conclusion=(reference.value);
      }"text";
    }"Act";
  }"entryRelationship"; 
}

group Organizer(source cda: Act, source org : Organizer, target patient : Patient, target encounter : Encounter, target observation : Observation, target bundle : Bundle) {
  org->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
  org->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";  
  org.code -> observation.code;
  org where org.code.exists().not() then {
    cda.code ->observation.code;
  }"act";
  org.statusCode as statusc where (code='completed') -> observation.status ='final';
  org.statusCode as statusc where (code='active') -> observation.status ='registered';
  org.statusCode as statusc where (code='aborted') -> observation.status ='cancelled';
  org.statusCode as statusc where (code='suspended') -> observation.status ='partial';
  org.effectiveTime as effectiveTime -> observation.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
  org where effectiveTime.low.exists() or effectiveTime.high.exists() then {
  org.effectiveTime as eff-> observation.effective=create('Period') as period then IVLTSPeriod(eff,period);
 }"where";
  //specimen
  org.specimen as  spmn ->bundle.entry as e4o, e4o.request = create('BackboneElement') as request, request.method = 'POST', e4o.resource = create('Specimen') as specimen, specimen.id = uuid() as uuid4o, e4o.fullUrl = append('https://example/Specimen/', uuid4o), request.url = 'Specimen', observation.specimen=create('Reference') as reference, reference.reference = ('https://example/Specimen/' + %specimen.id) then {
      spmn.specimenRole as specimenRole then{
          specimenRole.id as id -> specimen.identifier;
          specimenRole.specimenPlayingEntity as specimenPlayingEntity then {
          specimenPlayingEntity.code -> specimen.type;
            }"specimenPlayingEntity";
        }"specimenRole";
  }"specimen";

  //subject
  org.subject as sbj then {
    sbj.relatedSubject as relatedSubj-> patient.extension as extension2 then ExtSubjectAnimal(relatedSubj, extension2);
  }"subject";

  //performer
  org.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',  e1.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e1.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url = 'PractitionerRole' then{
    performer -> observation.performer = create('Reference') as reference,  reference.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
      performer.assignedEntity as entity then {
          entity.code -> practitionerRole.code;
          entity -> bundle.entry as e2,  e2.request = create('BackboneElement') as request, request.method = 'PUT', e2.resource = create('Practitioner') as practitioner  then {
            entity->practitioner.meta as meta then {
              entity->meta.tag = create('Coding') as coding then {
                entity -> coding.system ='http://algoritmodiscoring'"system";
                entity -> coding.code ='ClinicalDocument/body/organizer/performer'"code";
              }"coding";
            }"meta";
            entity.id as id -> practitioner.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                entity-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e2.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
              }"r";
            }"identifier";
            entity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
              id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"2.16.840.1.113883.2.9.4.3.2";
            entity.addr -> practitioner.address;      
            entity.telecom -> practitioner.telecom;
            entity.assignedPerson as person then {
              person.name -> practitioner.name;
              person.birthTime as birthTime then{
                birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
              }"birth";
            }"name";
              
          entity.representedOrganization as representedOrganization ->  bundle.entry as e3,  e3.request = create('BackboneElement') as request, request.method = 'PUT',  e3.resource = create('Organization') as organization  then {
            representedOrganization->organization.meta as meta then {
              representedOrganization->meta.tag = create('Coding') as coding then {
                representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
                representedOrganization -> coding.code ='ClinicalDocument/body/organizer/performer/representedOrganization'"code";
              }"coding";
            }"meta";
            representedOrganization.id as id -> organization.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                   representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
                  }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid3,  e3.fullUrl = append('https://example/Organization/', uuid3), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid3)"aut";
                }"r";
                }"identifier";
            representedOrganization.name as v -> organization.name = (v.other);
            representedOrganization.telecom -> organization.telecom;
            representedOrganization.addr -> organization.address;
            representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e4,  e4.request = create('BackboneElement') as request, request.method = 'PUT',  e4.resource = create('Organization') as organization1  then {
              OrgPartOf->organization1.meta as meta then {
                OrgPartOf->meta.tag = create('Coding') as coding then {
                  OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
                  OrgPartOf -> coding.code ='ClinicalDocument/body/organizer/performer/representedOrganization/asOrganizationPartOf'"code";
                }"coding";
              }"meta";  
              OrgPartOf.id as id -> organization1.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization1.id = (r +'-'+ ext) as uuid4,  e4.fullUrl = append('https://example/Organization/', uuid4), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id)"org";
                }"r";
              }"identifier";
              OrgPartOf.code -> organization1.type;
              OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
              OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e5,  e5.request = create('BackboneElement') as request, request.method = 'PUT',  e5.resource = create('Organization') as organization2 then{
                wholeOrgan->organization2.meta as meta then {
                  wholeOrgan->meta.tag = create('Coding') as coding then {
                    wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                    wholeOrgan -> coding.code ='ClinicalDocument/body/organizer/performer/representedOrganization/asOrganizationPartOf/wholeOrganization'"code";
                  }"coding";
                }"meta"; 
                wholeOrgan.id as id -> organization2.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext then {
                          wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
                          }"ext";
                       id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                       id.root as r then {
                        id.extension as ext  -> organization2.id = (r +'-'+ ext) as uuid4,  e5.fullUrl = append('https://example/Organization/', uuid4), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id)"org";
                      }"r";
                     }"identifier";
                  wholeOrgan.name as v -> organization2.name = (v.other);
                  wholeOrgan.telecom -> organization2.telecom;
                  wholeOrgan.addr -> organization2.address;
                  }"wholeOrganization";
                }"OrgPartOf";
            }"representedOrganization"; 
         }"practitioner";
       }"entity";
     }"practitionerRole";
  }"performer";

  //author
  org.author as srcAuthor ->  bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST', e6.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid6,  e6.fullUrl = append('https://example/PractitionerRole/', uuid6), request.url='PractitionerRole', observation.performer = create('Reference') as referenceaut,  referenceaut.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
    //srcAuthor.time as time -> tgt.date;
    srcAuthor.assignedAuthor as assignedAuthor then {
       assignedAuthor.code as codice -> practitionerRole.code as code2 then CECodeableConcept(codice,code2);
       assignedAuthor -> bundle.entry as e7,  e7.request = create('BackboneElement') as request, request.method = 'PUT', e7.resource = create('Practitioner') as practitioner  then {
         srcAuthor.functionCode -> practitionerRole.code;
        //assignedAuthor.code -> practitionerRole.code;
        assignedAuthor->practitioner.meta as meta then {
          assignedAuthor->meta.tag = create('Coding') as coding then {
            assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
            assignedAuthor -> coding.code ='ClinicalDocument/body/organizer/author'"code";
          }"coding";
        }"meta";
         assignedAuthor.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            assignedAuthor-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid7,  e7.fullUrl = append('https://example/Practitioner/', uuid7),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
          }"r";
        }"identifier";
        assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"2.16.840.1.113883.2.9.4.3.2";
        assignedAuthor.addr -> practitioner.address;      
        assignedAuthor.telecom -> practitioner.telecom;
        //person
        assignedAuthor.assignedPerson as person then {
          person.name -> practitioner.name;
          person.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
          }"birth";
        }"name";
      }"ASSAUth";
      //organization
      assignedAuthor.representedOrganization as representedOrganization ->  bundle.entry as e8,  e8.request = create('BackboneElement') as request, request.method = 'PUT',  e8.resource = create('Organization') as organization then {
        representedOrganization->organization.meta as meta then {
          representedOrganization->meta.tag = create('Coding') as coding then {
            representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
            representedOrganization -> coding.code ='ClinicalDocument/body/organizer/author/representedOrganization'"code";
          }"coding";
        }"meta";
        representedOrganization.id as id -> organization.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid8,  e8.fullUrl = append('https://example/Organization/', uuid8), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid8)"aut";
          }"r";
        }"identifier";
        representedOrganization.name as v -> organization.name = (v.other);
        representedOrganization.telecom -> organization.telecom;
        representedOrganization.addr -> organization.address;
        representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e9,  e9.request = create('BackboneElement') as request, request.method = 'PUT',  e9.resource = create('Organization') as organization1 then {
          OrgPartOf->organization1.meta as meta then {
            OrgPartOf->meta.tag = create('Coding') as coding then {
              OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
              OrgPartOf -> coding.code ='ClinicalDocument/body/organizer/author/representedOrganization/asOrganizationPartOf'"code";
            }"coding";
          }"meta";
          OrgPartOf.id as id -> organization1.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> organization1.id = (r +'-'+ ext) as uuid9,  e9.fullUrl = append('https://example/Organization/', uuid9), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id)"aut";
            }"r";
          }"identifier";
          OrgPartOf.code -> organization1.type;
          OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
          OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e10,  e10.request = create('BackboneElement') as request, request.method = 'PUT',  e10.resource = create('Organization') as organization2   then{
            OrgPartOf->organization2.meta as meta then {
              OrgPartOf->meta.tag = create('Coding') as coding then {
                OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
                OrgPartOf -> coding.code ='ClinicalDocument/body/organizer/author/representedOrganization/asOrganizationPartOf/wholeOrganization'"code";
              }"coding";
            }"meta";
            wholeOrgan.id as id -> organization2.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> organization2.id = (r +'-'+ ext) as uuid10,  e10.fullUrl = append('https://example/Organization/', uuid10), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id)"aut";
              }"r";
            }"identifier";
            wholeOrgan.name as v -> organization2.name = (v.other);
            wholeOrgan.telecom -> organization2.telecom;
            wholeOrgan.addr -> organization2.address;
          }"wholeOrganization";
        }"OrgPartOf";
      }"representedOrganization"; 
      //device
      assignedAuthor.assignedAuthoringDevice as assignedAuthoringDevice -> bundle.entry as e11,  e11.request = create('BackboneElement') as request, request.method = 'POST',  e11.resource = create('Device') as device,  device.id = uuid() as uuid11,  e11.fullUrl = append('https://example/Device/', uuid11), request.url ='Device', tgt.author = create('Reference') as reference, reference.reference= ('https://example/Device/' + %device.id) then{
        assignedAuthoringDevice.templateId -> device.identifier; 
        assignedAuthoringDevice.code -> device.type;
        assignedAuthoringDevice.manufacturerModelName as manufacturerModelName then{
          manufacturerModelName as m-> device.manufacturer = (m.displayName) "displayRule";
        }"manufacturer"; 
        assignedAuthoringDevice.softwareName as softwareName -> device.deviceName as deviceName then{
          softwareName -> deviceName.type = 'other' "typeName";		
          softwareName as s -> deviceName.name = (s.displayName) "name";
        }"deviceName";
      }"Device";
    }"assignedAuthor";
  }"author";

  //participant person
  org.participant as participant where(typeCode!='DEV') ->  observation.encounter = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) then {
    participant -> encounter.participant as FhirParticipant then {
      participant as p -> FhirParticipant.type as type then { 
        p -> type.coding as coding then{
          p-> coding.code = (p.typeCode) "codice";
          p-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
        } "codeType"; 
      }"type";
    }"fhirParticipant";
    participant.participantRole as participantRole -> bundle.entry as e12,   e12.request = create('BackboneElement') as request, request.method = 'POST',  e12.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid12,  e12.fullUrl = append('https://example/PractitionerRole/', uuid12), request.url = 'PractitionerRole', encounter.participant = create('BackboneElement') as participant1  then { 
     // participant.time -> participant1.period; 
      participant.time as time1 -> participant1.period = create('Period') as period then{
        time1 -> period.start = create('dateTime') as start then TSDateTime(time1,start) "val";
       }"time";
       participant.time as time1 -> participant1.period =create('Period') as period then IVLTSPeriod(time1,period); 
      participant.functionCode -> practitionerRole.code;
      //non mappa i 2 precedenti
      participantRole  -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'PUT', e13.resource = create('Practitioner') as practitioner then {
        participantRole-> participant1.individual = create('Reference') as referencepart, referencepart.reference =  ('https://example/PractitionerRole/' + %practitionerRole.id)"par";
        participantRole->practitioner.meta as meta then {
          participantRole->meta.tag = create('Coding') as coding then {
            participantRole -> coding.system ='http://algoritmodiscoring'"system";
            participantRole -> coding.code ='ClinicalDocument/body/organizer/participant'"code";
          }"coding";
        }"meta";
        participantRole.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            participantRole-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2, e13.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"part";
          }"r";
        }"identifier";
        participantRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"2.16.840.1.113883.2.9.4.3.2";
        participantRole.code -> practitionerRole.code;
        participantRole.addr -> practitioner.address;
        participantRole.telecom -> practitioner.telecom;
        participantRole.playingEntity as playingEntity then {
          playingEntity.name -> practitioner.name;
          playingEntity.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
          }"birth";
        }"name";
      }"practitioner";
    }"partRole";
  }"participantEncounter";

  //participant device 
  org.participant as devParticipant where(typeCode='DEV') -> bundle.entry as e14, e14.request = create('BackboneElement') as request, request.method = 'POST', e14.resource = create('Device') as device,  device.id = uuid() as uuid14,  e14.fullUrl = append('https://example/Device/', uuid14), request.url='Device', observation.device = create('Reference') as reference,  reference.reference = ('https://example/Device/' + %device.id) then {
    devParticipant.participantRole as participantRoleDev then {
      participantRoleDev.playingDevice as playingDevice then {
        playingDevice.code -> device.type;
        playingDevice.manufacturerModelName as manufacturerModelName then{
          manufacturerModelName as m-> device.manufacturer = (m.displayName) "displayRule";
        }"manufacturer"; 
        playingDevice.softwareName as softwareName -> device.deviceName as deviceName then{
          softwareName -> deviceName.type = 'other' "typeName";		
          softwareName as s -> deviceName.name = (s.displayName) "name";
        }"deviceName";
      }"playingDevice";
    }"participantRoleDev";
  }"devParticipant";

  org.component as component then {
      component.observation as observation -> bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST', e.resource = create('Observation') as observationhasmember, 
          observationhasmember.id = uuid() as uuid2, e.fullUrl = append('https://example/Observation/', uuid2), request.url = 'Observation',
          observation.hasMember = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observationhasmember.id) then Observation(observation,patient,encounter,observationhasmember,bundle) "OBS";
  }"componentobservation";
      
  org.component as component then {
        component.organizer as organizer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as observationorganizer, 
          observationorganizer.id = uuid() as uuid3, e1.fullUrl = append('https://example/Observation/', uuid3), request.url = 'Observation',  observation.hasMember = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observationorganizer.id) then  {
          organizer then  Organizer(cda,organizer,patient,encounter,observationorganizer,bundle) "ORG";
        }"organizer";
  }"componentorganizer";

  //observationMedia  
  org.component as component then {
        component.observationMedia as obsMedia -> bundle.entry as e15, e15.request = create('BackboneElement') as request, request.method = 'POST', e15.resource = create('Media') as media1,  media1.id = uuid() as uuid15,  e15.fullUrl = append('https://example/Media/', uuid15), request.url='Media', observation.derivedFrom = create('Reference') as reference,  reference.reference = ('https://example/Media/' + %media1.id) then {
          obsMedia-> media1.content = create('Attachment') as Attachment then {
          obsMedia -> media1.status='unknown'"status";
          obsMedia.value as valueMedia then {
              valueMedia.mediaType as type -> Attachment.contentType=type "type";
              valueMedia -> Attachment.data=(valueMedia.dataBase64Binary) "data";
              }"valuemedia";
          } "Attachment";
         }"obsmedia";
  }"component";

  //note
  org.component as component then {
      component.act as act then {
        act.text as text then {
            text.reference as reference -> observation.note as note then {
            reference->note.text =(reference.value)"reference";
            }"note";
        }"text"; 
      }"componentact";
  }"component";

}

group ExtSubjectAnimal(source src: relatedSubject, target ext: Extension) {
  src -> ext.url = 'http://hl7.org/fhir/StructureDefinition/patient-animal' "url";
  src.code as code -> ext.extension as ext, ext.url='species' ,ext.value = create('CodeableConcept') as code1 then CECodeableConcept(code,code1) "code";  
}
",
          "subType": "00"
        }
      }
    }
  ],
  "definitions": [],
  "valuesets": [],
  "template_id_root": "2.16.840.1.113883.2.9.10.1.1",
  "last_update_date": {
    "$date": {
      "$numberLong": "1677573434520"
    }
  },
  "version": "2.0",
  "root_map": "RefertodilaboratorioFULLBODY",
  "deleted": false,
  "last_sync": {
    "$date": {
      "$numberLong": "1677573846774"
    }
  }
},{
  "_id": {
    "$oid": "63fdbd3c4afb2a4bc2c12be7"
  },
  "maps": [
    {
      "name_map": "LetteraDimissioneOspedaliera",
      "filename_map": "Lettera_Dimissione_Ospedaliera_v2.6.map",
      "content_map": {
        "$binary": {
          "base64": "map "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/LetteraDimissioneOspedaliera" = "LetteraDimissioneOspedaliera"

conceptmap "AllergyTypeMap" {

  prefix s = "http://terminology.hl7.org/ValueSet/v3-type"

  prefix t = "http://hl7.org/fhir/Allergy-type.html"

  s:OINT == t:intolerance
  s:ALG == t:allergy
  s:DALG == t:allergy
  s:EALG == t:allergy
  s:FALG == t:allergy
  s:NAINT == t:intolerance
  s:FNAINT == t:intolerance
  s:DNAINT == t:intolerance
  s:ENAINT == t:intolerance
  s:FINT == t:intolerance
  s:DINT == t:intolerance
  s:EINT == t:intolerance
}

conceptmap "AllergyCategoryMap" {

  prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
  prefix t = "http://hl7.org/fhir/Allergy-type.html"

  s:DALG == t:medication
  s:EALG == t:enviroment
  s:FALG == t:food
  s:FNAINT == t:food
  s:DNAINT == t:medication
  s:ENAINT == t:enviroment
  s:FINT == t:food
  s:DINT == t:medication
  s:EINT == t:enviroment
}

conceptmap "AllergyCriticality" {

  prefix s = "https://art-decor.org/art-decor/decor-valuesets--hl7it-?id=2.16.840.1.113883.2.9.77.22.11.6"
  prefix t = "https://www.hl7.org/fhir/codesystem-allergy-intolerance-criticality.html"
  
  s:L == t:low
  s:H == t:high
  s:M == t:unable_to_assess
}


uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL-PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target


imports "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes"
imports "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
  cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('https://example/Composition/', uuid1), request.url = 'Composition',  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Patient/', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3),request.url = 'Encounter',
  bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST',  e5.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid5,  e5.fullUrl = append('https://example/DocumentReference/', uuid5), request.url = 'DocumentReference' then {
  cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
   cda.recordTarget as recordTarget then{
    recordTarget.patientRole as patient then{
      patient.id as id -> patient.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext->identifier.value = ext;
        id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
      }"record";
      patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7')
      or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17') or (root='2.16.840.1.113883.2.9.4.3.15')  then {
        id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
        }"ext";
    }"recPat";
   }"patient";
 } "ClinicalDocumentToBody";
}

group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference : DocumentReference) {
  cda -> bundle.id = uuid() "id";
  cda.id -> bundle.identifier "identifier";
  cda -> bundle.type = 'transaction' "type";
  cda -> bundle.timestamp=(timestamp.now()) "date";
  cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";  
  cda.component as component then {
    component.structuredBody as body then {
      body.component as component  then {
       //discretizzi il primo livello di component 
	     component.section as srcSection then {
        srcSection.code where(code = '46241-6') -> composition.section as tgtSection  then ClinicalDocumentSectionMotivoRicovero(cda, srcSection, patient, tgtSection, bundle,encounter) "motivo ricovero";
        srcSection.code where(code = '47039-3') -> composition.section as tgtSection  then ClinicalDocumentSectionInquadramentoClinico(cda, srcSection, patient, tgtSection, bundle,encounter) "inquadramento clinico";
        srcSection.code where(code = '8648-8')  ->  composition.section as tgtSection  then ClinicalDocumentSectionDecorsoOspedaliero(cda, srcSection, patient, tgtSection, bundle,encounter) "Decorso Ospedaliero";
        srcSection.code where(code = '55109-3') -> composition.section as tgtSection  then ClinicalDocumentSectionComplicanze(cda, srcSection, patient, tgtSection, bundle,encounter) "Complicazioni";
        srcSection.code where(code = '11493-4') -> composition.section as tgtSection  then ClinicalDocumentSectionRiscontri(cda, srcSection, patient, tgtSection, bundle,encounter) "Hospital discharge studies summary";
        srcSection.code where(code = '34104-0') -> composition.section as tgtSection  then ClinicalDocumentSectionConsulenza(cda, srcSection, patient, tgtSection, bundle,encounter) "Hospital discharge studies summary";
        srcSection.code where(code = '30954-2') -> composition.section as tgtSection  then ClinicalDocumentSectionEsamiEseguitiRicovero(cda, srcSection, patient, tgtSection, bundle,encounter) "Esami_Eseguiti_Durante_il_Ricovero";
        srcSection.code where(code = '47519-4') -> composition.section as tgtSection  then ClinicalDocumentSectionProcedureEseguiteRicovero(cda, srcSection, patient, tgtSection, bundle,encounter) "History of Procedures Document";
        srcSection.code where(code = '48765-2') -> composition.section as tgtSection  then ClinicalDocumentSectionAllergie(cda, srcSection, patient, tgtSection, bundle,encounter) "Esami_Eseguiti_Durante_il_Ricovero";
        srcSection.code where(code = '10160-0') -> composition.section as tgtSection  then ClinicalDocumentSectionTerapiaFarmacologicaDuranteRicovero(cda, srcSection, patient, tgtSection, bundle,encounter) "Terapia Farmacologica alla dimissione";       
        srcSection.code where(code = '11535-2') -> composition.section as tgtSection  then ClinicalDocumentSectionDiagnosiDimissione(cda, srcSection, patient, tgtSection, bundle,encounter) "Diagnosi di Dimissione";
        srcSection.code where(code = '18776-5') -> composition.section as tgtSection  then ClinicalDocumentSectionIstruzioniFollowUp(cda, srcSection, patient, tgtSection, bundle,encounter) "Diagnosi di Dimissione";
        srcSection.code where(code = '10183-2') -> composition.section as tgtSection  then ClinicalDocumentSectionTerapiaDimissione(cda, srcSection, patient, tgtSection, bundle,encounter) "Terapia Farmacologica alla dimissione";
       };
      };
    } "body";
  };
}


// -------------------------------------------------------------------------------------------------------------------


group ClinicalDocumentSectionMotivoRicovero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src where src.entry.exists() then {
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";    
     } "cdaText";
   } "cText";
 src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
    entry1.observation as obs then Observation(obs, patient ,enc ,observation, bundle) "act";
   } "entry";

  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('Observation') as Observation,  Observation.id = uuid() as uuid8,  e8.fullUrl = append('https://example/Observation/', uuid8), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %Observation.id) then {
      src -> Observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      src -> Observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
        src.code -> Observation.code;
        src where observation.statusCode.exists().not() then {
          src->Observation.status ='final'"status";
        }"statuscode";
        cdaText -> Observation.note as note then{
          cdaText as t ->note.text =t "reference";
        }"reference";
      }"cdaText";
  }"where";
}

group ClinicalDocumentSectionInquadramentoClinico(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id), tgt.text as fhirText then {
    cdaText -> observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    cdaText -> observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
    src.code -> observation.code;
    src where observation.statusCode.exists().not() then {
      src->observation.status ='final'"status";
      }"statuscode";
    cdaText->observation.note as note then{
      cdaText as t ->note.text =t "reference";
    }"reference";
  } "cdaText";
  src.component as component then {
    component.section as section2 then{
      // ANAMNESI
      section2 -> tgt.section as sec2 then{
      section2.code where(code = '11329-0') ->  sec2.code;
        section2.title as t -> sec2.title = (t.dataString);
        //section2.code -> sec2.code;
        src where src.entry.exists() then{
          section2.text as cdaText -> sec2.text as fhirText then {
            cdaText -> fhirText.status = 'generated' "narrativeStatus";
            cdaText as t -> fhirText.div = t "narrativeText";          
          } "cdaText";  
        }"exist";

        src where src.entry.exists().not() then {
          section2.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as condition, condition.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', sec2.entry = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %condition.id) then {
              section2.code -> condition.code;
              src where condition.statusCode.exists().not() then {
                src->condition.status ='final'"status";
              }"statuscode";
              cdaText -> condition.note as note then{
                cdaText->condition.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";          
                cdaText->condition.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";       
                cdaText as t ->note.text =t "reference";
              }"reference";
          }"cdaText";
        }"where";

        section2.entry as entry1 then {
          entry1.observation as obs then {
            //EntryRelationship per il Problem
            obs.code where (code = '75326-9')  then {
            obs->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Condition') as condition, condition.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Condition/', uuid1), request.url = 'Condition', sec2.entry = create('Reference') as reference,  reference.reference = ('https://example/Condition/' + %condition.id) then{
            obs.code -> condition.category;
            obs->condition.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            obs->condition.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
            obs.statusCode as status where (code='completed') -> condition.verificationStatus as status2 then {
              status ->  status2.coding as status3 then{
                status -> status3.code ='confirmed' "finald";
                status -> status3.system='http://terminology.hl7.org/CodeSystem/condition-ver-status'"system";
              }"st3";
            }"status";
            obs.effectiveTime as effective1 then {
              effective1 where effective1.low.exists() or effective1.high.exists() then{
                effective1  -> condition.onset=create('Period') as periodonset then IVLTSPeriod(effective1,periodonset)"onsetperiod";
                }"ef";
              }"effectivetime1";
            
            obs.value:CD as val then{
              val->condition.code =create('CodeableConcept') as ce then {
                val.originalText -> ce.text;
                val -> ce.coding as coding then {
                val.code as code -> coding.code = cast(code, 'string');
                val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                val.displayName as display -> coding.display = cast(display, 'string');
                }"coding";  
              }"Ce"; 
            }"Value";
            obs.entryRelationship as entriRel  then{
              entriRel -> condition.evidence = create('BackboneElement') as evidence then{
              entriRel.observation as observation2 then {
                observation2.code as code then {
                code.code where (code.code = '89261-2') then { 
                  obs -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as observation, observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' then {
              
                   entriRel -> evidence.detail  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) "ref";
                  
                observation2.code -> observation.code;
                  observation2 where observation.statusCode.exists().not() then {
                    observation2->observation.status ='final'"status";
                    }"statuscode";            
                  observation2.text as text -> observation.note = create('Annotation') as note then{
                    text.reference as ref -> note.text = (ref.value) "val";
                  }"Annontation"; 
                  obs->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
                  obs->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";                            
                  observation2.statusCode as statusc where (code='completed') -> ob.status ='final';
                  observation2.statusCode as statusc where (code='active') -> ob.status ='registered';
                  observation2.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
                  observation2.statusCode as statusc where (code='suspended') -> ob.status ='partial';
                  observation2.value:INT as int->ob.value=(int.value) "value";
                  observation2.value:BL as boolean ->ob.value=(boolean.value)"boolean";
                  observation2.value:CD as val then{
                    val->ob.value =create('CodeableConcept') as ce then {
                      val.originalText as originalText then{
                        originalText.reference as reference-> ce.text=reference;
                      }"originltext";
                      val -> ce.coding as coding then {
                        val.code as code -> coding.code = cast(code, 'string');
                        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                        val.displayName as display -> coding.display = cast(display, 'string');
                        val.codeSystemVersion as version -> coding.version = cast(version, 'string');
                      }"code";
                      val.translation as translation -> ce.coding as coding then {
                        translation.code as code -> coding.code = cast(code, 'string');
                        translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                        translation.displayName as display -> coding.display = cast(display, 'string');
                        translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
                        translation.qualifier as qualifier then{
                          qualifier.value as value -> ce.coding as coding then {
                            value.code as code -> coding.code = cast(code, 'string');
                            value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                            value.displayName as display -> coding.display = cast(display, 'string');
                            value.codeSystemVersion as version -> coding.version = cast(version, 'string');
                          }"value";
                        }"qualifier";
                      }"translation";
                    }"coding";
                  }"val";
                  observation2.value:PQ as val then{
                    val->ob.value = create('Quantity') as quantity then {
                      val.value as value->quantity.value = value;
                      val.unit as unit-> quantity.unit = unit "unit";
                    }"quantity";
                  }"valueQuantity";
                  observation2.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";
                  observation2.value:CE as val then{
                    val->observation.value =create('CodeableConcept') as ce then {
                      val.originalText -> ce.text;
                      val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      }"coding";  
                    }"Ce"; 
                  }"Value"; 
                 }"obser";
                }"where Decorso Clinico";
                }"code";
                         
              }"Observation2";
            }"evidence";
         }"EntryRelationship1";
         obs.entryRelationship as entriRel  then{
          entriRel.observation as observation2 then {
            observation2.code as code then {
             code.code where (code.code ='33999-4') then{
               observation2 -> condition.clinicalStatus = create('CodeableConcept') as status then {
                observation2.text as text then{
                  text.reference as refstat -> status.text=(refstat.value)"statref";
                  }"textstat";
                 observation2  -> status.coding = create('Coding') as coding then{
                   observation2.value as value then{
                     value.code  where (value.code = 'LA16666-2')-> coding.code = 'active'"active";
                     value.code  where (value.code = 'LA18632-2')-> coding.code = 'inactive'"inactive";
                     value.codeSystem as system -> coding.system ='http://terminology.hl7.org/CodeSystem/condition-clinical'"system";
                     value.displayName as display -> coding.display = cast(display, 'string');
                     }"value1";
                 }"coding";
               }"code";                       
             }"where Decorso Clinico"; 
            }"codestatus";  
           }"observationstatus"; 
          }"entryrelationshipstatus";           
          }"where entry patologica prossima";
        } "observationcondition";
        }"entry 1";
    }"subsection1";
 
  // ESAME PBIETTIVO
  section2.code where(code = '29545-1') then ClinicalDocumentSottoSectionOBS(section2, sec2, bundle,enc,patient) "esame obiettivo";
      // TETAPIA FARMACOLOGICA
   section2.code where(code = '42346-7') then ClinicalDocumentSottoSectionMS(section2, sec2, bundle,patient,enc) "Terapia Farmacologica all'ingresso";
    }"sec2fhir";
  }"componentSec";
 };
}


group ClinicalDocumentSectionDecorsoOspedaliero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id), tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";          
    src.code -> observation.code;
    src where observation.statusCode.exists().not() then {
      src->observation.status ='final'"status";
      }"statuscode";
      src->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      src->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";                            
      cdaText->observation.note as note then{
      cdaText as t ->note.text =t "reference";
    }"reference";
  } "cdaText";
  src.component as component then {
    component.section as section2 then{
      src then  ClinicalDocumentSottoSectionOBS (section2, tgt, bundle,enc,patient) "Decorso";
    }"1";
  }"2";
  
}

group ClinicalDocumentSectionComplicanze(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src where src.entry.exists() then{
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";  
  }"exist";

  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
      src -> observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      src -> observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
          src.code -> observation.code;
          src where observation.statusCode.exists().not() then {
              src->observation.status ='final'"status";
              }"statuscode";
            cdaText -> observation.note as note then{
            cdaText as t ->note.text =t "reference";
          }"reference";
        }"cdaText";
      }"where";

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
    entry1.observation as obs then Observation(obs, patient ,enc ,observation, bundle) "act";
  }"entry";

  //src then  ClinicalDocumentSottoSectionOBS(src, tgt, bundle,enc) "Decorso";

}

group ClinicalDocumentSectionRiscontri(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id), tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";          
    src.code -> observation.code;
    src where observation.statusCode.exists().not() then {
      src->observation.status ='final'"status";
      }"statuscode";
      src->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      src->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
      cdaText->observation.note as note then {
      cdaText as t ->note.text =t "reference";
    }"reference";
  } "cdaText";
  src.component as component then {
    component.section as section2 then{
      src then  ClinicalDocumentSottoSectionOBS(section2, tgt, bundle,enc,patient) "Decorso";
    }"1";
  }"2";
}

group ClinicalDocumentSectionConsulenza(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src where src.entry.exists() then{
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";  
  }"exist";

  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
      src -> observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      src -> observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
          src.code -> observation.code;
          src where observation.statusCode.exists().not() then {
              src->observation.status ='final'"status";
              }"statuscode";
            cdaText -> observation.note as note then{
            cdaText as t ->note.text =t "reference";
          }"reference";
        }"cdaText";
      }"where";

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
    entry1.observation as obs then ObservationConsulenza(obs, patient ,enc ,observation, bundle) "act";
  }"entry";

}

group ClinicalDocumentSectionEsamiEseguitiRicovero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src where src.entry.exists() then{
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";  
  }"exists";

  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
      src -> observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      src -> observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
          src.code -> observation.code;
          src where observation.statusCode.exists().not() then {
              src->observation.status ='final'"status";
              }"statuscode";
            cdaText -> observation.note as note then{
            cdaText as t ->note.text =t "reference";
          }"reference";
        }"cdaText";
      }"where";

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
    entry1.observation as obs then ObservationEsamiDuranteRicovero(obs, patient ,enc ,observation, bundle) "act";
  }"entry";

}

group ClinicalDocumentSectionProcedureEseguiteRicovero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src where src.entry.exists() then{
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";  
  }"exists";
 
  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Procedure') as procedure,  procedure.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Procedure/', uuid1), request.url = 'Procedure', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure.id) then {
      src -> procedure.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      src -> procedure.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";        
      src->procedure.status ='unknown'"statuscode";
      cdaText -> procedure.note as note then{
        cdaText as t ->note.text =t "reference";
      }"reference";
    }"cdaText";
  }"where";  

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Procedure') as procedure,  procedure.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Procedure/', uuid1), request.url = 'Procedure', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure.id) then {
    src -> procedure.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    src -> procedure.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
    entry1.procedure as proceduresrc then{
      proceduresrc.code -> procedure.code;
      proceduresrc.text as txt -> procedure.note as note then {
        txt.reference as ref -> note.text = (ref.value);
      }"text";
      
      proceduresrc where proc.statusCode .exists().not() then {
      proceduresrc->procedure.status ='unknown'"statuscode";
      }"status";
      proceduresrc.statusCode as statusc where (code='completed') -> procedure.status ='completed';
      proceduresrc.statusCode as statusc where (code='active') -> procedure.status ='in-progress';
      proceduresrc.statusCode as statusc where (code='aborted') -> procedure.status ='stopped';
      proceduresrc.statusCode as statusc where (code='suspended') -> procedure.status ='on-hold';
      proceduresrc.statusCode as statusc where (code='cancelled') -> procedure.status ='not-done';
      proceduresrc.statusCode as statusc where (code='held') -> procedure.status ='on-hold';
      proceduresrc.statusCode as statusc where (code='new') -> procedure.status ='preparation';
      proceduresrc.statusCode as statusc where (code='obsolete') -> procedure.status ='entered-in-error';
      proceduresrc.statusCode as statusc where (code='nullified') -> procedure.status ='unknown';
      proceduresrc.effectiveTime as efft -> procedure.performed = create('Period') as period then IVLTSPeriod(efft,period);
      proceduresrc.entryRelationship as entriRel ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', procedure.reasonReference  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then{
        entriRel->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
        entriRel->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
        entriRel.observation as obs then{
          obs.code -> observation.code;
          obs where observation.statusCode.exists().not() then {
            obs->observation.status ='final'"status";
            }"statuscode";           
        }"Observation value";
      }"Observation"; 
    }"Procedure";
  }"Entry";
}

group ClinicalDocumentSectionAllergie(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  
  src where src.entry.exists() then{
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";  
  }"exists";

  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('AllergyIntolerance') as allergy,  allergy.id = uuid() as uuid1,  e1.fullUrl = append('https://example/AllergyIntolerance/', uuid1), request.url = 'AllergyIntolerance', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/AllergyIntolerance/' + %allergy.id) then {
      src -> allergy.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      src -> allergy.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
      src -> allergy.clinicalStatus = create('CodeableConcept') as status then {
        src -> status.text = 'string' "text";
        src -> status.coding = create('Coding') as coding then{
          src -> coding.code = 'active'"active";
          src -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical'"system";
        }"coding";
      }"allergy";
        src.code -> allergy.code;
        cdaText -> allergy.note as note then{
          cdaText as t ->note.text =t "reference";
        }"reference";
    }"cdaText";
  }"where";  


  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('AllergyIntolerance') as allergy,  allergy.id = uuid() as uuid1,  e1.fullUrl = append('https://example/AllergyIntolerance/', uuid1), request.url = 'AllergyIntolerance', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/AllergyIntolerance/' + %allergy.id) then {
    src -> allergy.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    src -> allergy.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
    entry1.act as actallint then {
  actallint.effectiveTime as eff -> allergy.onset = create('Period') as per then IVLTSPeriod(eff,per);
  actallint.entryRelationship as entryact then {
    entryact.observation as entryobs then {
      entryobs.value as code then{
        code.code as code1-> allergy.type = translate(code1,'#AllergyTypeMap','code') "type";
        code.code as code2 -> allergy.category = translate(code2,'#AllergyCategoryMap','code') "category";  
      }"code";
    
      entryobs.participant as partic then {
        partic.participantRole as pratRole then {
           pratRole.playingEntity as pratent then {
               pratent -> allergy.reaction = create('BackboneElement') as reaction then{
               pratent.code -> reaction.substance "subs";
           entryobs.entryRelationship as entryobs1 where (typeCode='MFST') then {
           entryobs1.observation as entobs then {
             entobs.effectiveTime as eff  then{
            eff.low as l -> reaction.onset = create('dateTime') as start then TSDateTime(l,start) "val";
            }"eff";
            entobs.value->reaction.manifestation "manifest";
                     }"observ";
                   }"entry";
               }"cod";  
          }"react";
        }"pratentit";
       }"PratRole";

       entryobs.entryRelationship as entryobs2 then {
        entryobs2.observation as entobs then {
          entobs.code as code where (code='SEV') then {
          entobs.value as value then{
             value.code where(value.code = 'M') ->allergy.criticality = 'unable-to-assess'"active";
             value.code where(value.code = 'L') ->allergy.criticality = 'low'"active"; 
             value.code where(value.code = 'H') ->allergy.criticality = 'high'"active"; 
              }"entobs";
             } "sev";
            }"severity";
          }"observ";
       

       entryobs.entryRelationship as entryobs3 then {
        entryobs3.observation as entobs then {
          entobs.code as code where (code='33999-4') then {
           entobs -> allergy.clinicalStatus = create('CodeableConcept') as status then {
           entobs  -> status.coding = create('Coding') as coding then{
            entobs.value as value then{
                value.code  where (value.code = 'LA16666-2')-> coding.code = 'active'"active";
                value.code  where (value.code = 'LA18632-2')-> coding.code = 'inactive'"active";
                value.codeSystem as system -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical'"system";
                value.displayName as display -> coding.display = cast(display, 'string');
                 }"value1";
               }"coding";
             }"clinicalStatus";
            }"stat";
          }"obobs3serv";
       }"entry3";

        entryobs.entryRelationship as entryobs4 then {
         entryobs4.act as entact then {
          entact.text as actext then {
              actext.reference as reftxt -> allergy.note = create('BackboneElement') as note  then {
              reftxt as ref->note.text= (ref.value) "notxt";
                }"notetxt";
              }"txtact";
          }"obobs4serv";
       }"entry4";

         }"partic";
        };
       };
      }"allergy";
}

group ClinicalDocumentSectionDiagnosiDimissione(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src where src.entry.exists() then{
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";  
  }"exists";

  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
      src -> observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      src -> observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
          src.code -> observation.code;
          src where observation.statusCode.exists().not() then {
              src->observation.status ='final'"status";
              }"statuscode";
            cdaText -> observation.note as note then{
            cdaText as t ->note.text =t "reference";
          }"reference";
        }"cdaText";
      }"where";

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
    entry1.observation as obs then Observation(obs, patient ,enc ,observation, bundle) "act";
  }"entry";
}

group ClinicalDocumentSectionIstruzioniFollowUp(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";
  src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('CarePlan') as carePlan,  carePlan.id = uuid() as uuid1,  e1.fullUrl = append('https://example/CarePlan/', uuid1), request.url = 'CarePlan', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/CarePlan/' + %carePlan.id) then {
    cdaText-> carePlan.note as note then{
      cdaText as t ->note.text =t "reference";
    }"reference";
    src-> carePlan.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
    src-> carePlan.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
    src -> carePlan.status='active'"status";
    src -> carePlan.intent='order'"intent";
  }"entry";
}

group ClinicalDocumentSectionTerapiaFarmacologicaDuranteRicovero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src where src.entry.exists() then{
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";  
  }"exists";

  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationAdministration') as medicationAdm,  medicationAdm.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationAdministration/', uuid1), request.url = 'MedicationAdministration', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationAdministration/' + %medicationAdm.id) then {
      cdaText->medicationAdm.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
      cdaText->medicationAdm.context=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
      cdaText->medicationAdm.medication = create('CodeableConcept') as codecon then{
        cdaText -> codecon.text = 'string' "text";
      }"code";
      src ->medicationAdm.effective = create('Period') as period then{
        src->period.start=(start.now())"low";
        src->period.end=(end.now())"high";
        }"Period";
        src where sub.statusCode.exists().not() then {
          src->medicationAdm.status ='completed'"status";
        }"statuscode";
        cdaText -> medicationAdm.note as note then{
        cdaText as t ->note.text =t "reference";
      }"reference";
    }"cdaText";
  }"where";  

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationAdministration') as medicationAdm,  medicationAdm.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationAdministration/', uuid1), request.url = 'MedicationAdministration', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationAdministration/' + %medicationAdm.id) then {
    entry1->medicationAdm.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
    entry1->medicationAdm.context=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
         entry1.substanceAdministration as sa then{
                sa.text as tx -> medicationAdm.note as note then{
                  sa.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner then{
                    performer.time as ti -> note.time = (ti.value);
                    performer.assignedEntity as assEnty then{
                      assEnty->practitioner.meta as meta then {
                        assEnty->meta.tag = create('Coding') as coding then {
                          assEnty -> coding.system ='http://algoritmodiscoring'"system";
                          assEnty -> coding.code ='ClinicalDocument/body/TerapiaFarmacologicaRicovero/performer'"code";
                        }"coding";
                      }"meta";
              
                      assEnty.id as id -> practitioner.identifier as identifier then {
                        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                        id.extension as ext->identifier.value = ext; 
                        id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                        id.root as r then {
                          id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = 'Practitioner', medicationAdm.performer as perf,  perf.actor  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"aut";
                        }"r";
                    }"identifier";
                    assEnty.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"2.16.840.1.113883.2.9.4.3.2";
                    assEnty.assignedPerson as assi then {
                        assi.name -> practitioner.name;
                      }"assi";
                    }"assEntity";
                  }"perf";
              tx.reference as ref -> note.text = (ref.value);
            }"tx"; 
      sa.statusCode as st -> medicationAdm.status = (st.code);
      sa.effectiveTime as eff -> medicationAdm.effective = create('Period') as period then IVLTSPeriod(eff,period) "period";
      
      sa ->  medicationAdm.dosage as dos then {
        sa.routeCode -> dos.route;        
      }"dos";
      sa ->  medicationAdm.dosage as dos then {
        sa.approachSiteCode -> dos.site;        
      }"dos";
      

      sa.doseQuantity as doseQuant ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationRequest') as medicationRq,  medicationRq.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationRequest/', uuid1), request.url = 'MedicationRequest', medicationAdm.request  = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medicationRq.id) then{
        doseQuant -> medicationRq.dosageInstruction = create('Dosage') as dosageInstruction then{
          doseQuant.originalText as ot then{
            ot.reference -> dosageInstruction.text;
          }"ot";
          doseQuant -> dosageInstruction.doseAndRate as dosageRate then{
            doseQuant -> dosageRate.dose = create('Range') as d then{
              doseQuant -> d.low = create('SimpleQuantity') as l then{
                doseQuant.low as lo -> l.value = (lo.value); 
                doseQuant.low as lo -> l.unit = (lo.unit); 
              }"low";
              doseQuant -> d.high = create('SimpleQuantity') as h then{
                doseQuant.high as hi -> h.value = (hi.value);
                doseQuant.high as hi -> h.unit = (hi.unit); 
              }"low";
            }"d";
          }"dosageRate";
        }"Dosage";
        sa-> medicationRq.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
        sa-> medicationRq.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
        sa -> medicationRq.status='active'"status";
        sa -> medicationRq.intent='order'"intent";
        sa.rateQuantity as rateQuantity -> medicationRq.dosageInstruction = create('Dosage') as dosageInstruction1 then{
          rateQuantity.originalText as ot then{
            ot.reference -> dosageInstruction1.text;
          }"ot";
          rateQuantity -> dosageInstruction1.doseAndRate as dosageRate then{
            rateQuantity -> dosageRate.rate = create('Range') as d then{
              rateQuantity -> d.low = create('SimpleQuantity') as l then{
                rateQuantity.low as lo -> l.value = (lo.value); 
                rateQuantity.low as lo -> l.unit = (lo.unit); 
              }"low";
              rateQuantity -> d.high = create('SimpleQuantity') as h then{
                rateQuantity.high as hi -> h.value = (hi.value);
                rateQuantity.high as hi -> h.unit = (hi.unit); 
              }"low";
            }"d";
          }"dosageRate";
        }"Dosage";

       
        sa -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Medication/', uuid1), request.url = 'Medication', medicationAdm.medication  = create('Reference') as reference,  reference.reference = ('https://example/Medication/' + %medication.id) then{
        sa-> medicationRq.medication=create('Reference') as reference,  reference.reference = ('https://example/Medication/' + %medication.id) "reference";
          sa.administrationUnitCode -> medication.form;
          sa.consumable as consumable then {
            consumable.manufacturedProduct as manufac then{
                manufac.manufacturedMaterial as manuprod then{
                  manuprod.code -> medication.code;
             
          }"manufactproduct"; 
        }"manufac";
      }"consumable";

          sa.entryRelationship as entryRR then{
            entryRR.observation as observation then{
                  observation.code where displayName='Grammatura' -> medication.ingredient as ingredient then{
                    sa.consumable as consumable then{
                            consumable.manufacturedProduct as manufacturedProduct then{
                                manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                                    manufacturedMaterial.code as code -> ingredient.item = create('CodeableConcept') as value then CECodeableConcept(code,value) "CE";
                                }"material";
                            }"product";
                        }"consumable";
                        observation.value as value -> ingredient.strength as strength then{
                            value -> strength.numerator as numerator then{
                                value -> numerator.value = (value.value) "valueN";
                            } "numerator";
                            value -> strength.denominator as denominator then{
                                value -> denominator.value = 1 "valueD";
                            } "denominator";
                      }"strenght";
                    }"ingredient";
                    observation.code where displayName='Quantità nella Confezione' then{
                        observation.value as value -> medication.amount as amount then{
                            value -> amount.numerator  as numerator then{
                                value -> numerator.value = (value.value) "valueN";
                            } "numerator";
                            value -> amount.denominator as denominator then{
                                value -> denominator.value = 1 "valueD";
                            } "denominator";
                        }"amount";
                  }"quantità";
              }"obs";
          }"entry Rr";

        }"medication";
          sa.entryRelationship as entryRelationship then{
                        
            entryRelationship.supply as sup -> medicationRq.dispenseRequest as dispreq then {              
              sup -> dispreq.quantity = create('SimpleQuantity') as quantity then{
                sup.quantity as q -> quantity.value = (q.value);
              }"quantity";              
            }"sub";           
          }"entry R";
      
      sa.participant as participant then {
        participant.time as t -> medicationRq.authoredOn = (t.value);     
        participant.participantRole as participantR -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner  then{
          participantR->practitioner.meta as meta then {
            participantR->meta.tag = create('Coding') as coding then {
              participantR -> coding.system ='http://algoritmodiscoring'"system";
              participantR -> coding.code ='ClinicalDocument/body/TerapiaFarmacologicaRicovero/participant'"code";
                  }"coding";
                }"meta";
                participantR.id as id -> practitioner.identifier as identifier then {
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext; 
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                  id.root as r then {
                  id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid1) ,medicationRq.requester  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"aut";
                  }"r";
              }"identifier";
              participantR.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
              participantR.playingEntity as assi then {
                  assi.name -> practitioner.name;
                }"assi";
            }"perf";
       
        sa.effectiveTime: EIVL as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
          eff -> dosage.timing = create('Timing') as timing then {
            eff -> timing.repeat as rep then {
              eff.event as ev -> rep.where = (ev.code);
            }"rep";
          }"timing";
        }"period";
  
        sa.effectiveTime: TS as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage, dosage.timing = create('Timing') as timing, timing.event = (eff.value) "tim";
  
          
        sa.effectiveTime: PIVL_TS as eff -> medicationAdm.dosage = create('BackboneElement') as dosage then{
          eff -> dosage.rate = create('Ratio') as ratio then{
            eff -> ratio.numerator = create('Quantity') as quan then{
              eff.period as per ->  quan.value = (per.value);
              eff.period as per ->  quan.unit = (per.unit);
            }"quanti";
            eff -> ratio.denominator = create('Quantity') as quan then{
              eff.period ->  quan.value = '1';
              eff.period as per ->  quan.unit = (per.unit);
            }"quanti";
          }"ratio";
        }"eff";     

      }"Medicationrequest";
    }"sa";

  }"entry";
}"sa";

}




group ClinicalDocumentSottoSectionOBS(source src : Section,  target tgt, target bundle : Bundle, target enc : Encounter , target patient : Patient){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id), tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
   
    src.code -> observation.code;
    src->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    src->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
    src where observation.statusCode.exists().not() then {
      src->observation.status ='final'"status";
      }"statuscode";
    cdaText->observation.note as note then{
      cdaText as t ->note.text =t "reference";      
    }"reference";
  } "cdaText";
}

group ClinicalDocumentSottoSectionMS(source src : Section,  target tgt, target bundle : Bundle, target patient : Patient,target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('MedicationStatement') as Medicationstatement,  Medicationstatement.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationStatement/', uuid1), request.url = 'MedicationStatement', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationStatement/' + %Medicationstatement.id), tgt.text as fhirText then {
    cdaText->Medicationstatement.note as note then{
      cdaText as t ->note.text =t "reference";
      cdaText as t-> Medicationstatement.medication= create('CodeableConcept') as medication, medication.text=t"text";
    }"reference";
    
    src->Medicationstatement.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    

     src->Medicationstatement.status ='unknown'"status";
    
  } "cdaText";
}


group Observation (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {

  obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";  
  obs.code -> ob.code;
  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs where obs.statusCode.exists().not() then {
  obs->ob.status ='final'"status";
  }"statuscode";
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";

  obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
  obs.effectiveTime as eff -> ob.effective = create('Period') as period then IVLTSPeriod(eff,period) "value3";
  }"where";

  obs.value:INT as int->ob.value=(int.value) "value";
  obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";
  obs.value:CD as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        };
      } "translation";
    }"coding";
  }"val";
  obs.value:CE as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        };
      } "translation";
    }"coding";
  }"val";

  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
    val.value as value->quantity.value = value;
    val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";

  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";
  obs.interpretationCode -> ob.interpretation;
    obs.methodCode -> ob.method;
    obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
      refRange.observationRange as obsRange -> ref.low = create('SimpleQuantity') as Low  then {
          obsRange.value: IVL_PQ as v  then {
            v.low as l1 then {
              l1.value as decValue-> Low.value = decValue;
              l1.unit as Unit-> Low.unit = Unit;
            }"decValue";          
          }"IVL_PQ";                      
      }"obsRange";              
    }"refRange";  
}


group ObservationConsulenza (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {
    
  obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";  
  obs.code -> ob.code;
  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs where obs.statusCode.exists().not() then {
    obs->ob.status ='final'"status";
    }"statuscode";
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2c";
  obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
  obs.effectiveTime as eff -> ob.effective = create('Period') as period then IVLTSPeriod(eff,period) "value3c";
   }"where";
  obs.value:INT as int->ob.value=(int.value) "value";
  obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";
  obs.value:CE as val then{
    val->ob.value =create('CodeableConcept') as ce then {
      val.originalText as originalText then{
        originalText.reference as reference-> ce.text=reference;
      }"originltext";
      val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        val.codeSystemVersion as version -> coding.version = cast(version, 'string');
      }"code";
      val.translation as translation -> ce.coding as coding then {
        translation.code as code -> coding.code = cast(code, 'string');
        translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        translation.displayName as display -> coding.display = cast(display, 'string');
        translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
        translation.qualifier as qualifier then{
          qualifier.value as value -> ce.coding as coding then {
            value.code as code -> coding.code = cast(code, 'string');
            value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
            value.displayName as display -> coding.display = cast(display, 'string');
            value.codeSystemVersion as version -> coding.version = cast(version, 'string');
          }"value";
        }"qualifier";
      }"translation";
    }"coding";
  }"val";
  obs.value:CD as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        };
      } "translation";
    }"coding";
  }"val";

  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
    val.value as value->quantity.value = value;
    val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";

  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";

    obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
    obs.interpretationCode -> ob.interpretation;
    obs.methodCode -> ob.method;
    obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
      refRange.observationRange as obsRange -> ref.low = create('SimpleQuantity') as Low  then {
          obsRange.value: IVL_PQ as v  then {
            v.low as l1 then {
              l1.value as decValue-> Low.value = decValue;
              l1.unit as Unit-> Low.unit = Unit;
            }"decValue";          
          }"IVL_PQ";                      
      }"obsRange";              
    }"refRange";  


    obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1 then{
      performer.assignedEntity as assEntity then {

        assEntity->practitioner.meta as meta then {
          assEntity->meta.tag = create('Coding') as coding then {
            assEntity -> coding.system ='http://algoritmodiscoring'"system";
            assEntity -> coding.code ='ClinicalDocument/body/Consulenza/performer'"code";
          }"coding";
        }"meta";

        assEntity.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext; 
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), ob.performer  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"aut";
          }"r";
      }"identifier";
      assEntity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
        id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
      }"2.16.840.1.113883.2.9.4.3.2";
        assEntity.assignedPerson as assi then {
          assi.name -> practitioner.name;
        }"assi";
      }"assEntity";
    }"perf";

    obs.participant as participant -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('ServiceRequest') as serviceRequest,  serviceRequest.id = uuid() as uuid1,  e1.fullUrl = append('https://example/ServiceRequest/', uuid1), request.url = 'ServiceRequest', ob.basedOn  = create('Reference') as reference,  reference.reference = ('https://example/ServiceRequest/' + %serviceRequest.id) then{
      participant.time as t -> serviceRequest.authoredOn = (t.value);
      obs->serviceRequest.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
      obs->serviceRequest.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
      obs -> serviceRequest.status='active'"status";
      obs -> serviceRequest.intent='order'"intent";
      participant.participantRole as participantRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner then{
        participantRole->practitioner.meta as meta then {
          participantRole->meta.tag = create('Coding') as coding then {
            participantRole -> coding.system ='http://algoritmodiscoring'"system";
            participantRole -> coding.code ='ClinicalDocument/body/Consulenza/participant'"code";
          }"coding";
        }"meta";

        participantRole.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext; 
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid3,  e1.fullUrl = append('https://example/Practitioner/', uuid3), serviceRequest.performer  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"aut";
          }"r";
      }"identifier";
      participantRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
        id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
      }"2.16.840.1.113883.2.9.4.3.2";
        participantRole.playingEntity as pe then{
          pe.name -> practitioner.name;
        }"pe";
      }"participantRole";
    }"participant";
}

group ObservationEsamiDuranteRicovero (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {
    
  obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";  
  obs.code -> ob.code;
  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs where obs.statusCode.exists().not() then {
    obs->ob.status ='final'"status";
    }"statuscode";
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2r";
  obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
  obs.effectiveTime as eff -> ob.effective = create('Period') as period then IVLTSPeriod(eff,period) "value3r";
  }"where";
  obs.value:INT as int->ob.value=(int.value) "value";
  obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";
  obs.value:CE as val then{
    val->ob.value =create('CodeableConcept') as ce then {
      val.originalText as originalText then{
        originalText.reference as reference-> ce.text=reference;
      }"originltext";
      val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        val.codeSystemVersion as version -> coding.version = cast(version, 'string');
      }"code";
      val.translation as translation -> ce.coding as coding then {
        translation.code as code -> coding.code = cast(code, 'string');
        translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        translation.displayName as display -> coding.display = cast(display, 'string');
        translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
        translation.qualifier as qualifier then{
          qualifier.value as value -> ce.coding as coding then {
            value.code as code -> coding.code = cast(code, 'string');
            value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
            value.displayName as display -> coding.display = cast(display, 'string');
            value.codeSystemVersion as version -> coding.version = cast(version, 'string');
          }"value";
        }"qualifier";
      }"translation";
    }"coding";
  }"val";
  obs.value:CD as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        };
      } "translation";
    }"coding";
  }"val";

  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
    val.value as value->quantity.value = value;
    val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";

  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";

    obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
    obs.interpretationCode -> ob.interpretation;
    obs.methodCode -> ob.method;
    obs.effectiveTime as eff -> ob.effective = create('Period') as per then IVLTSPeriod(eff,per);
    obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
      refRange.observationRange as obsRange -> ref.low = create('SimpleQuantity') as Low  then {
          obsRange.value: IVL_PQ as v  then {
            v.low as l1 then {
              l1.value as decValue-> Low.value = decValue;
              l1.unit as Unit-> Low.unit = Unit;
            }"decValue";          
          }"IVL_PQ";                      
      }"obsRange";              
    }"refRange";  

    obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1 then{
      performer.assignedEntity as assEntity then {

        assEntity->practitioner.meta as meta then {
          assEntity->meta.tag = create('Coding') as coding then {
            assEntity -> coding.system ='http://algoritmodiscoring'"system";
            assEntity -> coding.code ='ClinicalDocument/body/EsamiDuranteRicovero/performer'"code";
          }"coding";
        }"meta";

        assEntity.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext; 
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), ob.performer  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"aut";
          }"r";
      }"identifier";
      assEntity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
        id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
      }"2.16.840.1.113883.2.9.4.3.2";
        assEntity.assignedPerson as assi then {
          assi.name -> practitioner.name;
        }"assi";
      }"assEntity";
    }"perf";
    
    obs.participant as participant -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('ServiceRequest') as serviceRequest,  serviceRequest.id = uuid() as uuid1,  e1.fullUrl = append('https://example/ServiceRequest/', uuid1), request.url = 'ServiceRequest', ob.basedOn  = create('Reference') as reference,  reference.reference = ('https://example/ServiceRequest/' + %serviceRequest.id) then{
      participant.time as t -> serviceRequest.authoredOn = (t.value);
      obs->serviceRequest.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
      obs->serviceRequest.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
      obs -> serviceRequest.status='active'"status";
      obs -> serviceRequest.intent='order'"intent";

      participant.participantRole as participantRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner then{
        participantRole->practitioner.meta as meta then {
          participantRole->meta.tag = create('Coding') as coding then {
            participantRole -> coding.system ='http://algoritmodiscoring'"system";
            participantRole -> coding.code ='ClinicalDocument/body/EsamiDuranteRicovero/participant'"code";
          }"coding";
        }"meta";

        participantRole.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext; 
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid3,  e1.fullUrl = append('https://example/Practitioner/', uuid3), serviceRequest.performer  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"aut";
          }"r";
      }"identifier";
      participantRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
        id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
      }"2.16.840.1.113883.2.9.4.3.2";
        participantRole.playingEntity as pe then{
          pe.name -> practitioner.name;
        }"pe";
      }"participantRole";
   }"participant";
}

group periodTiming(source effectiveTime: PIVL_TS, target timing: Timing){
  effectiveTime -> timing.repeat as r then{
    effectiveTime.period as p -> r.period = (p.value); 
    effectiveTime.period as p -> r.periodUnit = (p.unit);   
  }"repeat";
}

//---------------------------------------------------------------------------------------

group Act (source cda: Act, target pat : Patient, target ac : DiagnosticReport, target enc : Encounter, target bundle : Bundle){
  cda.code -> ac.code;
  cda.statusCode as statusc where (code='completed') -> ob.status ='final';
  cda.statusCode as statusc where (code='active') -> ob.status ='registered';
  cda.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  cda.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  cda.effectiveTime as effectiveTime -> ac.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2a";
  obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
  cda.effectiveTime as eff -> ac.effective = create('Period') as period then IVLTSPeriod(eff,period) "value3a";
   }"where";
  cda -> ac.subject=create('Reference') as reference,  reference.reference = ('https://example/' + %pat.id) "reference";
  cda -> ac.encounter=create('Reference') as reference,  reference.reference = ('https://example/' + %enc.id) "reference";
  cda.participant  as part->  enc.participant as participant then{
     part  -> participant.type as type then { 
          part -> type.coding as coding then{
            part-> coding.code = (part.typeCode) "codice";
            part-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
          } "codeType"; 
        }"type";
    part.participantRole as participantRole ->  participant.individual = create('Reference') as reference then {
      participantRole ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'PUT', e.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e.fullUrl = append('https://example/Practitioner/', uuid1),  reference.reference = ('https://example/Practitioner/' + %practitioner.id) then { 

      participantRole->practitioner.meta as meta then {
        participantRole->meta.tag = create('Coding') as coding then {
          participantRole -> coding.system ='http://algoritmodiscoring'"system";
          participantRole -> coding.code ='ClinicalDocument/body/Act/participant'"code";
        }"coding";
      }"meta";


      participantRole.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
            participantRole-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
        }"identifier";
        participantRole.playingEntity  as playingEntity then{
          playingEntity.name -> practitioner.name;
        }"playingEntity";
         }"participanRoleBund";  
    }"participantRole";
  }"participant";
  cda.entryRelationship as entryRelationship then {
    entryRelationship.observation as observation ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST', e.resource = create('Observation') as obs,  obs.id = uuid() as uuid2,  e.fullUrl = append('https://example/Observation/', uuid2), request.url = append('Observation/', uuid2), ac.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs.id) then Observation(observation,pat,enc,obs,bundle) "OBS";
  }"entryRelationship";
}

group ClinicalDocumentSectionTerapiaDimissione (source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src where src.entry.exists() then {
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";  
  }"exist";

  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationRequest') as medicationRq,  medicationRq.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationRequest/', uuid1), request.url = 'MedicationRequest', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medicationRq.id) then {
      src-> medicationRq.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
      src-> medicationRq.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
      src -> medicationRq.status='active'"status";
      src -> medicationRq.intent='order'"intent";
      cdaText->medicationRq.medication = create('CodeableConcept') as codecon then{
        cdaText -> codecon.text = 'string' "text";
      }"code";
      cdaText -> medicationRq.note as note then{
        cdaText as t ->note.text =t "reference";
      }"reference";
    }"cdaText";
  }"where";

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationRequest') as medicationRq,  medicationRq.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationRequest/', uuid1), request.url = 'MedicationRequest', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medicationRq.id) then {
        src-> medicationRq.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
        src-> medicationRq.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
        src -> medicationRq.status='active'"status";
        src -> medicationRq.intent='order'"intent";
        entry1.substanceAdministration as substract then{      
          substract.consumable as cons then{
            cons.manufacturedProduct as man1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Medication/', uuid1), request.url = 'Medication', medicationRq.medication = create('Reference') as medref,  medref.reference = ('https://example/Medication/' + %medication.id) then {
              man1.manufacturedMaterial as mm then{
                mm.code -> medication.code;
              }"mm";
              substract.administrationUnitCode -> medication.form;

              substract.entryRelationship as entryR then{
                entryR.observation as observation then{
                       observation.code where displayName='Grammatura' -> medication.ingredient as ingredient then{
                        substract.consumable as consumable then{
                                consumable.manufacturedProduct as manufacturedProduct then{
                                    manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                                        manufacturedMaterial.code as code -> ingredient.item = create('CodeableConcept') as value then CECodeableConcept(code,value) "CE";
                                    }"material";
                                }"product";
                            }"consumable";
                            observation.value as value -> ingredient.strength as strength then{
                                value -> strength.numerator as numerator then{
                                    value -> numerator.value = (value.value) "valueN";
                                } "numerator";
                                value -> strength.denominator as denominator then{
                                    value -> denominator.value = 1 "valueD";
                                } "denominator";
                           }"strenght";
                        }"ingredient";
                        observation.code where displayName='Quantità nella Confezione' then{
                            observation.value as value -> medication.amount as amount then{
                                value -> amount.numerator  as numerator then{
                                    value -> numerator.value = (value.value) "valueN";
                                } "numerator";
                                value -> amount.denominator as denominator then{
                                    value -> denominator.value = 1 "valueD";
                                } "denominator";
                            }"amount";
                       }"quantità";
                   }"obs";
              }"entry R";
      
              substract.entryRelationship as entryRelationship then{
                entryRelationship.supply as sup -> medicationRq.dispenseRequest as dispreq then {              
                    sup -> dispreq.quantity = create('SimpleQuantity') as quantity then{
                      sup.quantity as q -> quantity.value = (q.value);
                    }"quantity";              
                }"sub";
              }"entry";
            }"man1";
          }"cons";
          substract.text as tx -> medicationRq.note as note then{
            tx.reference as ref -> note.text = (ref.value);
          }"tx"; 
          substract.statusCode as st -> medicationRq.status = (st.code);

          substract.effectiveTime: IVL_TS as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
            eff -> dosage.timing = create('Timing') as timing then {
              eff -> timing.repeat as rep then {
                eff -> rep.bounds = create('Period') as period then IVLTSPeriod(eff,period)"period";
              }"rep";
            }"timing";
          }"period";

          substract.effectiveTime: EIVL_TS as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
            eff -> dosage.timing = create('Timing') as timing then {
              eff -> timing.repeat as rep then {
                eff.event as ev -> rep.when = (ev.code);
              }"rep";
            }"timing";
          }"period";

          substract.effectiveTime: IVL_TS as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage, dosage.timing = create('Timing') as timing, timing.event = (eff.value) "tim";

          substract.effectiveTime: PIVL_TS as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
            eff -> dosage.timing = create('Timing') as timing then periodTiming(eff,timing) "cod";
          }"eff";     

          substract -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
            substract.routeCode -> dosage.route;        
          }"dosage";
          
          substract -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
            substract.approachSiteCode -> dosage.site;        
          }"dosage";

          substract.doseQuantity as doseQuant -> medicationRq.dosageInstruction = create('Dosage') as dosageInstruction then{
            doseQuant.originalText as ot then{
              ot.reference -> dosageInstruction.text;
            }"ot";
            doseQuant -> dosageInstruction.doseAndRate as dosageRate then{
              doseQuant -> dosageRate.dose = create('Range') as d then{
                doseQuant -> d.low = create('SimpleQuantity') as l then{
                  doseQuant.low as lo -> l.value = (lo.value); 
                  doseQuant.low as lo -> l.unit = (lo.unit); 
                }"low";
                doseQuant -> d.high = create('SimpleQuantity') as h then{
                  doseQuant.high as hi -> h.value = (hi.value); 
                  doseQuant.high as hi -> h.unit = (hi.unit);
                }"low";
              }"d";
            }"dosageRate";
          }"Dosage";
          
          substract.rateQuantity as rateQuantity -> medicationRq.dosageInstruction = create('Dosage') as dosageInstruction1 then{
            rateQuantity.originalText as ot then{
              ot.reference -> dosageInstruction1.text;
            }"ot";
            rateQuantity -> dosageInstruction1.doseAndRate as dosageRate then{
              rateQuantity -> dosageRate.rate = create('Range') as d then{
                rateQuantity -> d.low = create('SimpleQuantity') as l then{
                  rateQuantity.low as lo -> l.value = (lo.value); 
                  rateQuantity.low as lo -> l.unit = (lo.unit); 
                }"low";
                rateQuantity -> d.high = create('SimpleQuantity') as h then{
                  rateQuantity.high as hi -> h.value = (hi.value);
                  rateQuantity.high as hi -> h.unit = (hi.unit); 
                }"low";
              }"d";
            }"dosageRate";
          }"rateq";
          
          substract.participant as part -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner  then{
            part.time as time -> medicationRq.authoredOn = (time.value);
            part.participantRole as partRole then{
              partRole->practitioner.meta as meta then {
                partRole->meta.tag = create('Coding') as coding then {
                  partRole -> coding.system ='http://algoritmodiscoring'"system";
                  partRole -> coding.code ='ClinicalDocument/body/TerapiaFarmacologicaRicovero/participant'"code";
                    }"coding";
                  }"meta";
                  partRole.id as id -> practitioner.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext; 
                    id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                    id.root as r then {
                    id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid1) ,medicationRq.performer  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"aut";
                    }"r";
                }"identifier";
                partRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                  id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                }"2.16.840.1.113883.2.9.4.3.2";
                partRole.playingEntity as assi then {
                    assi.name -> practitioner.name;
                  }"assi";
              }"perf";
           }"partRole";
        }"participant"; 
    }"substract";
}",
          "subType": "00"
        }
      }
    }
  ],
  "definitions": [],
  "valuesets": [],
  "template_id_root": "2.16.840.1.113883.2.9.10.1.5",
  "last_update_date": {
    "$date": {
      "$numberLong": "1677573436721"
    }
  },
  "version": "2.6",
  "root_map": "LetteraDimissioneOspedaliera",
  "deleted": false,
  "last_sync": {
    "$date": {
      "$numberLong": "1677573846774"
    }
  }
},{
  "_id": {
    "$oid": "63fdbd3f4afb2a4bc2c12be8"
  },
  "maps": [
    {
      "name_map": "ProfiloSanitarioSinteticoBody",
      "filename_map": "ProfiloSanitarioSintetico_v1.5.map",
      "content_map": {
        "$binary": {
          "base64": "map "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/ProfiloSanitarioSinteticoBody" = "ProfiloSanitarioSinteticoBody"

conceptmap "OBSstatus" {
prefix s = "http://terminology.hl7.org/ValueSet/v3-statusCode"
prefix t = "http://hl7.org/fhir/status.html"

s:completed == t:final
s:active == t:registered
s:aborted == t:cancelled
s:suspended == t:partial
}
conceptmap "EventStatus" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-statusCode"
    prefix t = "http://hl7.org/fhir/event-status"
    
    s:"completed" == t:"completed"
    s:"active" == t:"in-progress"
    s:"aborted" == t:"stopped"
    s:"suspended" == t:"on-hold"
    }
conceptmap "FinancialStatus" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-statusCode"
    prefix t = "http://hl7.org/fhir/fm-status"
    
    s:"active" == t:"active"
    s:"aborted" == t:"cancelled"
    s:"suspended" == t:"draft"
    }
conceptmap "MedicationStatusMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-statusCode"
    prefix t = "http://hl7.org/fhir/CodeSystem/medicationrequest-status"
    
    s:completed == t:completed
    s:active == t:active
    s:aborted == t:cancelled
    s:suspended == t:"on-hold"
    }
conceptmap "cm-v3-administrative-gender" {
prefix s = "http://terminology.hl7.org/ValueSet/v3-AdministrativeGender"
prefix t = "http://hl7.org/fhir/ValueSet/administrative-gender"

s:M == t:male
s:F == t:female
}

conceptmap "AllergyTypeMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://hl7.org/fhir/Allergy-type.html"

    s:OINT == t:intolerance
    s:ALG == t:allergy
    s:DALG == t:allergy
    s:EALG == t:allergy
    s:FALG == t:allergy
    s:NAINT == t:intolerance
    s:FNAINT == t:intolerance
    s:DNAINT == t:intolerance
    s:ENAINT == t:intolerance
    s:FINT == t:intolerance
    s:DINT == t:intolerance
    s:EINT == t:intolerance
  }
  conceptmap "AllergyCategoryMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://hl7.org/fhir/Allergy-type.html"

    s:DALG == t:medication
    s:EALG == t:enviroment
    s:FALG == t:food
    s:FNAINT == t:intolerance
    s:DNAINT == t:medication
    s:ENAINT == t:enviroment
    s:FINT == t:food
    s:DINT == t:medication
    s:EINT == t:enviroment
  }

conceptmap "CricalityMap" {
    prefix s = "http://terminology.hl7.org/CodeSystem/v3-ObservationValue"
    prefix t = "http://hl7.org/fhir/allergy-intolerance-criticality"

    s: M == t: low
    s: H == t: high
    s: L == t: low
}


conceptmap "ClinicalStatusMap" {
    prefix s = "https://loinc.org/99493-9/"
    prefix t = "http://terminology.hl7.org/CodeSystem/condition-clinical"

    s: "LA16666-2" == t: active
    s: "LA18632-2" == t: inactive
    s: "LA9041-0" == t: resolved
}

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/List" alias List as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL-PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target


imports "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes"
imports "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
    cda ->  
    bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('https://example/Composition/', uuid1), request.url = 'Composition', 
    bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Patient/', uuid2),  bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3), request.url = 'Encounter', 
    bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST',  e4.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid4,  e4.fullUrl = append('https://example/DocumentReference/', uuid4),request.url = 'DocumentReference' then {
    cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
    cda.recordTarget as recordTarget then{
        recordTarget.patientRole as patient then{
        patient.id as id -> patient.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext1 -> identifier.value = ext1 "value";
        id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
        }"idfr";
            patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7') or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17') or (root='2.16.840.1.113883.2.9.4.3.15') then {
                id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
            }"record";
        }"recPat";
    }"patient";
    } "ClinicalDocumentToBody";
}


group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference : DocumentReference) {
    cda -> encounter.status = 'finished' "finished";
    cda -> encounter.class = create("Coding") as coding then{
        cda -> coding.code = 'summary' "code";
    }"coding";
    cda -> bundle.id = uuid() "id";
    cda.id -> bundle.identifier "identifier";
    cda -> bundle.type = 'transaction' "type";
    //cda.effectiveTime -> bundle.timestamp;
    cda -> bundle.timestamp=(timestamp.now()) "date";
    cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";
    cda.component as component then {
    component.structuredBody as body then {
        body.component as component  then {
            component.section as srcSection then {
        srcSection.code -> composition.section as tgtSection  then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle,encounter, composition);       
        } "section";
        } "component";
    }"body";
    }"diagnostic";
}

group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target composition : Composition) {
    src.title as t -> tgt.title = (t.dataString);
    src.code -> tgt.code;
    src.entry as entry then{
        src.text as cdaText -> tgt.text as fhirText then {
            cdaText -> fhirText.status = 'generated' "narrativeStatus";
            cdaText as t -> fhirText.div = t "narrativeText";
        } "cdaText";
        // sezioni che sono strutturate
        src.code where (code = '30954-2') then{
            entry.organizer as organizer -> bundle.entry as e0, e0.request = create('BackboneElement') as request, request.method = 'POST', e0.resource = create('DiagnosticReport') as dia,  dia.id = uuid() as uuid0,  e0.fullUrl = append('https://example/DiagnosticReport/', uuid0), request.url ='DiagnosticReport' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/DiagnosticReport/' + %dia.id) then DiagnosticReportFunction(organizer,patient,enc,dia,bundle) "diagnostic"; // add function to DiagnosticReport
        }"entryObs";

        src.code where (code = '29762-2') or (code = '10162-6') then{
            entry.observation as observation -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url ='Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then Observation(observation, patient, enc, obs1, bundle) "obs1";
        }"entryObs";
        src.code where (code = '8716-3') or (code = '47420-5') then{
            entry.organizer as organizer -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Observation') as obs2,  obs2.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Observation/', uuid2), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs2.id) then ObservationOrganizer(src, organizer, patient, enc, obs2, bundle) "obs2";
            entry.observation as organizer -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Observation') as obs2,  obs2.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Observation/', uuid2), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs2.id) then ObservationOrganizer(src, organizer, patient, enc, obs2, bundle) "obs2";
        } "organizer";
        src.code where code = '11450-4' then{
            entry.act as act -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST', e3.resource = create('Condition') as condition,  condition.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Condition/', uuid3), request.url = 'Condition', tgt.entry = create('Reference') as reference,  reference.reference = ('https://example/Condition/' + %condition.id) then ConditionFunction(act ,condition, patient, enc, bundle) "condition";        
        }"lista dei problemi";
        src.code where (code = '48765-2') then{
            entry.act as act -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('AllergyIntolerance') as allergy,  allergy.id = uuid() as uuid5,  e5.fullUrl = append('https://example/AllergyIntolerance/', uuid5), request.url = 'AllergyIntolerance', tgt.entry = create('Reference') as reference,  reference.reference = ('https://example/AllergyIntolerance/' + %allergy.id) then allergyFunction(act, allergy, patient,enc) "allergy";
        } "entryAct";
        src.code where code = '10160-0' then{
            entry.substanceAdministration as subAdmin -> bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST', e6.resource = create('MedicationStatement') as medicationstatement,  medicationstatement.id = uuid() as uuid6,  e6.fullUrl = append('https://example/MedicationStatement/', uuid6), request.url = 'MedicationStatement', tgt.entry = create('Reference') as reference,  reference.reference = ('https://example/MedicationStatement/' + %medicationstatement.id) then MedicationStatement(subAdmin, medicationstatement, patient, enc, bundle) "Terapia farmacologica";
        }"terapia";
        src.code where code = '11369-6' then{
            entry.substanceAdministration as subVACC -> bundle.entry as e7, e7.request = create('BackboneElement') as request, request.method = 'POST',   e7.resource = create('Immunization') as immunization,  immunization.id = uuid() as uuid7,  e7.fullUrl = append('https://example/Immunization/', uuid7), request.url = 'Immunization' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Immunization/' + %immunization.id) then Immunization(subVACC, patient, enc, immunization, bundle) "immunization";
        }"vacc";
        src.code where code = '10157-6' then{
            entry.organizer as organizer ->bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('FamilyMemberHistory') as familyMember, familyMember.id = uuid() as uuid12,  e12.fullUrl = append('https://example/FamilyMemberHistory/', uuid12), request.url = 'FamilyMemberHistory', tgt.entry = create('Reference') as reference, reference.reference = ('https://example/FamilyMemberHistory/' + %familyMember.id) then FamilyMemberFunction(organizer, familyMember, patient) "family";            
        }"family";
        src.code where code = '46264-8' then{
            entry.supply as supply -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST',   e8.resource = create('Procedure') as procedure,  procedure.id = uuid() as uuid8,  e8.fullUrl = append('https://example/Procedure/', uuid8), request.url = 'Procedure' , tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure.id) then Procedure(supply, patient, enc, procedure, bundle)  "protesi";
        }"impianti";
        src.code where code = '47519-4' then{
            entry.procedure as procedure -> bundle.entry as e9, e9.request = create('BackboneElement') as request, request.method = 'POST',   e9.resource = create('Procedure') as procedure2,  procedure2.id = uuid() as uuid9,  e9.fullUrl = append('https://example/Procedure/', uuid9), request.url = 'Procedure', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure2.id) then Procedure(procedure, patient, enc, procedure2, bundle)  "tratt";
        }"trattamenti e procedure";
        src.code where code = '46240-8' then{
            // entry.encounter as encounter -> enc then{
            //     encounter.id -> enc.identifier;
                
            //     encounter -> enc.status = 'unknown' "status";
            //     encounter.code as code -> enc.classHistory as classHistory then{
            //         code -> classHistory.class as class then{
            //             code.code as code -> class.code = cast(code, 'string');
            //             code.codeSystem as system -> class.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
            //             code.displayName as display -> class.display = cast(display, 'string');
            //         }"class";
            //         encounter.effectiveTime -> classHistory.period "period";
            //     }"history";
            //     encounter.text as text -> enc.type as type then{
            //         text.reference as reference -> type.text = (reference.value) "text";
            //     }"type";
            //     encounter.performer as performer -> enc.participant as participant then Practitioner(performer,enc,bundle) "performer";
            // }"encounter";  
            entry.encounter as encounter -> bundle.entry as e9, e9.request = create('BackboneElement') as request, request.method = 'POST',   e9.resource = create('Encounter') as encounterF,  encounterF.id = uuid() as uuid9,  e9.fullUrl = append('https://example/Encounter/', uuid9), request.url = 'Encounter', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounterF.id) then EncounterFunction(encounter, patient, enc, encounterF, bundle)  "encounter";
            

        }"visite e ricoveri";
        src.code where code = '57827-8' then{
            entry.act as act -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'POST',   e13.resource = create('Coverage') as coverage,  coverage.id = uuid() as uuid13,  e13.fullUrl = append('https://example/Coverage/', uuid13), request.url = 'Coverage' , tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Coverage/' + %coverage.id) then Coverage(act, patient, enc, coverage, bundle)  "esen";
        }"esenzioni";
        src.code where code ='PSSIT99' then{
            entry.act as act -> bundle.entry as e14, e14.request = create('BackboneElement') as request, request.method = 'POST',   e14.resource = create('OrganizationAffiliation') as affiliation,  affiliation.id = uuid() as uuid14,  e14.fullUrl = append('https://example/OrganizationAffiliation/', uuid14), request.url = 'OrganizationAffiliation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/OrganizationAffiliation/' + %affiliation.id) then OrganizationAffiliation(act, patient, enc, affiliation, bundle)  "Org affiliation";
        }"reti di patologia";
        src.code where code = '18776-5' then{
            src -> bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'POST', e11.resource = create('CarePlan') as careplan, careplan.id = uuid() as uuid11,  e11.fullUrl = append('https://example/CarePlan/', uuid11), request.url = 'CarePlan', tgt.entry = create('Reference') as reference, reference.reference = ('https://example/CarePlan/' + %careplan.id) then{    
                src.entry as entry then CarePlanFunction(entry, careplan, patient, enc, bundle) "prestazioni";
            }"piani di cura";
        }"raccoglitore";
    }"entry";
   
    src where src.entry.exists().not() then {
        // Anmanesi Familiare narrativa
        src.code where code = '10157-6' then{
            src.text as text ->bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('FamilyMemberHistory') as familyMember, familyMember.id = uuid() as uuid12,  e12.fullUrl = append('https://example/FamilyMemberHistory/', uuid12), request.url = 'FamilyMemberHistory', tgt.entry = create('Reference') as reference, reference.reference = ('https://example/FamilyMemberHistory/' + %familyMember.id) then {          
            src -> familyMember.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference"; 
            src -> familyMember.status = 'health-unknown' "statusS";
            text -> familyMember.note as note then{
                text as t ->note.text =t "reference";
              }"reference";
              text ->  familyMember.relationship =create('CodeableConcept') as relation then {
                text as txt -> relation.text=txt "text";
              }"medication";
            }"family";
        }"familyraccoglitore";
        //Piano di cura narrativa 
        src.code where code = '18776-5' then{
            src.text as text -> bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'POST', e11.resource = create('CarePlan') as careplan, careplan.id = uuid() as uuid11,  e11.fullUrl = append('https://example/CarePlan/', uuid11), request.url = 'CarePlan', tgt.entry = create('Reference') as reference, reference.reference = ('https://example/CarePlan/' + %careplan.id) then{ 
                src-> careplan.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
                src-> careplan.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";    
                src -> careplan.status='active'"status";
                src -> careplan.intent='order'"intent"; 
                text -> careplan.note as note then{
                    text as t ->note.text =t "reference";
                  }"reference";   
            }"piani di cura";
        }"raccoglitore";
        // sezioni che sono narrative
        src.code where (code = '30954-2') or (code = '29762-2') or (code = '8716-3') or (code = '47420-5') or (code = '42348-3') then{
        src.text as text -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'POST', e13.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid13,  e13.fullUrl = append('https://example/Observation/', uuid13), request.url = 'Observation', tgt.entry = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then {
            src -> obs1.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
            src -> obs1.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";  
            src -> obs1.status = 'preliminary' "obsst";
            src.code -> obs1.code "obscde";
            src -> obs1.status = 'final' "statusS";
            text -> obs1.note as note then{
                text as t-> note.text = create('string') as textNote then EDstring(t,textNote) "note";
            } "narrative";    
        }"txtsec";
    }"narrative";
}"code";
    src.component as component then {
        component.section as sec -> tgt.section as tgtSection then ClinicalDocumentSection(cda, sec, patient, tgtSection, bundle, enc, dReport);
    }"component";
}

group NarrativeSectionFunction(source section: section, source src: clinicalDocument, target tgt: section, target bundle: Bundle, target encounter : Encounter, target patient : Patient){
    
}

group Procedure(source src: cdaElement , target patient: Patient, target encounter: Encounter, target tgt: Procedure, target bundle: Bundle){
    
    //toASK
    src.text as tx -> tgt.note as note then {
        tx.reference as reff -> note.text = (reff.value) "r";
    }"tx";
    src.templateId where root='2.16.840.1.113883.2.9.10.1.4.3.10.3' then{
        src.effectiveTime as effectiveTime -> tgt.performed = (effectiveTime.value);
        src.code -> tgt.code;
    }"ref";

    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
    src.statusCode as s then {
        s.code as cos-> tgt.status = translate(cos, '#EventStatus', 'code') "codeS";
    }"status";
    src where statusCode.exists().not() -> tgt.status = 'unknown' "status2";
    src.templateId where root='2.16.840.1.113883.2.9.10.1.4.3.9.1' then{
        src -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Device') as deviceRes,  deviceRes.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Device/', uuid1), request.url = 'Device', tgt.usedReference = create('Reference') as reference,  reference.reference = ('https://example/Device/' + %deviceRes.id) then{
            src -> deviceRes.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";                
            src.code -> deviceRes.type;
        }"device";
        src.effectiveTime as effectiveTime where (value.exists()) -> tgt.performed = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
        src.effectiveTime as effectiveTime where (low.exists()) -> tgt.performed = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
    }"presenza protesi/impianto";
    src.templateId where root='2.16.840.1.113883.2.9.10.1.4.3.9.2' then{
        src.code as code -> tgt.note as note then{
            code.displayName as displayName -> note.text = (displayName) "text";
        }"note";
    }"assenza";
    src.templateId where root='2.16.840.1.113883.2.9.10.1.4.3.11.1' then{
        src.id -> tgt.identifier "id";
        src.code -> tgt.code;
        src.effectiveTime as effectiveTime where (value.exists()) -> tgt.performed = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
        src.effectiveTime as effectiveTime where (low.exists()) -> tgt.performed = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";

        src.entryRelationship as entryR then{
            entryR.observation as observation -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST', e3.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Observation/', uuid3), request.url = 'Observation', tgt.reasonReference = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then Observation(observation, patient, encounter, obs1, bundle) "observation";
        }"entryRel Procedure";
    }"procedure e trattamenti";
}

group Observation(source cda, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {  
    cda-> ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    cda-> ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference"; 
    
    cda.id -> ob.identifier;
    cda.code -> ob.code;
    cda -> ob.status = 'final' "Stats";
    //value datatype
    cda.value:ST as st -> ob.value =create('string'),  ob.value= (st.dataString) "value";
    cda.value:BL as boolean ->ob.value=(boolean.value)"boolean";
    cda.value:INT as int -> ob.value = (int.value) "int val";
    cda.value:CE as val then{
        val->ob.value =create('CodeableConcept') as ce then {
        val.originalText as originalText then{
            originalText.reference as reference-> ce.text = (reference.value) "reference";
        }"originalText";
        val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        } "code";
        val.translation as translation -> ce.coding as coding then {
          translation.code as code -> coding.code = cast(code, 'string');
          translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          translation.displayName as display -> coding.display = cast(display, 'string');
          translation.qualifier as qualifier then{
            qualifier.value as value -> ce.coding as coding then {
              value.code as code -> coding.code = cast(code, 'string');
              value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
              value.displayName as display -> coding.display = cast(display, 'string');
              } "value";
            };
          } "translation";
        }"coding";
      }"val";
      cda.value:CD as val then{
        val->ob.value =create('CodeableConcept') as ce then {
        val.originalText as originalText then{
            originalText.reference as reference-> ce.text = (reference.value) "reference";
        }"originalText";
        val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        } "code";
        val.translation as translation -> ce.coding as coding then {
          translation.code as code -> coding.code = cast(code, 'string');
          translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          translation.displayName as display -> coding.display = cast(display, 'string');
          translation.qualifier as qualifier then{
            qualifier.value as value -> ce.coding as coding then {
              value.code as code -> coding.code = cast(code, 'string');
              value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
              value.displayName as display -> coding.display = cast(display, 'string');
              } "value";
            };
          } "translation";
        }"coding";
      }"val";
    cda.value:PQ as val then{
        val->ob.value = create('Quantity') as quantity then {
            val.value as value->quantity.value = value;
            val.unit as unit-> quantity.unit = unit "unit";
        }"quantity";
    }"valueQuantity";
    //
    cda.effectiveTime as effectiveTime where (value.exists()) -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
    cda.effectiveTime as effectiveTime where (low.exists()) -> ob.effective = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
    cda.text as text -> ob.note as note then{
        text.reference as reference -> note.text = (reference.value) "text";
    } "note";
    cda.statusCode as s then {
        s.code as cos-> ob.status = translate(cos, '#OBSstatus', 'code') "codeS";
    }"status";
    
    //toASK è giusto siano invertiti?
    // cda.methodCode -> ob.interpretation;
    // cda.interpretationCode -> ob.method;
    cda.methodCode -> ob.method;
    cda.interpretationCode -> ob.interpretation;
    cda.targetSiteCode -> ob.bodySite;

    //added    
    cda.referenceRange as refrange then{
        refrange.observationRange as obsrange then{
            obsrange.value as val -> ob.referenceRange = create('BackboneElement') as refrangeFH then{
                val -> refrangeFH.low = create('SimpleQuantity') as lowfhir then{
                    val.low as l -> lowfhir.value = (l.value) "val";
                    val.low as l -> lowfhir.unit = (l.unit) "val";
                }"de";
                val -> refrangeFH.high = create('SimpleQuantity') as highfhir then{
                    val.high as h -> highfhir.value = (h.value) "val";
                    val.high as h -> highfhir.unit = (h.unit) "val";
                }"de";
            }"refFhir"; 
        }"obsrange";
    }"regrange";


}  

group ObservationOrganizer(source section: section, source cda:organizer, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {  
    cda-> ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    cda-> ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference"; 
    
    cda.id -> ob.identifier;    
    section.code -> ob.code;
    cda -> ob.status = 'final' "Stats";
    //
    cda.effectiveTime as effectiveTime where (value.exists()) -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
    cda.effectiveTime as effectiveTime where (low.exists()) -> ob.effective = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
    cda.text as text -> ob.note as note then{
        text.reference as reference -> note.text = (reference.value) "text";
    } "note";
    cda.statusCode as s then {
        s.code as cos-> ob.status = translate(cos, '#OBSstatus', 'code') "codeS";
    }"status";
    cda.component as component then{
        component.observation as observation -> bundle.entry as ei, ei.request = create('BackboneElement') as request, request.method = 'POST', ei.resource = create('Observation') as obsi,  obsi.id = uuid() as uuidi,  ei.fullUrl = append('https://example/Observation/', uuidi), request.url = 'Observation' ,ob.hasMember  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obsi.id) then Observation(observation, patient, encounter, obsi, bundle) "hasMember";
    }"component";
}  

group Coverage(source src: act , target patient: Patient, target encounter: Encounter, target tgt: Coverage, target bundle: Bundle){
    src-> tgt.beneficiary =create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    src-> tgt.payor =create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    
    src.id as id -> tgt.identifier as idf then{
        id -> idf.value = (id.root) "ID";
    }"id";
    
    src.code -> tgt.type;
    src.statusCode as statusCode then{
        statusCode.code as s -> tgt.status = translate(s,'#FinancialStatus','code') "status";
    }"sc";
    src where statusCode.exists().not() -> tgt.status = 'active' "status Absent";
    
    // src.effectiveTime as effectiveTime -> tgt.period as period then{
    //     effectiveTime.low as l -> period.start = (l.value);
    // }"period";

    src.effectiveTime as effectiveTime where (value.exists()) -> tgt.period = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
    src.effectiveTime as effectiveTime where (low.exists()) -> tgt.period = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";


    src.entryRelationship as entryRelationship then{
        entryRelationship.act as ac -> tgt.class as class then{
            ac.text as text -> class.type as type then{
                text.reference as reference -> type.text = (reference.value) "value";
            }"ref";
            ac -> class.value = 'commenti' "note";
        }"QUI";
    }"entryr";
}

group allergyFunction(source src: cdaElement, target tgt: AllergyIntolerance, target patient : Patient, target encounter : Encounter) {
    src -> tgt.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference"; 

    //toASK
    src.effectiveTime as effTime then{
        effTime.low as l -> tgt.recordedDate as r then TSDateTime(l, r) "value";
    }"efftime";
    
    src.entryRelationship as entryRelationship1 then{
        entryRelationship1.observation as observation1 then{

            
            observation1.id -> tgt.identifier;
            observation1.templateId where root = '2.16.840.1.113883.2.9.10.1.4.3.1.4' -> tgt.code as code then{
                observation1 -> code.coding as coding then{
                    observation1 -> coding.code = 'No known allergy' "code";
                }"code";
                src.effectiveTime as effectiveTime where (value.exists()) -> tgt.onset = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
                src.effectiveTime as effectiveTime  -> tgt.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
            } "No allergy";

            observation1.effectiveTime as effectiveTime where (value.exists()) -> tgt.onset = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
            observation1.effectiveTime as effectiveTime -> tgt.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";


            observation1.value as code then{
                code.code as code1-> tgt.type = translate(code1,'#AllergyTypeMap','code') "type"; 
                code.code as code1 -> tgt.category = translate(code1,'#AllergyCategoryMap','code') "category";   
            }"code";
            

            //toASK qui dovrei fare un controllo sul code 
            observation1.value -> tgt.code;

            observation1.participant as participant-> tgt.reaction as reaction then{
                observation1.entryRelationship as entryRelationship2 where (typeCode = 'MFST') then{
                    entryRelationship2.observation as observation2 then{
                        observation2.value -> reaction.manifestation "manifestation";
                        observation2.code -> reaction.manifestation "manifestation";
                        observation2.text as tx then{
                            tx.reference as reff -> reaction.description = (reff.value) "tx";
                        }"tx";
                        observation2.effectiveTime as effectiveTime then{
                            effectiveTime.low as low -> reaction.onset = create('dateTime') as value then TSDateTime(low, value) "valuePeriodLow";
                            effectiveTime.high as high -> tgt.lastOccurrence = create('dateTime') as value then TSDateTime(high, value) "valuePeriodHigh";
                        }"low";
                    }"observ2";
                }"entryR2";
                participant.participantRole as participantRole then{
                    participantRole.playingEntity as playingEntity then{
                        playingEntity.code -> reaction.substance "reaction";
                    }"playingEntity";
                }"participantRole";
            }"participant";
            observation1.entryRelationship as entryRelationship2 where (typeCode = 'MFST') then{
                entryRelationship2.observation as observation2 where observation1.participant.exists().not() -> tgt.reaction as reaction then{
                    observation2.value -> reaction.manifestation "manifestation";
                    observation2.text as tx then{
                        tx.reference as reff -> reaction.description = (reff.value) "tx";
                    }"tx";
                    observation2.effectiveTime as effectiveTime then{
                        effectiveTime.low as low -> reaction.onset = create('dateTime') as value then TSDateTime(low, value) "valuePeriodLow";
                    }"low";
                }"observ2";
            }"entryR2";
            observation1.entryRelationship as entryRelationship3 where (typeCode = 'SUBJ') then{
                entryRelationship3.observation as observation3 then{
        
                    observation3.value as value then{
                        value.code as c-> tgt.criticality = translate(c,'#CricalityMap','code') "value";
                    }"criticality"; 
                }"observ3";
                entryRelationship3.act as act -> tgt.note as note then{
                    act.text as text then{
                        text.reference as reference -> note.text = (reference.value);
                    }"note";
                }"act";
            }"entryR3";
            observation1.entryRelationship as entryRelationship4 where (typeCode = 'REFR') then{
                entryRelationship4.observation as observation4  then{

                    observation4 -> tgt.clinicalStatus as clinicalStatus then{
                        observation4.value as value then{
                            value as valu -> clinicalStatus.coding = create('Coding') as coding then{
                                valu where(code = 'LA9041-0') -> coding.code =  'resolved' "code";
                                valu where(code = 'LA18632-2') -> coding.code =  'inactive' "code";
                                valu where(code = 'LA16666-2') -> coding.code =  'active' "code";
                                valu -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical' "system";
                                valu.displayName as display-> coding.display= cast(display, 'string') "display";
                            }"coding";                            
                        }"value";
                        
                        observation4.text as tx then{
                            tx.reference as ref -> clinicalStatus.text = (ref.value);
                        }"tx";

                    }"clinicalStatus";
                }"observ4";
            }"entryR4";
        }"observation";
    }"entryrelationship";
}

group MedicationStatement(source src: subAdmin, target tgt: Medicationstatement, target patient: Patient, target encounter : Encounter, target bundle: Bundle){
    
    src -> tgt.subject = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";  
    src -> tgt.context = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";  
    src.statusCode -> tgt.status "status"; 

    
    src.id -> tgt.identifier;
    src.text as text -> tgt.note as note then{
        text.reference as reference -> note.text = (reference.value) "text";
    }"note";
    
    src.effectiveTime as eff where (value.exists()) -> tgt.effective  = create('dateTime') as value then TSDateTime(eff, value) "value1";
    src.effectiveTime: IVL_TS as eff -> tgt.effective = create('Period')  as value then IVLTSPeriod(eff, value) "valuePeriod";

    src -> tgt.dosage = create('Dosage') as dosage then{
        src.effectiveTime: PIVL_TS as eff  then{
            eff -> dosage.timing = create('Timing') as timing then periodTiming(eff,timing) "cod";
        }"eff";
    
        src where  (src.doseQuantity.exists() or src.rateQuantity.exists() or src.routeCode.exists() or src.approachSiteCode.exists()) then{
            src.doseQuantity as doseQuant then{
                doseQuant.originalText as ot then{
                    ot.reference -> dosage.text;
                }"ot";  
                doseQuant -> dosage.doseAndRate as dosageRate then{
                    doseQuant -> dosageRate.dose = create('Range') as d then{
                        doseQuant -> d.low = create('SimpleQuantity') as l then{
                            doseQuant.low as lo -> l.value = (lo.value); 
                            doseQuant.low as lo -> l.unit = (lo.unit); 
                        }"low";
                        doseQuant -> d.high = create('SimpleQuantity') as h then{
                            doseQuant.high as hi -> h.value = (hi.value);
                            doseQuant.high as hi -> h.unit = (hi.unit); 
                        }"low";
                    }"d";
                }"dosageRate";
            } "doseQuantity";
            src.rateQuantity as rateQuantity then{
                rateQuantity.originalText as ot then{
                    ot.reference -> dosage.text;
                }"ot";
                rateQuantity -> dosage.doseAndRate as dosageRate then{
                    rateQuantity -> dosageRate.rate = create('Range') as d then{
                        rateQuantity -> d.low = create('SimpleQuantity') as l then{
                            rateQuantity.low as lo -> l.value = (lo.value); 
                            rateQuantity.low as lo -> l.unit = (lo.unit); 
                        }"low";
                        rateQuantity -> d.high = create('SimpleQuantity') as h then{
                            rateQuantity.high as hi -> h.value = (hi.value);
                            rateQuantity.high as hi -> h.unit = (hi.unit); 
                        }"high";
                    }"r";
                }"dosageRate";
            }"rate";
        
            src.routeCode -> dosage.route "route";
            src.approachSiteCode -> dosage.site "site";
            src.targetSiteCode -> dosage.site "site";
    
        }"route";    
    }"dos";


    src.consumable as consumable then{
        consumable.manufacturedProduct as manufacturedProduct -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Medication/', uuid1), request.url = 'Medication', tgt.medication = create('Reference') as medref,  medref.reference = ('https://example/Medication/' + %medication.id) then Medication(src, medication,patient,bundle) "medication";
    }"consumable";

}
group periodTiming(source effectiveTime: PIVL_TS, target timing: Timing){
    effectiveTime -> timing.repeat as r then{
      effectiveTime.period as p -> r.period = (p.value); 
      effectiveTime.period as p -> r.periodUnit = (p.unit);   
    }"repeat";
  }

group Medication(source src:  , target tgt: Medication, target patient: Patient, target bundle : Bundle){

    src.consumable as consumable then{
        consumable.manufacturedProduct as manufacturedProduct then{
            manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                manufacturedMaterial.code -> tgt.code "CE";
                src.administrationUnitCode -> tgt.form "form";
            }"material";
        }"product";
    }"consumable";

    src.entryRelationship as entryR then{
        entryR.observation as observation then{
            observation.code where displayName='Grammatura' -> tgt.ingredient as ingredient then{
                src.consumable as consumable then{
                    consumable.manufacturedProduct as manufacturedProduct then{
                        manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                            manufacturedMaterial.code as code -> ingredient.item = create('CodeableConcept') as value then CECodeableConcept(code,value) "CE";
                        }"material";
                    }"product";
                }"consumable";
                observation.value as value -> ingredient.strength as strength then{
                    value -> strength.numerator as numerator then{
                        value -> numerator.value = (value.value) "valueN";
                    } "numerator";
                    value -> strength.denominator as denominator then{
                        value -> denominator.value = 1 "valueD";
                    } "denominator";
                }"strenght";
            }"ingredient";
            observation.code where displayName='Quantità nella Confezione' then{
                observation.value as value -> tgt.amount as amount then{
                    value -> amount.numerator  as numerator then{
                        value -> numerator.value = (value.value) "valueN";
                    } "numerator";
                    value -> amount.denominator as denominator then{
                        value -> denominator.value = 1 "valueD";
                    } "denominator";
                }"amount";
            }"quantità";
        }"obs";
    }"entry R";
}

group Immunization(source substance: substanceAdministration, target patient: Patient,target encounter : Encounter, target tgt: immunization, target bundle: Bundle) {

        substance -> tgt.patient  = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "patientRef"; 
        substance -> tgt.encounter  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "encounterRef"; 

        substance.id as id -> tgt.identifier as idf then{
            id.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        }"id";
        substance.text as text -> tgt.note as note then{
            text.reference as reference -> note.text = (reference.value) "text";
        }"note";
        substance.statusCode  as statusc where (code='completed') -> tgt.status ='completed';  
        substance.statusCode  as statusc where (code='aborted') -> tgt.status ='final';  
        substance.statusCode  as statusc where (code='suspended') -> tgt.status ='enterer-in-error';  
        substance.statusCode  as statusc where (code='cancelled') -> tgt.status ='not-done'; 

        substance.effectiveTime as time -> tgt.occurrence = create('dateTime') as value then TSDateTime(time, value) "efftime";
        substance.routeCode -> tgt.route;
        substance.approachSiteCode ->tgt.site;
        substance -> tgt.doseQuantity = create('SimpleQuantity') as quantity then{
          substance.doseQuantity as q then{
            q -> quantity.value = (q.value) "val";
            q -> quantity.unit = (q.unit) "uni"; 
          }"qua"; 
        }"q";

        substance.consumable as cons then{
          cons.manufacturedProduct as manufact then{
            manufact.manufacturedMaterial as manufactmat then{
              manufactmat.code -> tgt.vaccineCode;
              manufactmat.lotNumberText as t -> tgt.lotNumber = (t.dataString);
            }"manufactmat";
            manufact.manufacturerOrganization as manufactOrg -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Organization') as organization  then{
              manufactOrg.id as id -> organization.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  manufactOrg -> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid,  e1.fullUrl = append('https://example/', uuid), tgt.manufacturer  = create('Reference') as reference,  reference.reference = ('https://example/' + %organization.id) "idasi";       
                }"r" ;
            }"identifier";                                         
              manufactOrg.name as n -> organization.name = (n.other);
                  manufactOrg-> organization.meta as meta then {
                  manufactOrg-> meta.tag = create('Coding') as coding then {
                  manufactOrg -> coding.system ='http://algoritmodiscoring'"system";
                  manufactOrg -> coding.code ='ClinicalDocument/body/Vaccinazioni/manufacturerOrganization'"code";
                }"coding";
              }"meta";
            }"manufactOrg";          
          }"manufact";
        }"cons";
       
        substance.participant as part ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Location') as location,  location.id = uuid() as uuid1 then{
              part-> location.meta as meta then {
              part-> meta.tag = create('Coding') as coding then {
              part -> coding.system ='http://algoritmodiscoring'"system";
              part -> coding.code ='ClinicalDocument/body/Vaccinazione/participant'"code";
          }"coding";
        }"meta";
          part.participantRole as partRole then{
            partRole.id as id -> location.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                partRole -> request.url = append('Location?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> location.id = (r +'-'+ ext) as uuid,  e1.fullUrl = append('https://example/Location', uuid), tgt.location  = create('Reference') as reference,  reference.reference = ('https://example/' + %location.id) "idasi";       
              }"r" ;
          }"identifier";                          
          }"role";
        }"part";

        substance.entryRelationship as entrirel1 then{
          entrirel1.observation as obs then{          
            obs.code where( code = '30973-2') then {
              obs -> tgt.protocolApplied = create('BackboneElement') as prot then{
                obs.value as v then {
                  v.value as int -> prot.doseNumber = (int.toString()); 
                }"value"; 
              }"val";            
            }"code control";
          }"obs";
        }"entrirel1";

        substance.entryRelationship as entrirel2 then{
          entrirel2.observation as obs then{          
            obs.code where( code = '59781-5')then{
              obs.value as value then{
                value.high as h then{
                    h.value as value -> tgt.expirationDate = truncate(value, 10); //truncate(date, 10);   
                }"val";
              }"value";
            }"code control";
          }"obs";
        }"entrirel2";

        substance.entryRelationship as entrirel4 then{
          entrirel4.observation as obs then{          
            obs.code where( code = '59785-6') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', tgt.reasonReference  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
              obs then Observation1(entrirel4,patient,tgt,bundle,enc,observation) "observation";
            }"code control";
          }"obs";
        }"entrirel4";
      
        substance.entryRelationship as entrirel5 then{
            entrirel5.observation as obs then{          
              obs.code where( code = '75321-0') or (code = '5321-0') -> tgt.reaction as reaction then {
                obs -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , reaction.detail  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then Observation(obs, patient, encounter, observation, bundle) "observation";
              }"code control";
            }"obs";
        }"entrirel5";

        substance.entryRelationship as entrirel5 then{
            entrirel5.act as act then{          
              act.text as tx -> tgt.note as note then{
                tx.reference as reference -> note.text = (reference.value) "text";
            }"note";
            }"obs";
        }"entrirel5";
  
}

group ConditionFunction (source src: cdaElement, target tgt: Condition, target patient : patient, target encounter : encounter, target bundle : Bundle) {
    
    src.id -> tgt.identifier;
    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference"; 
    src.statusCode as stscode -> tgt.verificationStatus as verifstatus then { 
        stscode as codeS -> verifstatus.coding = create('Coding') as coding then {
            codeS.code -> coding.code = 'confirmed' "code";
            codeS -> coding.system ='http://terminology.hl7.org/CodeSystem/condition-ver-status' "system";
            codeS -> coding.display= cast('Confirmed', 'string') "display";
    }"coding";    
    }"verifstatus";
    src where entryRelationship.exists().not() then{
        src.effectiveTime as effectiveTime where (value.exists()) -> tgt.onset = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
        src.effectiveTime as effectiveTime -> tgt.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
    }"onset";

    src.entryRelationship as entryRelationship then{
        entryRelationship.observation as obsentry then{
            
            //toASK
            obsentry.value -> tgt.code;

            obsentry.code -> tgt.category;
            obsentry.effectiveTime as effectiveTime where (value.exists()) -> tgt.onset = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
            obsentry.effectiveTime as effectiveTime -> tgt.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
            obsentry.text as text -> tgt.note as note then{
                text.reference as reference -> note.text = (reference.value) "text";
            }"note";
            obsentry.entryRelationship as entryR2 then{
                entryR2.observation as obsentry2 then{

                    obsentry2.code where code ='89261-2' then{
                        obsentry2 -> tgt.evidence as evidence, bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as obsy,  obsy.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', evidence.detail = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obsy.id) then Observation(obsentry2, patient, encounter, obsy, bundle) "observation";
                    }"observation";

                    obsentry2.code where code = '33999-4' then{
                        obsentry2.value as value -> tgt.clinicalStatus as clinicalstatus then {
                            value as val -> clinicalstatus.coding = create('Coding') as coding then {
                                val where(code = 'LA9041-0') -> coding.code =  'resolved' "code";
                                val where(code = 'LA18632-2') -> coding.code =  'inactive' "code";
                                val where(code = 'LA16666-2') -> coding.code =  'active' "code";
                                val -> coding.system = 'http://terminology.hl7.org/CodeSystem/condition-clinical' "system";
                                val.displayName as display-> coding.display= cast(display, 'string') "display";
                            }"coding";           
                            obsentry2.text as text then{
                                text.reference as reference -> clinicalstatus.text = (reference.value) "text";
                            }"text";
                        }"clinicalstatus";
                    }"clinicalStatus2";

                    obsentry2.code where code ='SEV' then{
                        obsentry2.value -> tgt.severity;
                    }"severity";
                }"observation";
                entryR2.act as act then{
                    act.text as text -> tgt.note as note then{
                        text.reference as reference -> note.text = (reference.value) "text";
                    }"note";
                }"act";
            }"entryR";
        }"EntryRelObsevation";
    } "entryR";
}

group FamilyMemberFunction(source src : organizer, target tgt : familyMember, target patient : patient){
    src -> tgt.patient = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "patReference";    
    src.id -> tgt.identifier; 
    src.statusCode -> tgt.status;
    src.effectiveTime as effectiveTime -> tgt.date = create('date') as value then TSDate(effectiveTime,value) "date";
    src.subject as subject then{
        subject.relatedSubject as relatedSubject then{
            relatedSubject.code -> tgt.relationship "relationship code";
            relatedSubject.subject as subject -> tgt.sex as sex then {
                subject.administrativeGenderCode as administrativeGenderCode -> sex.coding as coding then {
                    administrativeGenderCode.code as sexCode-> coding.code = translate(sexCode, '#cm-v3-administrative-gender', 'code') "gender";
                    administrativeGenderCode -> coding.system = 'http://hl7.org/fhir/administrative-gender' "system";
                    administrativeGenderCode.displayName as dn -> coding.display = dn;
                }"coding";
            }"subject";
        }"relatedSub";
    }"relationship";
    src.component as component -> tgt.condition as condition then{
        component.observation as observation then{
            observation.code -> condition.code "code";
            observation.text as text -> tgt.note as note then{
                text.reference as reference -> note.text = (reference.value) "value";
            }"reference";
            observation.statusCode -> tgt.status;
            //observation.effectiveTime as effectiveTime -> condition.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
            // observation.effectiveTime as effectiveTime -> condition.onset = create('Period') as value then{
            //     effectiveTime -> value.start = (effectiveTime.value) "va";
            // }"value";
            observation.value -> condition.outcome "codeable";
            observation.entryRelationship as entryR then{
                entryR.observation as obs then{
                    obs where (code.code ='35267-4') then{
                        obs.value as value -> condition.onset = create('Age') as Age then {
                            value.value as valueAge -> Age.value = valueAge "age";
                            value.unit as unit -> Age.code = unit "unit";
                            value.unit as unit -> Age.unit = unit "unit";
                            value -> Age.system = 'http://unitsofmeasure.org' "system";
                    } "value";
                }"insorgenza";
                    obs where (code.code ='39016-1') then{
                        obs.value as value -> tgt.deceased = create('Age') as Age then {
                            value.value as valueAge -> Age.value = valueAge "age";
                            value.unit as unit -> Age.code = unit "unit";
                            value.unit as unit -> Age.unit = unit "unit";
                            value -> Age.system = 'http://unitsofmeasure.org' "system";
                    } "value";
                }"death";
            }"obser";
            }"EntryRel";
        }"observation";
    }"component";
}

group Practitioner(source src : performer, target tgt: Encounter, target bundle: Bundle){
    src -> bundle.entry as e22, e22.request = create('BackboneElement') as request, request.method = 'PUT', e22.resource = create('Practitioner') as practitioner1 then{       
        src.assignedEntity as assignedEntity -> tgt.participant as participant then{

            src.time as time where (value.exists()) ->  participant.period = create('dateTime') as value then TSDateTime(time, value) "value1";
            src.time as time where (low.exists()) ->  participant.period = create('Period') as value then IVLTSPeriod(time, value) "valuePeriod";
            
            // src.time as time -> participant.period as period then{
            //     time -> period.start "start";
            // } "period"; 

            assignedEntity.id as id ->practitioner1.identifier as identifier then{
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext "ext";
                id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                id.root as r then {
                    id.extension as ext -> practitioner1.id = (r + '-' + ext) as uuid22,  e22.fullUrl = append('https://example/Practitioner/', uuid22), participant.individual = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner1.id) "id";
                }"r";
            }"identifier";
            assignedEntity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
            assignedEntity -> practitioner1.meta as meta then {
                src-> meta.tag = create('Coding') as coding then {
                    src -> coding.system ='http://algoritmodiscoring'"system";
                    src -> coding.code ='ClinicalDocument/body/VisiteRicoveri/performer/' "code";
                }"coding";
            }"meta";
            assignedEntity.addr -> practitioner1.address;      
            assignedEntity.telecom -> practitioner1.telecom;
            assignedEntity.assignedPerson as person then{
                person.name ->  practitioner1.name "name"; 
                person.birthTime -> practitioner1.birthDate;
            }"partname";
        }"participant";
    }"resurceCreation";
}

group CarePlanFunction(source src: entry, target tgt: CarePlan, target patient:Patient, target encounter: enc, target bundle: Bundle){
    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    
    src -> tgt.status ='unknown' "status";
    src -> tgt.intent = 'plan' "intent";
    src -> tgt.activity as activity then{  
        src -> activity.detail as detail then{
            src.observation as observation then{ 
                observation  then{
                    observation -> detail.status = 'unknown' "status";
                    observation -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', detail.reasonReference  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then Observation(observation, patient, encounter, obs1, bundle) "obs1";
                }"activity";
            }"entryObs";
    
            src.substanceAdministration as substanceAdministration -> tgt.activity as activity then{ 
                substanceAdministration -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('MedicationRequest') as medre1,  medre1.id = uuid() as uuid2,  e2.fullUrl = append('https://example/MedicationRequest/', uuid2), request.url = 'MedicationRequest', activity.reference = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medre1.id) then MedicationRequest(substanceAdministration, patient, encounter,medre1,bundle)"Terapie";
            }"entrySub";
    
            src.procedure as procedureC -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST',   e8.resource = create('Procedure') as procedure,  procedure.id = uuid() as uuid8,  e8.fullUrl = append('https://example/Procedure/', uuid8), request.url = 'Procedure' , activity.outcomeReference  = create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure.id) then Procedure(procedureC, patient, encounter, procedure, bundle) "proc";
            
            src.encounter as encounterCDA -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounterFHIR,  encounterFHIR.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3),request.url = 'Encounter', tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounterFHIR.id) then{
                
                encounterCDA -> encounterFHIR.partOf = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "encounterHeader";
                encounterCDA -> encounterFHIR.subject = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "ref Patient";

                encounterCDA.id -> encounterFHIR.identifier;
                encounterCDA.statusCode -> encounterFHIR.status;
                encounterCDA where statusCode.exists().not() -> encounterFHIR.status = 'unknown' "status";
                encounterCDA.code as code -> encounterFHIR.class as class then{
                    code.code as code -> class.code = cast(code, 'string');
                    code.codeSystem as system -> class.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                    code.displayName as display -> class.display = cast(display, 'string');
                }"class";
                encounterCDA.text as text -> encounterFHIR.type as type then {
                    text.reference as reference -> type.text = (reference.value) "value";
                }"text";

                encounterCDA.effectiveTime as effectiveTime -> encounterFHIR.period = create('Period') as period then{
                    effectiveTime -> period.start = create('dateTime') as start then TSDateTime(effectiveTime,start) "val";
                }"efft";

            }"viste";
            
            src.act as act then{                
                act.id -> tgt.identifier;
                act.code -> activity.outcomeCodeableConcept;
                act.text as text -> activity.progress = create('Annotation') as progress then{
                    text.reference as reference -> progress.text = (reference.value) "value";
                }"text";
                act.effectiveTime as effectiveTime -> detail.scheduled = create('Period') as period then{
                    effectiveTime -> period.start = create('dateTime') as start then TSDateTime(effectiveTime,start) "val";
                }"efft";
                act -> detail.status = 'completed' "status";
            } "act";
        }"detail";
    }"activity Ini";
}


group MedicationRequest(source src : substanceAdministration, target patient : Patient, target encounter: Encounter, target tgt: MedicationRequest, target bundle: Bundle){
    //default  + mandatory
    src -> tgt.subject = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    src -> tgt.encounter = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
    src -> tgt.intent = 'order' "intent";
    src where statusCode.exists().not() -> tgt.status = 'unknown' "st";
    src.statusCode as sc then {
        sc.code as cos-> tgt.status = translate(cos, '#MedicationStatusMap', 'code') "codeS";
    }"status";
    //
    
    src.id -> tgt.identifier;
    src.text as txt -> tgt.note as note then{
        txt.reference as reference -> note.text = (reference.value) "text";
    }"note";

    src.effectiveTime: IVL_TS as eff -> tgt.dosageInstruction = create('Dosage') as dosage then{
        eff -> dosage.timing = create('Timing') as timing then {
          eff -> timing.repeat as rep then {
            eff -> rep.bounds  = create('Period') as value then IVLTSPeriod(eff, value) "valuePeriod";
          }"rep";
        }"timing";
      }"period";

      src.effectiveTime: EIVL_TS as effe -> tgt.dosageInstruction = create('Dosage') as dosage then{
        effe -> dosage.timing = create('Timing') as timing then {
          effe -> timing.repeat as rep then {
            effe.eventCode as ev -> rep.when = (ev.code);
          }"rep";
        }"timing";
      }"period";

      src.effectiveTime: IVL_TS as eff -> tgt.dosageInstruction = create('Dosage') as dosage, dosage.timing = create('Timing') as timing, timing.event = (eff.value) "tim";

      src.effectiveTime: PIVL_TS as eff -> tgt.dosageInstruction = create('Dosage') as dosage then{
        eff -> dosage.timing = create('Timing') as timing then periodTiming(eff,timing) "cod";
      }"eff";
    
    src where (src.doseQuantity.exists() or src.rateQuantity.exists()) then{
        src ->  tgt.dosageInstruction = create('Dosage') as dosageInstruction then{
            src.doseQuantity as doseQuant then{
                doseQuant.originalText as ot then{
                    ot.reference -> dosageInstruction.text;
                }"ot";  
                doseQuant -> dosageInstruction.doseAndRate as dosageRate then{
                doseQuant -> dosageRate.dose = create('Range') as d then{
                doseQuant -> d.low = create('SimpleQuantity') as l then{
                    doseQuant.low as lo -> l.value = (lo.value); 
                    doseQuant.low as lo -> l.unit = (lo.unit); 
                }"low";
                doseQuant -> d.high = create('SimpleQuantity') as h then{
                    doseQuant.high as hi -> h.value = (hi.value);
                    doseQuant.high as hi -> h.unit = (hi.unit); 
                }"low";
                }"d";
            }"dosageRate";
        } "doseQuantity";
            src.rateQuantity as rateQuantity then{
                rateQuantity.originalText as ot then{
                    ot.reference -> dosageInstruction.text;
                }"ot";
                rateQuantity -> dosageInstruction.doseAndRate as dosageRate then{
                    rateQuantity -> dosageRate.rate = create('Range') as d then{
                        rateQuantity -> d.low = create('SimpleQuantity') as l then{
                            rateQuantity.low as lo -> l.value = (lo.value); 
                            rateQuantity.low as lo -> l.unit = (lo.unit); 
                        }"low";
                        rateQuantity -> d.high = create('SimpleQuantity') as h then{
                            rateQuantity.high as hi -> h.value = (hi.value);
                            rateQuantity.high as hi -> h.unit = (hi.unit); 
                        }"high";
                    }"r";
                }"dosageRate";

            }"rate";
        
        src.routeCode -> dosageInstruction.route "route";
        src.approachSiteCode -> dosageInstruction.site "site";
        src.targetSiteCode -> dosageInstruction.site "site";

        }"dosageIn";
    }"condition";

    src.consumable as consumable -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Medication/', uuid1), request.url = 'Medication', tgt.medication = create('Reference') as medref,  medref.reference = ('https://example/Medication/' + %medication.id) then Medication(src,medication,patient,bundle) "medication";       
    src.entryRelationship as entryRelationship then{
        entryRelationship.supply as supply -> tgt.dispenseRequest as dispenseRequest then{
            supply.quantity as quantityCDA -> dispenseRequest.quantity as quantityFHIR then{
                quantityCDA -> quantityFHIR.value = (quantityCDA.value) "value";
            }"quantity";
        }"supply";
    }"entryR";

    src.participant as participant then{
        participant then Practitioner(participant, tgt, bundle) "function"; 
        participant.effectiveTime -> tgt.authoredOn "autor"; 
    }"Partecipant";
}

group OrganizationAffiliation(source src: act, target patient: Patient, target enc: Encounter, target tgt: OrgAffiliation, target bundle: Bundle){
    
    src.id-> tgt.identifier;
    // src.code -> tgt.specialty as specialty then{
    //     src.entryRelationship as entryR then{
    //         entryR.text as text then{
    //             text.reference as reference -> specialty.text = (reference.value) "value";
    //         }"text";
    //     } "entryR";
    // } "specialty";
    src.statusCode where code = 'active' -> tgt.active = true;
    src.statusCode where(code = 'active').not() -> tgt.active = false;  
    src.effectiveTime as eff -> tgt.period;
    //src.code -> tgt.specialty;

            src -> tgt.specialty = create('CodeableConcept') as spec then{
                src.code as code   then{
                    code -> spec.coding = create('Coding') as cd then{
                        code -> cd.code = (code.code) "code";
                        code -> cd.display = (code.displayName) "code";
                        code.codeSystem as r -> cd.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    }"cd";
                }"spec";  

                src.entryRelationship as entry then{
                    entry.act as a then{
                        a.text as tx then{
                            tx.reference as reff -> spec.text = (reff.value);
                        }"ref";                    
                    }"act";
                }"entry";
            }"a";
}

group DiagnosticReportFunction(source src: organizer, target patient: Patient, target enc: Encounter, target tgt: DiagnosticReport, target bundle: Bundle){

    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference"; 
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 

    src.code -> tgt.code;
    src.statusCode where code = 'completed' -> tgt.status = 'final';
    src.effectiveTime as eff where (value.exists()) -> tgt.effective = create('dateTime') as value then TSDateTime(eff, value) "value1";
    src.effectiveTime as eff where (low.exists()) -> tgt.effective = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";

    src.component as component then{
        component.observation as observation -> bundle.entry as ei, ei.request = create('BackboneElement') as request, request.method = 'POST', ei.resource = create('Observation') as obsi,  obsi.id = uuid() as uuidi,  ei.fullUrl = append('https://example/Observation/', uuidi), request.url = 'Observation' ,tgt.result  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obsi.id) then Observation(observation, patient, enc, obsi, bundle) "hasMember";
    }"component";

}

group EncounterFunction(source src: cdaElement , target patient: Patient, target encounter: Encounter, target tgt: Encounter, target bundle: Bundle){
    src.id -> tgt.identifier;
    src.statusCode -> tgt.status;
    src where statusCode.exists().not() -> tgt.status = 'unknown' "status";
    src.code as code -> tgt.class as class then{
        code -> class.code = (code.code) "code";
        code -> class.display = (code.displayName) "display";
        code.codeSystem as r ->class.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
    }"co";

    // src.effectiveTime as effective -> tgt.period as period then{
    //     effective.low as l -> period.start = (l.value) "value";
    //     effective.high as h -> period.end = (h.value) "value";
    // }"eff";
    src where effectiveTime.low.exists() or effectiveTime.high.exists() then {
        src.effectiveTime as eff  -> tgt.period=create('Period') as period then IVLTSPeriod(eff,period);
        }"where";
        // effectiveTime = time-stamp
        src where effectiveTime.low.exists().not() or effectiveTime.high.exists().not() then {
        src.effectiveTime as effectivetime1 -> tgt.period = create('Period') as period then{
          effectivetime1 -> period.start =  create('dateTime') as start then TSDateTime(effectivetime1,start) "val"; 
        }"efft";
        }"where";
    // src.effectiveTime as eff where (value.exists()) -> tgt.period = create('dateTime') as value then TSDateTime(eff, value) "value1";
    // src.effectiveTime as eff where (low.exists()) -> tgt.period = create('Period') as value then IVLTSPeriod(eff, value) "valuePeriod";
    

    src.text as tx -> tgt.type as ty then{
        tx.reference as reff -> ty.text = (reff.value) "textType";
    }"text";
    src.performer as performer -> tgt.participant as part then{

        performer -> part.period as period then{
            performer.time as time ->  period.start as start then TSDateTime(time,start) "val"; 
        }"period";



        performer.assignedEntity as assentity -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',  e1.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e1.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url = 'PractitionerRole', tgt.participant = create('BackboneElement') as participant1, participant1.individual = create('Reference') as referencepart, referencepart.reference =  ('https://example/PractitionerRole/' + %practitionerRole.id) then{
            assentity.code -> practitionerRole.code;
        }"assignedEntity";
    }"performer";    
}
",
          "subType": "00"
        }
      }
    }
  ],
  "definitions": [],
  "valuesets": [],
  "template_id_root": "2.16.840.1.113883.2.9.10.1.4.1.1",
  "last_update_date": {
    "$date": {
      "$numberLong": "1677573439091"
    }
  },
  "version": "1.5",
  "root_map": "ProfiloSanitarioSinteticoBody",
  "deleted": false,
  "last_sync": {
    "$date": {
      "$numberLong": "1677573846774"
    }
  }
},{
  "_id": {
    "$oid": "63fdbd414afb2a4bc2c12be9"
  },
  "maps": [
    {
      "name_map": "RefertodiRadiologiaBody",
      "filename_map": "StructureMap_Referto di radiologia_v1.9.map",
      "content_map": {
        "$binary": {
          "base64": "map "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/RefertodiRadiologiaBody" = "RefertodiRadiologiaBody"

conceptmap "OBSstatus" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-statusCode"
    prefix t = "http://hl7.org/fhir/status.html"

    s:completed == t:final
    s:active == t:registered
    s:aborted == t:cancelled
    s:suspended == t:partial
  }
  conceptmap "cm-v3-administrative-gender" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-AdministrativeGender"
    prefix t = "http://hl7.org/fhir/ValueSet/administrative-gender"
  
    s:M == t:male
    s:F == t:female
  }
  conceptmap "AllergyTypeMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://hl7.org/fhir/Allergy-type.html"

    s:OINT == t:intolerance
    s:ALG == t:allergy
    s:DALG == t:allergy
    s:EALG == t:allergy
    s:FALG == t:allergy
    s:NAINT == t:intolerance
    s:FNAINT == t:intolerance
    s:DNAINT == t:intolerance
    s:ENAINT == t:intolerance
    s:FINT == t:intolerance
    s:DINT == t:intolerance
    s:EINT == t:intolerance
  }
  conceptmap "AllergyCategoryMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://hl7.org/fhir/Allergy-type.html"

    s:DALG == t:medication
    s:EALG == t:enviroment
    s:FALG == t:food
    s:FNAINT == t:intolerance
    s:DNAINT == t:medication
    s:ENAINT == t:enviroment
    s:FINT == t:food
    s:DINT == t:medication
    s:EINT == t:enviroment
  }

conceptmap "CricalityMap" {
    prefix s = "http://terminology.hl7.org/CodeSystem/v3-ObservationValue"
    prefix t = "http://hl7.org/fhir/allergy-intolerance-criticality"

    s: M == t: low
    s: H == t: high
    s: L == t: low
}

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/List" alias List as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL-PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target


imports "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes"
imports "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
    cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('https://example/Composition/', uuid1), request.url = 'Composition',  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Patient/', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3),request.url = 'Encounter', bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST',  e4.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid4,  e4.fullUrl = append('https://example/DocumentReference/', uuid4),request.url = 'DocumentReference' then {
    cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
    cda.recordTarget as recordTarget then{
        recordTarget.patientRole as patient then{
        patient.id as id -> patient.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext1 -> identifier.value = ext1 "value";
        id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
        }"idfr";
            patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7') or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17') or (root='2.16.840.1.113883.2.9.4.3.15') then {
                id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
            }"record";
        }"recPat";
    }"patient";
   } "ClinicalDocumentToBody";
  }
  
group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference : DocumentReference) {
    cda -> bundle.id = uuid() "id";
    cda.id -> bundle.identifier "identifier";
    cda -> bundle.type = 'transaction' "type";
    cda -> bundle.timestamp=(timestamp.now()) "date";
    cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";
    cda -> bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('DiagnosticReport') as diagnosticReport,  diagnosticReport.id = uuid() as uuid1,  e.fullUrl = append('https://example/DiagnosticReport/', uuid1), request.url = 'DiagnosticReport' then{
        cda.code -> diagnosticReport.code "diagnosticCode";
        cda -> diagnosticReport.status = 'registered' "stats";
    cda.component as component then {
      component.structuredBody as body then {
        body.component as component  then {
           component.section as srcSection then {
          srcSection.code -> composition.section as tgtSection  then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle,encounter, diagnosticReport);       
         } "section";
        } "component";
    }"body";
    };
    }"diagnostic";
  }
  
group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target dReport : DiagnosticReport) {
    src.title as t -> tgt.title = (t.dataString);
    src.code -> tgt.code;
    src -> tgt.entry = create('Reference') as reference,  reference.reference = ('https://example/DiagnosticReport/' + %dReport.id) "reference"; 
    src.entry as entry then{
        src.text as cdaText -> tgt.text as fhirText then {
            cdaText -> fhirText.status = 'generated' "narrativeStatus";
            cdaText as t -> fhirText.div = t "narrativeText";
        } "cdaText";
        entry then DiagnosticReportFunction(src, entry, dReport, bundle, enc, patient) "dreport";
    }"entry";
    src where src.entry.exists().not() then  DiagnosticReportFunction(src, cda, dReport, bundle, enc, patient) "narrative";
    src.component as component then {
        component.section as sec -> tgt.section as tgtSection then ClinicalDocumentSection(cda, sec, patient, tgtSection, bundle, enc, dReport);
    }"component";
}

group DiagnosticReportFunction(source section: section, source src: entry, target dReport: DiagnosticReport, target bundle: Bundle, target encounter : Encounter, target patient : Patient){
    src.act as act1 then{
        section where (code.code = '121181') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('ImagingStudy') as imageS,  imageS.id = uuid() as uuid1,  e1.fullUrl = append('https://example/ImagingStudy/', uuid1), request.url = 'ImagingStudy', dReport.imagingStudy = create('Reference') as reference,  reference.reference = ('https://example/ImagingStudy/' + %imageS.id) then ImagingStudy(act1,section, imageS,patient,encounter) "imagingStudy";
        section where (code.code = '48765-2') -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Observation/', uuid2), request.url = 'Observation'
        , dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then{ 
            section -> obs1.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
            section -> obs1.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";  
            section -> obs1.status = 'final' "STatusobse";
            section.code -> obs1.code;
            act1.statusCode as s then {
                s.code as cos-> obs1.status = translate(cos, '#OBSstatus', 'code') "codeS";
            }"status";
            section -> bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST', e4.resource = create('List') as list1,  list1.id = uuid() as uuid4,  e4.fullUrl = append('https://example/List/', uuid4), request.url = 'List', obs1.focus = create('Reference') as reference,  reference.reference = ('https://example/List/' + %list1.id) then{
                section -> list1.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
                section -> list1.status = 'current' "listatus";
                section -> list1.mode = 'working' "lstmod";
                section -> list1.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";  
                src -> list1.entry as entryList1 then{
                    act1 -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('AllergyIntolerance') as allergy,  allergy.id = uuid() as uuid5,  e5.fullUrl = append('https://example/AllergyIntolerance/', uuid5), request.url = 'AllergyIntolerance', entryList1.item = create('Reference') as reference,  reference.reference = ('https://example/AllergyIntolerance/' + %allergy.id) then allergyFunction(act1, allergy, patient,encounter) "allergy";
                }"item";
            }"list";
        }"allergyAct";
        section where (code.code = '55111-9') -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST', e3.resource = create('Observation') as obs2,  obs2.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Observation/', uuid3), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs2.id) then Observation(act1, patient, encounter, obs2, bundle) "observation";
    }"act";
    src.observation as entryobs then{
        section where (code.code = '11329-0') -> bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST', e6.resource = create('Observation') as obs6,  obs6.id = uuid() as uuid6,  e6.fullUrl = append('https://example/Observation/', uuid6), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs6.id) then {
            section -> obs6.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
            section -> obs6.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";  
            section -> obs6.status = 'final' "tatusobse";
            section.code -> obs6.code;
            entryobs -> bundle.entry as e7, e7.request = create('BackboneElement') as request, request.method = 'POST', e7.resource = create('Condition') as condition1,  condition1.id = uuid() as uuid7,  e7.fullUrl = append('https://example/Condition/', uuid7), request.url = 'Condition', obs6.focus = create('Reference') as reference,  reference.reference = ('https://example/Condition/' + %condition1.id) then ConditionFunction(entryobs,condition1, patient, encounter,bundle) "condition";
        }"observationstclinica";

        section where (code.code = '55114-3') -> bundle.entry as e9, e9.request = create('BackboneElement') as request, request.method = 'POST', e9.resource = create('Observation') as obs9,  obs9.id = uuid() as uuid9,  e9.fullUrl = append('https://example/Observation/', uuid9), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs9.id) then Observation(entryobs, patient, encounter, obs9, bundle) "precedenti esami";
        section where (code.code = '55109-3') -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('Observation') as obs8, obs8.id = uuid() as uuid8, e8.fullUrl = append('https://example/Observation/', uuid8), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs8.id) then Observation(entryobs, patient, encounter, obs8, bundle) "complicanze";
        section where (code.code = '18785-6') -> bundle.entry as e14, e14.request = create('BackboneElement') as request, request.method = 'POST', e14.resource = create('Observation') as obs14, obs14.id = uuid() as uuid14, e14.fullUrl = append('https://example/Observation/', uuid14), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs14.id) then Observation(entryobs, patient, encounter, obs14, bundle) "quesitoDiagnostico";
    } "entryObs";
    src.organizer as organizer then {
        src -> bundle.entry as e10, e10.request = create('BackboneElement') as request, request.method = 'POST', e10.resource = create('Observation') as obs10,  obs10.id = uuid() as uuid10,  e10.fullUrl = append('https://example/Observation/', uuid10), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs10.id) then{
            section -> obs10.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
            section -> obs10.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";  
            section -> obs10.status = 'final' "tatusobse";
            section.code -> obs10.code "codeObs"; 
            section -> bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'POST', e11.resource = create('List') as list11,  list11.id = uuid() as uuid11,  e11.fullUrl = append('https://example/List/', uuid11), request.url = 'List', obs10.focus = create('Reference') as reference,  reference.reference = ('https://example/List/' + %list11.id) then{
                section -> list11.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
                section -> list11.status = 'current' "liststat";
                section -> list11.mode = 'working' "listmd";
                section -> list11.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";  
                organizer -> list11.entry as entryList2 then{
                    organizer ->bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('FamilyMemberHistory') as familyMember, familyMember.id = uuid() as uuid12,  e12.fullUrl = append('https://example/FamilyMemberHistory/', uuid12), request.url = 'FamilyMemberHistory', entryList2.item = create('Reference') as reference, reference.reference = ('https://example/FamilyMemberHistory/' + %familyMember.id) then FamilyMemberFunction(organizer, familyMember, patient) "family";
                }"org";
            }"List";
        }"entryOrganizer";
    }"organizer";
    section where section.entry.exists().not() then {

        section where (code.code = '48765-2') -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Observation/', uuid2), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then{ 
            section-> obs1.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
            section -> obs1.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";  
            section -> obs1.status = 'final' "STatusobse";
            section.code -> obs1.code;
            section.statusCode as s then {
                s.code as cos-> obs1.status = translate(cos, '#OBSstatus', 'code') "codeS";
            }"status";
                    section.text as text  -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('AllergyIntolerance') as allergy,  allergy.id = uuid() as uuid5,  e5.fullUrl = append('https://example/AllergyIntolerance/', uuid5), request.url = 'AllergyIntolerance', obs1.focus = create('Reference') as reference,  reference.reference = ('https://example/AllergyIntolerance/' + %allergy.id) then {
                        section -> allergy.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
                        section -> allergy.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";                        
                        section -> allergy.clinicalStatus as clinicalStatus then{
                            section -> clinicalStatus.coding = create('Coding') as coding then{
                                section -> coding.code =  'active' "code";
                                section -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical' "system";                                
                            }"coding";
                        }"status";                        
                        text -> allergy.note as note then{
                            text as t-> note.text = create('string') as textNote then EDstring(t,textNote) "note";
                        } "narrative"; 
                    }"allergytext";
                
        }"allergyAct";

        section where (code.code = '55110-1').not() or (code.code = '11329-0').not() then{
            section.text as text -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'POST', e13.resource = create('Observation') as obs13,  obs13.id = uuid() as uuid13,  e13.fullUrl = append('https://example/Observation/', uuid13), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs13.id) then {
                section -> obs13.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
                section -> obs13.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";  
                section -> obs13.status = 'preliminary' "obsst";
                section.code -> obs13.code "obscde";
                section -> obs13.status = 'final' "statusS";
                text -> obs13.note as note then{
                    text as t-> note.text = create('string') as textNote then EDstring(t,textNote) "note";
                } "narrative";    
            }"txtsec";
          } "NonConclusion";
        section where(code.code = '55110-1') then {
            section.text as t -> dReport.conclusion = create('string')  as textConclusion then EDstring(t,textConclusion) "conc";
        }"conclusion";
    }"whereCond";
}

group Observation(source cda : observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {  
    cda->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
    cda->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference"; 
    cda.code -> ob.code;
    cda -> ob.status = 'final' "Stats";
    //value datatype
    cda.value:ST as st -> ob.value =create('string'),  ob.value= (st.dataString) "value";
    cda.value:BL as boolean ->ob.value=(boolean.value)"boolean";
    cda.value:INT as int->ob.value=(int.value) "value";
    cda.value:CE as val then{
        val->ob.value =create('CodeableConcept') as ce then {
        val.originalText as originalText then{
            originalText.reference as reference-> ce.text = (reference.value) "reference";
        }"originalText";
        val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        } "code";
        val.translation as translation -> ce.coding as coding then {
          translation.code as code -> coding.code = cast(code, 'string');
          translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          translation.displayName as display -> coding.display = cast(display, 'string');
          translation.qualifier as qualifier then{
            qualifier.value as value -> ce.coding as coding then {
              value.code as code -> coding.code = cast(code, 'string');
              value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
              value.displayName as display -> coding.display = cast(display, 'string');
              } "value";
            };
          } "translation";
        }"coding";
      }"val";
      cda.value:CD as val then{
        val->ob.value =create('CodeableConcept') as ce then {
        val.originalText as originalText then{
            originalText.reference as reference-> ce.text = (reference.value) "reference";
        }"originalText";
        val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        } "code";
        val.translation as translation -> ce.coding as coding then {
          translation.code as code -> coding.code = cast(code, 'string');
          translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          translation.displayName as display -> coding.display = cast(display, 'string');
          translation.qualifier as qualifier then{
            qualifier.value as value -> ce.coding as coding then {
              value.code as code -> coding.code = cast(code, 'string');
              value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
              value.displayName as display -> coding.display = cast(display, 'string');
              } "value";
            };
          } "translation";
        }"coding";
      }"val";
    cda.value:PQ as val then{
        val->ob.value = create('Quantity') as quantity then {
            val.value as value->quantity.value = value;
            val.unit as unit-> quantity.unit = unit "unit";
        }"quantity";
    }"valueQuantity";
    //
    cda.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
    cda.effectiveTime as effectiveTime where effectiveTime.low.exists() or effectiveTime.high.exists() then {
        cda.effectiveTime as eff -> ob.effective = create('Period') as period then IVLTSPeriod(effectiveTime,period) "value3";
        }"where";
    
    cda.text as text -> ob.note as note then{
        text.reference as reference -> note.text = (reference.value) "text";
    } "note";
    cda.statusCode as s then {
        s.code as cos-> ob.status = translate(cos, '#OBSstatus', 'code') "codeS";
    }"status";
}  

group ImagingStudy(source src: act, source section : section, target tgt : ImagingStudy, target patient: patient, target encounter : encounter){
    src.id -> tgt.identifier;
    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";  
    src -> tgt.status = 'available' "status";
    src.entryRelationship as entryRelationship then{
        entryRelationship.act as act -> tgt.series as series then{
            act.id as id -> series.uid = (id.root);
             section.code as code -> series.modality= create('Coding') as coding then {
                code.code as code1 -> coding.code = cast(code1, 'string');
                code.codeSystem as system->coding.system= translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                code.displayName as display->coding.display= cast(display, 'string');
                }"modality";
            act.entryRelationship as entryRelationship2 then{
                entryRelationship2.observation as obs -> series.instance as instance then{
                    obs.id as id -> instance.uid = (id.root) "root";
                    obs.code as code1-> instance.sopClass = create('Coding') as coding then {
                        code1.code as code -> coding.code = cast(code, 'string');
                         code1.codeSystem as system->coding.system= translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                        code1.displayName as display->coding.display= cast(display, 'string');
                       }"sopClass";
                } "idRoot";
            }"instance";
        } "series";
    } "entryRelationship";
}

group ConditionFunction (source src: cdaElement, target tgt: Condition, target patient : patient, target encounter : encounter, target bundle : Bundle) {
    src.code -> tgt.category;
    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference"; 
    src.statusCode as stscode -> tgt.verificationStatus as verifstatus then { 
        stscode as codeS -> verifstatus.coding = create('Coding') as coding then {
            codeS.code -> coding.code = 'confirmed' "code";
            codeS -> coding.system ='http://terminology.hl7.org/CodeSystem/condition-ver-status' "system";
            codeS -> coding.display= cast('Confirmed', 'string') "display";
    }"coding";    
    }"verifstatus";
    src where effectiveTime.low.exists() or effectiveTime.high.exists() then {
    src.effectiveTime as effectiveTime -> tgt.onset = create('Period') as period then IVLTSPeriod(effectiveTime, period) "valuePeriod";
    }"where";
    src.effectiveTime as effectiveTime -> tgt.onset = create('dateTime') as dateTime then TSDateTime(effectiveTime, dateTime) "value2";
    src.value -> tgt.code;
    src.entryRelationship as entryRelationship then{
        entryRelationship.observation as obsentry then{
            obsentry.code where code ='89261-2' then{
                obsentry -> tgt.evidence as evidence, bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as obsy,  obsy.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', evidence.detail = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obsy.id) then Observation(obsentry, patient, encounter, obsy, bundle) "observation";
            }"observation";
            obsentry.code where code = '33999-4' then{
                obsentry.value as value -> tgt.clinicalStatus as clinicalstatus then {
                    value as val -> clinicalstatus.coding = create('Coding') as coding then {
                        val where(code = 'LA9041-0') -> coding.code =  'resolved' "code";
                        val where(code = 'LA18632-2') -> coding.code =  'inactive' "code";
                        val where(code = 'LA16666-2') -> coding.code =  'active' "code";
                        val -> coding.system = 'http://terminology.hl7.org/CodeSystem/condition-clinical' "system";
                        val.displayName as display-> coding.display= cast(display, 'string') "display";
                    }"coding";           
                    obsentry.text as text then{
                        text.reference as reference -> clinicalstatus.text = (reference.value) "text";
                    }"text";
                }"clinicalstatus";
            }"clinicalStatus2";
        }"EntryRelObsevation";
        
    } "entryR";
}

group allergyFunction(source src: cdaElement, target tgt: AllergyIntolerance, target patient : patient, target encounter : encounter) {
    src -> tgt.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference"; 
    src.entryRelationship as entryRelationship1 then{
        entryRelationship1.observation as observation1 then{
            observation1 where effectiveTime.low.exists() or effectiveTime.high.exists() then {
            observation1.effectiveTime as effectiveTime -> tgt.onset = create('Period') as period then IVLTSPeriod(effectiveTime, period) "valuePeriod";
             }"where";
            observation1.effectiveTime as effectiveTime -> tgt.onset = create('dateTime') as dateTime then TSDateTime(effectiveTime, dateTime) "value2"; 
            
            observation1.value as code then{
                code.code as code1-> tgt.type = translate(code1,'#AllergyTypeMap','code') "type"; 
                code.code as code1 -> tgt.category = translate(code1,'#AllergyCategoryMap','code') "category";   
            }"code";
            observation1.participant as participant-> tgt.reaction as reaction then{
                observation1.entryRelationship as entryRelationship2 where (typeCode = 'MFST') then{
                    entryRelationship2.observation as observation2 then{
                        observation2.value -> reaction.manifestation "manifestation";
                        observation2.effectiveTime as effectiveTime then{
                            effectiveTime.low as low -> reaction.onset = create('dateTime') as value then TSDateTime(low, value) "valuePeriodLow";
                        }"low";
                    }"observ2";
                }"entryR2";
                participant.participantRole as participantRole then{
                    participantRole.playingEntity as playingEntity then{
                        playingEntity.code -> reaction.substance "reaction";
                    }"playingEntity";
                }"participantRole";
            }"participant";
            observation1.entryRelationship as entryRelationship2 where (typeCode = 'MFST') then{
                entryRelationship2.observation as observation2 where observation1.participant.exists().not() -> tgt.reaction as reaction then{
                    observation2.value -> reaction.manifestation "manifestation";
                    observation2.effectiveTime as effectiveTime then{
                        effectiveTime.low as low -> reaction.onset = create('dateTime') as value then TSDateTime(low, value) "valuePeriodLow";
                    }"low";
                }"observ2";
            }"entryR2";
            observation1.entryRelationship as entryRelationship3 where (typeCode = 'SUBJ') then{
                entryRelationship3.observation as observation3 then{
                    //criticality
                    observation3.value as value then{
                        value.code as c-> tgt.criticality = translate(c,'#CricalityMap','code') "value";
                    }"criticality"; 
                }"observ3";
                entryRelationship3.act as act -> tgt.note as note then{
                    act.text as text then{
                        text.reference as reference -> note.text = (reference.value);
                    }"note";
                }"act";
            }"entryR3";
            observation1.entryRelationship as entryRelationship4 where (typeCode = 'REFR') then{
                entryRelationship4.observation as observation4  then{
                    //observation4.value -> tgt.clinicalStatus;
                    observation4.value as value -> tgt.clinicalStatus as clinicalStatus then{
                        value as valu -> clinicalStatus.coding = create('Coding') as coding then{
                            valu where(code = 'LA9041-0') -> coding.code =  'resolved' "code";
                            valu where(code = 'LA18632-2') -> coding.code =  'inactive' "code";
                            valu where(code = 'LA16666-2') -> coding.code =  'active' "code";
                            valu -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical' "system";
                            valu.displayName as display-> coding.display= cast(display, 'string') "display";
                        }"coding";
                    }"clinicalStatus";
                }"observ4";
            }"entryR4";
        }"observation";
    }"entryrelationship";
}


group FamilyMemberFunction(source src : organizer, target tgt : familyMember, target patient : patient){
    src -> tgt.patient = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "patReference";    
    src.statusCode -> tgt.status;
    src.effectiveTime as effectiveTime -> tgt.date = create('dateTime') as value then TSDateTime(effectiveTime,value) "date";
    src.subject as subject then{
        subject.relatedSubject as relatedSubject then{
            relatedSubject.code -> tgt.relationship "relationship code";
            relatedSubject.subject as subject -> tgt.sex as sex then {
                subject.administrativeGenderCode as administrativeGenderCode -> sex.coding as coding then {
                    administrativeGenderCode.code as sexCode-> coding.code = translate(sexCode, '#cm-v3-administrative-gender', 'code') "gender";
                    administrativeGenderCode.system -> coding.system = 'http://hl7.org/fhir/administrative-gender' "system";
                }"coding";
            }"subject";
        }"relatedSub";
    }"relationship";
    src.component as component -> tgt.condition as condition then{
        component.observation as observation then{
            observation.code -> condition.code "code";
            observation.text as text -> tgt.note as note then{
                text.reference as reference -> note.text = (reference.value) "value";
            }"reference";
            observation.statusCode -> tgt.status;
            observation where observation.effectiveTime.exists() then {
                observation.effectiveTime as effectiveTime -> tgt.condition = create('BackboneElement') as condition then {
                    observation.code -> condition.code "code";
                    observation.value -> condition.outcome "codeable"; 
                    effectiveTime -> condition.onset = create('Period') as period then{
                        effectiveTime -> period.start =  create('dateTime') as start then TSDateTime(effectiveTime,start) "val"; 
                    }"efft";
                }"effttemp";
            }"cont";
            observation.value -> condition.outcome "codeable";
            observation.entryRelationship as entryR then{
                entryR.observation as obs then{
                    obs where (code.code ='35267-4') then{
                        obs.value as value -> condition.onset = create('Age') as Age then {
                            value.value as valueAge -> Age.value = valueAge "age";
                            value.unit as unit -> Age.code = unit "unit";
                            value.unit as unit -> Age.unit = unit "unit";
                            value -> Age.system = 'http://unitsofmeasure.org' "system";
                    } "value";
                }"insorgenza";
                    obs where (code.code ='39016-1') then{
                        obs.value as value -> tgt.deceased = create('Age') as Age then {
                            value.value as valueAge -> Age.value = valueAge "age";
                            value.unit as unit -> Age.code = unit "unit";
                            value.unit as unit -> Age.unit = unit "unit";
                            value -> Age.system = 'http://unitsofmeasure.org' "system";
                    } "value";
                }"death";
            }"obser";
            }"EntryRel";
        }"observation";
    }"component";
}",
          "subType": "00"
        }
      }
    }
  ],
  "definitions": [],
  "valuesets": [],
  "template_id_root": "2.16.840.1.113883.2.9.10.1.7.1",
  "last_update_date": {
    "$date": {
      "$numberLong": "1677573441216"
    }
  },
  "version": "1.9",
  "root_map": "RefertodiRadiologiaBody",
  "deleted": false,
  "last_sync": {
    "$date": {
      "$numberLong": "1677573846774"
    }
  }
},{
  "_id": {
    "$oid": "63fdbd424afb2a4bc2c12bea"
  },
  "maps": [
    {
      "name_map": "RefertodiSpecialisticaAmbulatorialeBody",
      "filename_map": "Referto di specialistica_v2.5.map",
      "content_map": {
        "$binary": {
          "base64": "map "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/RefertodiSpecialisticaAmbulatorialeBody" = "RefertodiSpecialisticaAmbulatorialeBody"

conceptmap "OBSstatus" {
prefix s = "http://terminology.hl7.org/ValueSet/v3-statusCode"
prefix t = "http://hl7.org/fhir/status.html"

s:completed == t:final
s:active == t:registered
s:aborted == t:cancelled
s:suspended == t:partial
}
conceptmap "MedicationStatusMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-statusCode"
    prefix t = "http://hl7.org/fhir/CodeSystem/medicationrequest-status"
    
    s:completed == t:completed
    s:active == t:active
    s:aborted == t:cancelled
    s:suspended == t:"on-hold"
    }
conceptmap "cm-v3-administrative-gender" {
prefix s = "http://terminology.hl7.org/ValueSet/v3-AdministrativeGender"
prefix t = "http://hl7.org/fhir/ValueSet/administrative-gender"

s:M == t:male
s:F == t:female
}

conceptmap "AllergyTypeMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://hl7.org/fhir/Allergy-type.html"

    s:OINT == t:intolerance
    s:ALG == t:allergy
    s:DALG == t:allergy
    s:EALG == t:allergy
    s:FALG == t:allergy
    s:NAINT == t:intolerance
    s:FNAINT == t:intolerance
    s:DNAINT == t:intolerance
    s:ENAINT == t:intolerance
    s:FINT == t:intolerance
    s:DINT == t:intolerance
    s:EINT == t:intolerance
  }
  conceptmap "AllergyCategoryMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://hl7.org/fhir/Allergy-type.html"

    s:DALG == t:medication
    s:EALG == t:enviroment
    s:FALG == t:food
    s:FNAINT == t:intolerance
    s:DNAINT == t:medication
    s:ENAINT == t:enviroment
    s:FINT == t:food
    s:DINT == t:medication
    s:EINT == t:enviroment
  }

conceptmap "CricalityMap" {
    prefix s = "http://terminology.hl7.org/CodeSystem/v3-ObservationValue"
    prefix t = "http://hl7.org/fhir/allergy-intolerance-criticality"

    s: M == t: low
    s: H == t: high
    s: L == t: low
}


conceptmap "ClinicalStatusMap" {
    prefix s = "https://loinc.org/99493-9/"
    prefix t = "http://terminology.hl7.org/CodeSystem/condition-clinical"

    s: "LA16666-2" == t: active
    s: "LA18632-2" == t: inactive
    s: "LA9041-0" == t: resolved
}

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/List" alias List as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL-PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target


imports "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes"
imports "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
    cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('https://example/Composition/', uuid1), request.url = 'Composition',  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Patient/', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3), request.url = 'Encounter', bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST',  e4.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid4,  e4.fullUrl = append('https://example/DocumentReference/', uuid4),request.url = 'DocumentReference' then {
    cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
    cda.recordTarget as recordTarget then{
        recordTarget.patientRole as patient then{
        patient.id as id -> patient.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext1 -> identifier.value = ext1 "value";
        id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
        }"idfr";
            patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7') or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17') or (root='2.16.840.1.113883.2.9.4.3.15') then {
                id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
            }"record";
        }"recPat";
    }"patient";
    } "ClinicalDocumentToBody";
}


group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference : DocumentReference) {
    cda -> bundle.id = uuid() "id";
    cda.id -> bundle.identifier "identifier";
    cda -> bundle.type = 'transaction' "type";
    cda -> bundle.timestamp=(timestamp.now()) "date";
    cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";
    cda -> bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('DiagnosticReport') as diagnosticReport,  diagnosticReport.id = uuid() as uuid1,  e.fullUrl = append('https://example/DiagnosticReport/', uuid1), request.url = 'DiagnosticReport' then{
        cda.code -> diagnosticReport.code "diagnosticCode";
        cda -> diagnosticReport.status = 'registered' "stats";
    cda.component as component then {
    component.structuredBody as body then {
        body.component as component  then {
            component.section as srcSection then {
        srcSection.code -> composition.section as tgtSection  then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle,encounter, diagnosticReport);       
        } "section";
        } "component";
    }"body";
    };
    }"diagnostic";
}

group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target dReport : DiagnosticReport) {
    src.title as t -> tgt.title = (t.dataString);
    src.code -> tgt.code;
    src -> tgt.entry = create('Reference') as reference,  reference.reference = ('https://example/DiagnosticReport/' + %dReport.id) "reference"; 
    src.entry as entry then{
        src.text as cdaText -> tgt.text as fhirText then {
            cdaText -> fhirText.status = 'generated' "narrativeStatus";
            cdaText as t -> fhirText.div = t "narrativeText";
        } "cdaText";
        entry then DiagnosticReportFunction(src, entry, dReport, bundle, enc, patient) "dreport";
    }"entry";
    src where src.entry.exists().not() then  DiagnosticReportFunction(src, cda, dReport, bundle, enc, patient) "narrative";
    src.component as component then {
        component.section as sec -> tgt.section as tgtSection then ClinicalDocumentSection(cda, sec, patient, tgtSection, bundle, enc, dReport);
    }"component";
}

group DiagnosticReportFunction(source section: section, source src: entry, target dReport: DiagnosticReport, target bundle: Bundle, target encounter : Encounter, target patient : Patient){
    src.observation as observation then{
        section where code.code ='29299-5' -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then Observation(observation, patient, encounter, obs1, bundle) "Quesito Diagnostico";
        section where code.code = '11329-0' -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Observation') as obs2,  obs2.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Observation/', uuid2), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs2.id) then {
            section -> obs2.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
            section -> obs2.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";  
            section -> obs2.status = 'final' "STatusobse";
            section.code -> obs2.code;
            observation.statusCode as s then {
                s.code as cos-> obs2.status = translate(cos, '#OBSstatus', 'code') "codeS";
            }"status";
            section.component as component then{
                component.section as section then{
                    section.code where code = '10160-0' then{
                        section.entry as entry then{
                            entry.substanceAdministration as subAdmin -> bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'POST', e11.resource = create('MedicationStatement') as medicationstatement,  medicationstatement.id = uuid() as uuid11,  e11.fullUrl = append('https://example/MedicationStatement/', uuid11), request.url = 'MedicationStatement', obs2.partOf = create('Reference') as reference,  reference.reference = ('https://example/MedicationStatement/' + %medicationstatement.id) then MedicationStatement(subAdmin, medicationstatement, patient, encounter, bundle) "creat";
                        }"entry";
                    }"sectionCode";
                    section.code where code = '48765-2' then{
                        section -> bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST', e4.resource = create('List') as list1,  list1.id = uuid() as uuid4,  e4.fullUrl = append('https://example/List/', uuid4), request.url = 'List', obs2.focus = create('Reference') as reference,  reference.reference = ('https://example/List/' + %list1.id) then{
                            section -> list1.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
                            section -> list1.status = 'current' "listatus";
                            section -> list1.mode = 'working' "lstmod";
                            section -> list1.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";  
                            section -> list1.entry as entryList1 then{
                                section.entry as entry then{
                                    entry.act as act1 -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('AllergyIntolerance') as allergy,  allergy.id = uuid() as uuid5,  e5.fullUrl = append('https://example/AllergyIntolerance/', uuid5), request.url = 'AllergyIntolerance', entryList1.item = create('Reference') as reference,  reference.reference = ('https://example/AllergyIntolerance/' + %allergy.id) then allergyFunction(act1, allergy, patient,encounter) "allergy";
                                }"entryAll";
                            }"entryList";
                        }"section";
                    }"conditionAllergie";
                }"section";
            } "subSection";
            section.entry as entry then{
                entry.observation -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST', e3.resource = create('Condition') as condition,  condition.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Condition/', uuid3), request.url = 'Condition', obs2.focus = create('Reference') as reference,  reference.reference = ('https://example/Condition/' + %condition.id) then ConditionFunction(observation ,condition, patient, encounter, bundle) "condition";        
                entry.organizer as organizer then {
                    section -> bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'POST', e11.resource = create('List') as list11,  list11.id = uuid() as uuid11,  e11.fullUrl = append('https://example/List/', uuid11), request.url = 'List', obs2.focus = create('Reference') as reference,  reference.reference = ('https://example/List/' + %list11.id) then{
                        section -> list11.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
                        section -> list11.status = 'current' "liststat";
                        section -> list11.mode = 'working' "listmd";
                        section -> list11.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";  
                        organizer -> list11.entry as entryList2 then{
                            organizer ->bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('FamilyMemberHistory') as familyMember, familyMember.id = uuid() as uuid12,  e12.fullUrl = append('https://example/FamilyMemberHistory/', uuid12), request.url = 'FamilyMemberHistory', entryList2.item = create('Reference') as reference, reference.reference = ('https://example/FamilyMemberHistory/' + %familyMember.id) then FamilyMemberFunction(organizer, familyMember, patient) "family";
                        }"org";
                    }"List";
                }"organizer";
            }"entry";
        }"StoriaClinica1";
        section where code.code = '30954-2' -> bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST', e4.resource = create('Observation') as obs4,  obs4.id = uuid() as uuid4,  e4.fullUrl = append('https://example/Observation/', uuid4), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs4.id) then Observation(observation, patient, encounter, obs4, bundle) "Precedenti Esami Eseguiti";
        section where code.code = '29548-5' ->  bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('Observation') as obs5,  obs5.id = uuid() as uuid5,  e5.fullUrl = append('https://example/Observation/', uuid5), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs5.id) then Observation(observation, patient, encounter, obs5, bundle) "Diagnosi";
    }"entryObs";

    src.act as act then{
        section where code.code ='62387-6' -> dReport.encounter = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) then {
            act.code -> encounter.type "type";
            act.effectiveTime as effectiveTime -> encounter.period as period then{
                effectiveTime -> period.start  = create('dateTime') as start then TSDateTime(effectiveTime,start) "val";
            }"period";
            act ->  bundle.entry as e10, e10.request = create('BackboneElement') as request, request.method = 'POST', e10.resource = create('Procedure') as procedureRes,  procedureRes.id = uuid() as uuid10,  e10.fullUrl = append('https://example/Procedure/', uuid10), request.url = 'Procedure', encounter.reasonReference = create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedureRes.id) then{
                act -> procedureRes.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
                act -> procedureRes.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
                act.statusCode -> procedureRes.status "status1";
                act where statusCode.exists().not() ->procedureRes.status = 'unknown' "status2";
                act.entryRelationship as entryRel then{
                    entryRel.procedure as proc-> bundle.entry as e9, e9.request = create('BackboneElement') as request, request.method = 'POST', e9.resource = create('Procedure') as procedure2,  procedure2.id = uuid() as uuid9,  e9.fullUrl = append('https://example/Procedure/', uuid9), request.url = 'Procedure', procedureRes.partOf = create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure2.id) then Procedure(proc, patient, encounter, procedure2, bundle) "procedure Prestazioni";
                    entryRel.substanceAdministration as subAdmin -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('MedicationAdministration') as medAdmin,  medAdmin.id = uuid() as uuid8,  e8.fullUrl = append('https://example/MedicationAdministration/', uuid8), request.url = 'MedicationAdministration', procedureRes.partOf = create('Reference') as reference,  reference.reference = ('https://example/MedicationAdministration/' + %medAdmin.id) then MedicationAdministration(subAdmin, patient, encounter, medAdmin, bundle) "farmac Prestazioni";
                    entryRel.observation as entryRobs -> bundle.entry as e7, e7.request = create('BackboneElement') as request, request.method = 'POST', e7.resource = create('Observation') as obs7,  obs7.id = uuid() as uuid7,  e7.fullUrl = append('https://example/Observation/', uuid7), request.url = 'Observation', procedureRes.partOf = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs7.id) then ObservationPrest(entryRobs, patient, encounter, obs7, bundle) "osservazioni Prestazioni";
                    entryRel.act as act2 -> bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST', e6.resource = create('Procedure') as procedure3,  procedure3.id = uuid() as uuid6,  e6.fullUrl = append('https://example/Procedure/', uuid6), request.url = 'Procedure', procedureRes.partOf = create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure3.id) then Procedure(act2, patient, encounter, procedure3, bundle) "procedure generiche Prestazioni";
                }"Relationship";
            } "procedura Madre";
        }"Prestazioni";
        section where code.code ='80615-8' -> bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('Observation') as obs12,  obs12.id = uuid() as uuid12,  e12.fullUrl = append('https://example/Observation/', uuid12), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs12.id) then Observation(act, patient, encounter, obs12, bundle) "Follow up";
    
    }"entryAct";

    //src.substanceAdministration
    src.substanceAdministration as substanceadmin then{
        section where code.code ='93341-6' -> bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST', e6.resource = create('MedicationRequest') as medre1,  medre1.id = uuid() as uuid6,  e6.fullUrl = append('https://example/MedicationRequest/', uuid6), request.url = 'MedicationRequest', dReport.basedOn = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medre1.id) then MedicationRequest(substanceadmin, patient, encounter,medre1,bundle)"Terapia farmacologica consigliata";
    }"substanceadmin";

    section where section.entry.exists().not() then {


        section where (code.code = '48765-2') -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Observation/', uuid2), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then{ 
            section-> obs1.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
            section -> obs1.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";  
            section -> obs1.status = 'final' "STatusobse";
            section.code -> obs1.code;
            section.statusCode as s then {
                s.code as cos-> obs1.status = translate(cos, '#OBSstatus', 'code') "codeS";
            }"status";
                section.text as text  -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('AllergyIntolerance') as allergy,  allergy.id = uuid() as uuid5,  e5.fullUrl = append('https://example/AllergyIntolerance/', uuid5), request.url = 'AllergyIntolerance', obs1.focus = create('Reference') as reference,  reference.reference = ('https://example/AllergyIntolerance/' + %allergy.id) then {
                    section -> allergy.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
                    section -> allergy.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";                        
                    section -> allergy.clinicalStatus as clinicalStatus then{
                        section -> clinicalStatus.coding = create('Coding') as coding then{
                            section -> coding.code =  'active' "code";
                            section -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical' "system";                                
                        }"coding";
                    }"status";                        
                    text -> allergy.note as note then{
                        text as t-> note.text = create('string') as textNote then EDstring(t,textNote) "note";
                    } "narrative"; 
                }"allergytext";
        }"allergyAct";



        section where (code.code = '93341-6') then{
            section.text as text -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'POST', e13.resource = create('MedicationRequest') as obs13,  obs13.id = uuid() as uuid13,  e13.fullUrl = append('https://example/MedicationRequest/', uuid13), request.url = 'MedicationRequest', dReport.basedOn = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %obs13.id) then {
                section -> obs13.subject = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
                section -> obs13.encounter = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
                section -> obs13.intent = 'order' "intent";
                section where statusCode.exists().not() -> obs13.status = 'unknown' "st";
                text -> obs13.note as note then{
                    text as t-> note.text = create('string') as textNote then EDstring(t,textNote) "note";
                }"note";   
                
                section -> obs13.medication = create('CodeableConcept') as code then{
                    section -> code.text = 'string' "string";                     
                }"code";
                
            }"txtsec";
        }"MedicationRequest";

        section where (code.code = '55110-1').not() and (code.code = '93341-6').not() and (code.code = '48765-2').not() then{
                section.text as text -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'POST', e13.resource = create('Observation') as obs13,  obs13.id = uuid() as uuid13,  e13.fullUrl = append('https://example/Observation/', uuid13), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs13.id) then {
                    section -> obs13.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
                    section -> obs13.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";  
                    section -> obs13.status = 'preliminary' "obsst";
                    section.code -> obs13.code "obscde";
                    section -> obs13.status = 'final' "statusS";
                    text -> obs13.note as note then{
                        text as t-> note.text = create('string') as textNote then EDstring(t,textNote) "note";
                    } "narrative";    
                }"txtsec";
          } "NonConclusion";
        section where(code.code = '55110-1') then {
            section.text as t -> dReport.conclusion = create('string')  as textConclusion then EDstring(t,textConclusion) "conc";
        }"conclusion";
    }"whereCond";
}

group Observation(source cda : observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {  
    cda->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    cda->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference"; 
    cda.code -> ob.code;
    cda -> ob.status = 'final' "Stats";
    //value datatype
    cda.value:INT as int->ob.value=(int.value) "value";
    cda.value:ST as st -> ob.value =create('string'),  ob.value= (st.dataString) "value";
    cda.value:BL as boolean ->ob.value=(boolean.value)"boolean";
    cda.value:CE as val then{
        val->ob.value =create('CodeableConcept') as ce then {
        val.originalText as originalText then{
            originalText.reference as reference-> ce.text = (reference.value) "reference";
        }"originalText";
        val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        } "code";
        val.translation as translation -> ce.coding as coding then {
          translation.code as code -> coding.code = cast(code, 'string');
          translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          translation.displayName as display -> coding.display = cast(display, 'string');
          translation.qualifier as qualifier then{
            qualifier.value as value -> ce.coding as coding then {
              value.code as code -> coding.code = cast(code, 'string');
              value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
              value.displayName as display -> coding.display = cast(display, 'string');
              } "value";
            };
          } "translation";
        }"coding";
      }"val";
      cda.value:CD as val then{
        val->ob.value =create('CodeableConcept') as ce then {
        val.originalText as originalText then{
            originalText.reference as reference-> ce.text = (reference.value) "reference";
        }"originalText";
        val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        } "code";
        val.translation as translation -> ce.coding as coding then {
          translation.code as code -> coding.code = cast(code, 'string');
          translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          translation.displayName as display -> coding.display = cast(display, 'string');
          translation.qualifier as qualifier then{
            qualifier.value as value -> ce.coding as coding then {
              value.code as code -> coding.code = cast(code, 'string');
              value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
              value.displayName as display -> coding.display = cast(display, 'string');
              } "value";
            };
          } "translation";
        }"coding";
      }"val";
    cda.value:PQ as val then{
        val->ob.value = create('Quantity') as quantity then {
            val.value as value->quantity.value = value;
            val.unit as unit-> quantity.unit = unit "unit";
        }"quantity";
    }"valueQuantity";
    //
    cda.effectiveTime as effectiveTime where (value.exists()) -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
    cda.effectiveTime as effectiveTime where (low.exists()) -> ob.effective = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
    cda.text as text -> ob.note as note then{
        text.reference as reference -> note.text = (reference.value) "text";
    } "note";
    cda.statusCode as s then {
        s.code as cos-> ob.status = translate(cos, '#OBSstatus', 'code') "codeS";
    }"status";
}  


group ConditionFunction (source src: cdaElement, target tgt: Condition, target patient : patient, target encounter : encounter, target bundle : Bundle) {
    src.code -> tgt.category;
    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference"; 
    src.statusCode as stscode -> tgt.verificationStatus as verifstatus then { 
        stscode as codeS -> verifstatus.coding = create('Coding') as coding then {
            codeS.code -> coding.code = 'confirmed' "code";
            codeS -> coding.system ='http://terminology.hl7.org/CodeSystem/condition-ver-status' "system";
            codeS -> coding.display= cast('Confirmed', 'string') "display";
    }"coding";    
    }"verifstatus";
    src.effectiveTime as effectiveTime -> tgt.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
    src.value -> tgt.code;
    src.entryRelationship as entryRelationship then{
        entryRelationship.observation as obsentry then{
            obsentry.code where code ='89261-2' then{
                obsentry -> tgt.evidence as evidence, bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as obsy,  obsy.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', evidence.detail = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obsy.id) then Observation(obsentry, patient, encounter, obsy, bundle) "observation";
            }"observation";

            obsentry.code where code = '33999-4' then{
                obsentry.value as value -> tgt.clinicalStatus as clinicalstatus then {
                    value as val -> clinicalstatus.coding = create('Coding') as coding then {
                        val where(code = 'LA9041-0') -> coding.code =  'resolved' "code";
                        val where(code = 'LA18632-2') -> coding.code =  'inactive' "code";
                        val where(code = 'LA16666-2') -> coding.code =  'active' "code";
                        val -> coding.system = 'http://terminology.hl7.org/CodeSystem/condition-clinical' "system";
                        val.displayName as display-> coding.display= cast(display, 'string') "display";
                    }"coding";           
                    obsentry.text as text then{
                        text.reference as reference -> clinicalstatus.text = (reference.value) "text";
                    }"text";
                }"clinicalstatus";
            }"clinicalStatus2";
            
        }"EntryRelObsevation";
    } "entryR";
}

group Procedure(source src : procedure, target patient : Patient, target encounter: Encounter, target tgt: Procedure, target bundle: Bundle){
    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
    src.statusCode -> tgt.status "status1";
    src where statusCode.exists().not() ->tgt.status = 'unknown' "status2";
    src.id -> tgt.identifier "id";
    src.code -> tgt.code;
    src.effectiveTime as effectiveTime where (value.exists()) -> tgt.performed = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
    src.effectiveTime as effectiveTime where (low.exists()) -> tgt.performed = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";

    src.methodCode as methodCode -> tgt.extension as ext1 then ITMethodExt(methodCode, ext1);
    
    src.participant as participant then{
        participant.participantRole as participantRole -> tgt.performer as performer then{
            participantRole.playingDevice as device -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Device') as deviceRes,  deviceRes.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Device/', uuid2), request.url = 'Device', performer.actor = create('Reference') as reference,  reference.reference = ('https://example/Device/' + %deviceRes.id) then{
                device.manufacturerModelName as manufacturerModelName then{
                    manufacturerModelName.displayName as displayName -> deviceRes.manufacturer =cast(displayName,'string') "manuf";
                }"manufacturer";
                device.code -> deviceRes.type "code";
            }"device";
        }"participantRole";
    }"participant";

    src.entryRelationship as entryR then{
        entryR.observation as observation -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST', e3.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Observation/', uuid3), request.url = 'Observation', tgt.partOf = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then Observation(observation, patient, encounter, obs1, bundle) "Parametri";
        entryR.act as act then{
            act.text as text -> tgt.note as note then{
                text.reference as reference -> note.text = (reference.value) "text";
            }"note";
        }"act"; 
    }"entryRel Procedure";
}

group ITMethodExt(source src, target ext) {
    src -> ext.url = 'http://hl7.org/fhir/StructureDefinition/procedure-method' "url";
    src -> ext.value = create('CodeableConcept') as value then CECodeableConcept(src, value) "value";
}

group MedicationAdministration(source src : substanceAdministration, target patient : Patient, target encounter: Encounter, target tgt: MedicationAdministration, target bundle: Bundle){
    
    src -> tgt.subject = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    src -> tgt.context = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
    
    src.statusCode -> tgt.status "status1";
    src where statusCode.exists().not() ->tgt.status = 'unknown' "status2";
    src.id -> tgt.identifier "id";
    src.effectiveTime as effectiveTime where (value.exists()) -> tgt.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
    src.effectiveTime as effectiveTime where (low.exists()) -> tgt.effective = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
    
    src -> tgt.dosage as dosage then{
        src.routeCode -> dosage.route "route";
        src.repeatNumber as repeatNumber -> dosage.rate = create('SimpleQuantity') as value then PQQuantity(repeatNumber,value) "repQ";
        src.approachSiteCode -> dosage.site "site";
        src.targetSiteCode -> dosage.site "site";
    }"dosage";

    src.consumable as consumable -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Medication/', uuid1), request.url = 'Medication', tgt.medication = create('Reference') as medref,  medref.reference = ('https://example/Medication/' + %medication.id) then Medication(src,medication,patient,bundle) "medication";
    
    src.participant as participant then{
        participant.participantRole as participantRole -> tgt.performer as performer then{
            participantRole.device as device -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Device') as deviceRes,  deviceRes.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Device/', uuid2), request.url = 'Device', performer.actor = create('Reference') as reference,  reference.reference = ('https://example/Device/' + %deviceRes.id) then{
                device.ManufacturerModelName as ManufacturerModelName then{
                    ManufacturerModelName.code -> deviceRes.manufacturer "manuf";
                }"manufacturer";
        }"device";
        }"participantRole";
    }"participant";

    src.entryRelationship as entryR then{
        entryR.observation as observation -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST', e3.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Observation/', uuid3), request.url = 'Observation', tgt.partOf = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then Observation(observation, patient, encounter, obs1, bundle) "Parametri";
        entryR.act as act then {
            act.text as text -> tgt.note as note then{
                text.reference as reference -> note.text = (reference.value) "text";
            }"note";
        }"act"; 
    }"entryRel Medication";

    src where (src.doseQuantity.exists() or src.rateQuantity.exists()) ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationRequest') as medicationRq,  medicationRq.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationRequest/', uuid1), request.url = 'MedicationRequest',tgt.request  = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medicationRq.id) then MedicationRequest(src, patient, encounter,medicationRq,bundle) "medRequ";

    src.text as text -> tgt.note as note then{
        text -> note.text "text";
    }"note";
}

group ObservationPrest(source src : observation, target patient : Patient, target encounter : Encounter, target tgt : Observation, target bundle : Bundle) {  
    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
    
    src.statusCode as s then {
        s.code as cos-> tgt.status = translate(cos, '#OBSstatus', 'code') "codeS";
    }"status";
    
    src.id -> tgt.identifier "id";
    src.code -> tgt.code "code";
    src.effectiveTime as effectiveTime where (value.exists()) -> tgt.perfomed = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
    src.effectiveTime as effectiveTime where (low.exists()) -> tgt.perfomed = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";

    src.methodCode -> tgt.method;

    src.participant as participant then{
        participant.participantRole as participantRole then{
            participantRole.device as device -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Device') as deviceRes,  deviceRes.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Device/', uuid2), request.url = 'Device', tgt.device = create('Reference') as reference,  reference.reference = ('https://example/Device/' + %deviceRes.id) then{
                device.ManufacturerModelName as ManufacturerModelName then{
                    ManufacturerModelName.code -> deviceRes.manufacturer "manuf";
                }"manufacturer";
            }"device";
        }"participantRole";
    }"participant";

    src.entryRelationship as entryR then{
        entryR.observation as observation -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST', e3.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Observation/', uuid3), request.url = 'Observation', tgt.hasMember = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then Observation(observation, patient, encounter, obs1, bundle) "Parametri";
        entryR.act as act then{
            act.text as text -> tgt.note as note then{
                text.reference as reference -> note.text = (reference.value) "text";
            }"note";
        }"act"; 
    }"entryRel Osservazioni";
}   

group MedicationRequest(source src : substanceAdministration, target patient : Patient, target encounter: Encounter, target tgt: MedicationRequest, target bundle: Bundle){
    //default  + mandatory
    src -> tgt.subject = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    src -> tgt.encounter = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
    src -> tgt.intent = 'order' "intent";
    src where statusCode.exists().not() -> tgt.status = 'unknown' "st";
    src.statusCode as sc then {
        sc.code as cos-> tgt.status = translate(cos, '#MedicationStatusMap', 'code') "codeS";
    }"status";
    //
    src.text as txt -> tgt.note as note then{
        txt.reference as reference -> note.text = (reference.value) "text";
    }"note";

    src.effectiveTime: IVL_TS as eff -> tgt.dosageInstruction = create('Dosage') as dosage then{
        eff -> dosage.timing = create('Timing') as timing then {
          eff -> timing.repeat as rep then {
            eff as eff where (value.exists()) -> rep.bounds = create('dateTime') as value then TSDateTime(eff, value) "value1";
            eff as eff where (low.exists()) -> rep.bounds = create('Period') as value then IVLTSPeriod(eff, value) "valuePeriod";
          }"rep";
        }"timing";
      }"period";

      src.effectiveTime: EIVL_TS as effe -> tgt.dosageInstruction = create('Dosage') as dosage then{
        effe -> dosage.timing = create('Timing') as timing then {
          effe -> timing.repeat as rep then {
            effe.eventCode as ev -> rep.when = (ev.code);
          }"rep";
        }"timing";
      }"period";

      src.effectiveTime: IVL_TS as eff -> tgt.dosageInstruction = create('Dosage') as dosage, dosage.timing = create('Timing') as timing, timing.event = (eff.value) "tim";

      src.effectiveTime: PIVL_TS as eff -> tgt.dosageInstruction = create('Dosage') as dosage then{
        eff -> dosage.timing = create('Timing') as timing then periodTiming(eff,timing) "cod";
      }"eff";
    
    src where (src.doseQuantity.exists() or src.rateQuantity.exists()) then{
        src ->  tgt.dosageInstruction = create('Dosage') as dosageInstruction then{
            src.doseQuantity as doseQuant then{
                doseQuant.originalText as ot then{
                    ot.reference -> dosageInstruction.text;
                }"ot";  
                doseQuant -> dosageInstruction.doseAndRate as dosageRate then{
                doseQuant -> dosageRate.dose = create('Range') as d then{
                doseQuant -> d.low = create('SimpleQuantity') as l then{
                    doseQuant.low as lo -> l.value = (lo.value); 
                    doseQuant.low as lo -> l.unit = (lo.unit); 
                }"low";
                doseQuant -> d.high = create('SimpleQuantity') as h then{
                    doseQuant.high as hi -> h.value = (hi.value);
                    doseQuant.high as hi -> h.unit = (hi.unit); 
                }"low";
                }"d";
            }"dosageRate";
        } "doseQuantity";
            src.rateQuantity as rateQuantity then{
                rateQuantity.originalText as ot then{
                    ot.reference -> dosageInstruction.text;
                }"ot";
                rateQuantity -> dosageInstruction.doseAndRate as dosageRate then{
                    rateQuantity -> dosageRate.rate = create('Range') as d then{
                        rateQuantity -> d.low = create('SimpleQuantity') as l then{
                            rateQuantity.low as lo -> l.value = (lo.value); 
                            rateQuantity.low as lo -> l.unit = (lo.unit); 
                        }"low";
                        rateQuantity -> d.high = create('SimpleQuantity') as h then{
                            rateQuantity.high as hi -> h.value = (hi.value);
                            rateQuantity.high as hi -> h.unit = (hi.unit); 
                        }"high";
                    }"r";
                }"dosageRate";

            }"rate";
        
        src.routeCode -> dosageInstruction.route "route";
        src.approachSiteCode -> dosageInstruction.site "site";
        src.targetSiteCode -> dosageInstruction.site "site";

        }"dosageIn";
    }"condition";

    src.consumable as consumable -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Medication/', uuid1), request.url = 'Medication', tgt.medication = create('Reference') as medref,  medref.reference = ('https://example/Medication/' + %medication.id) then Medication(src,medication,patient,bundle) "medication";       
    src.entryRelationship as entryRelationship then{
        entryRelationship.supply as supply -> tgt.dispenseRequest as dispenseRequest then{
            supply.quantity as quantityCDA -> dispenseRequest.quantity as quantityFHIR then{
                quantityCDA -> quantityFHIR.value = (quantityCDA.value) "value";
            }"quantity";
        }"supply";
    }"entryR";

    src.participant as participant then{
        participant then Practitioner(participant, tgt, bundle) "function"; 
        participant.effectiveTime -> tgt.authoredOn "autor"; 
    }"Partecipant";
}
    
group periodTiming(source effectiveTime: PIVL_TS, target timing: Timing){
    effectiveTime -> timing.repeat as r then{
      effectiveTime.period as p -> r.period = (p.value); 
      effectiveTime.period as p -> r.periodUnit = (p.unit);   
    }"repeat";
  }

group Medication(source src:cda , target tgt: Medication, target patient: Patient, target bundle : Bundle){

    src.consumable as consumable then{
        consumable.manufacturedProduct as manufacturedProduct then{
            manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                manufacturedMaterial.code -> tgt.code "CE";
                src.administrationUnitCode -> tgt.form "form";
            }"material";
        }"product";
    }"consumable";

    src.entryRelationship as entryR then{
        entryR.observation as observation then{
            observation.code where displayName='Grammatura' -> tgt.ingredient as ingredient then{
                src.consumable as consumable then{
                    consumable.manufacturedProduct as manufacturedProduct then{
                        manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                            manufacturedMaterial.code as code -> ingredient.item = create('CodeableConcept') as value then CECodeableConcept(code,value) "CE";
                        }"material";
                    }"product";
                }"consumable";
                observation.value as value -> ingredient.strength as strength then{
                    value -> strength.numerator as numerator then{
                        value -> numerator.value = (value.value) "valueN";
                    } "numerator";
                    value -> strength.denominator as denominator then{
                        value -> denominator.value = 1 "valueD";
                    } "denominator";
                }"strenght";
            }"ingredient";
            observation.code where displayName='Quantità nella Confezione' then{
                observation.value as value -> tgt.amount as amount then{
                    value -> amount.numerator  as numerator then{
                        value -> numerator.value = (value.value) "valueN";
                    } "numerator";
                    value -> amount.denominator as denominator then{
                        value -> denominator.value = 1 "valueD";
                    } "denominator";
                }"amount";
            }"quantità";
        }"obs";
    }"entry R";
}

group MedicationStatement(source src: subAdmin, target tgt: MedicationStatement, target patient: Patient, target encounter : Encounter, target bundle: Bundle){
    src -> tgt.subject = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    src.statusCode -> tgt.status;
    src where statusCode.exists().not() -> tgt.status = 'unknown' "not present"; 
    src.consumable as consumable then{
        consumable.manufacturedProduct as manufacturedProduct then{
            manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                manufacturedMaterial.code as code -> tgt.medication  =create('CodeableConcept') as ce then CECodeableConcept(code,ce) "CE";
            }"material";
        }"product";
    }"consumable";
}

group FamilyMemberFunction(source src : organizer, target tgt : familyMember, target patient : patient){
    src -> tgt.patient = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "patReference";    
    src.statusCode -> tgt.status;
    src.effectiveTime as effectiveTime -> tgt.date = create('date') as value then TSDateTime(effectiveTime,value) "date";
    src.subject as subject then{
        subject.relatedSubject as relatedSubject then{
            relatedSubject.code -> tgt.relationship "relationship code";
            relatedSubject.subject as subject -> tgt.sex as sex then {
                subject.administrativeGenderCode as administrativeGenderCode -> sex.coding as coding then {
                    administrativeGenderCode.code as sexCode-> coding.code = translate(sexCode, '#cm-v3-administrative-gender', 'code') "gender";
                    administrativeGenderCode -> coding.system = 'http://hl7.org/fhir/administrative-gender' "system";
                }"coding";
            }"subject";
        }"relatedSub";
    }"relationship";
    src.component as component -> tgt.condition as condition then{
        component.observation as observation then{
            observation.code -> condition.code "code";
            observation.text as text -> tgt.note as note then{
                text.reference as reference -> note.text = (reference.value) "value";
            }"reference";
            observation.statusCode -> tgt.status;
            // observation.effectiveTime as effectiveTime -> condition.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
            observation where observation.effectiveTime.exists() then {
                observation.effectiveTime as effectiveTime -> tgt.condition = create('BackboneElement') as condition then {
                    observation.code -> condition.code "code";
                    observation.value -> condition.outcome "codeable"; 
                    effectiveTime -> condition.onset = create('Period') as period then{
                        effectiveTime -> period.start = create('dateTime') as start then TSDateTime(effectiveTime,start)
                        "val";
                    }"efft";
                }"effttemp";
            }"cont";
            observation.value -> condition.outcome "codeable";
            observation.entryRelationship as entryR then{
                entryR.observation as obs then{
                    obs where (code.code ='35267-4') then{
                        obs.value as value -> condition.onset = create('Age') as Age then {
                            value.value as valueAge -> Age.value = valueAge "age";
                            value.unit as unit -> Age.code = unit "unit";
                            value.unit as unit -> Age.unit = unit "unit";
                            value -> Age.system = 'http://unitsofmeasure.org' "system";
                    } "value";
                }"insorgenza";
                    obs where (code.code ='39016-1') then{
                        obs.value as value -> tgt.deceased = create('Age') as Age then {
                            value.value as valueAge -> Age.value = valueAge "age";
                            value.unit as unit -> Age.code = unit "unit";
                            value.unit as unit -> Age.unit = unit "unit";
                            value -> Age.system = 'http://unitsofmeasure.org' "system";
                    } "value";
                }"death";
            }"obser";
            }"EntryRel";
        }"observation";
    }"component";
}

group allergyFunction(source src: cdaElement, target tgt: AllergyIntolerance, target patient : patient, target encounter : encounter) {
    src -> tgt.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference"; 
    src.entryRelationship as entryRelationship1 then{
        entryRelationship1.observation as observation1 then{
            observation1.effectiveTime as effectiveTime -> tgt.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
            observation1.value as code then{
                code.code as code1-> tgt.type = translate(code1,'#AllergyTypeMap','code') "type"; 
                code.code as code1 -> tgt.category = translate(code1,'#AllergyCategoryMap','code') "category";   
            }"code";
            observation1.participant as participant-> tgt.reaction as reaction then{
                observation1.entryRelationship as entryRelationship2 where (typeCode = 'MFST') then{
                    entryRelationship2.observation as observation2 then{
                        observation2.value -> reaction.manifestation "manifestation";
                        observation2.effectiveTime as effectiveTime then{
                            effectiveTime.low as low -> reaction.onset = create('dateTime') as value then TSDateTime(low, value) "valuePeriodLow";
                        }"low";
                    }"observ2";
                }"entryR2";
                participant.participantRole as participantRole then{
                    participantRole.playingEntity as playingEntity then{
                        playingEntity.code -> reaction.substance "reaction";
                    }"playingEntity";
                }"participantRole";
            }"participant";
            observation1.entryRelationship as entryRelationship2 where (typeCode = 'MFST') then{
                entryRelationship2.observation as observation2 where observation1.participant.exists().not() -> tgt.reaction as reaction then{
                    observation2.value -> reaction.manifestation "manifestation";
                    observation2.effectiveTime as effectiveTime then{
                        effectiveTime.low as low -> reaction.onset = create('dateTime') as value then TSDateTime(low, value) "valuePeriodLow";
                    }"low";
                }"observ2";
            }"entryR2";
            observation1.entryRelationship as entryRelationship3 where (typeCode = 'SUBJ') then{
                entryRelationship3.observation as observation3 then{
        
                    observation3.value as value then{
                        value.code as c-> tgt.criticality = translate(c,'#CricalityMap','code') "value";
                    }"criticality"; 
                }"observ3";
                entryRelationship3.act as act -> tgt.note as note then{
                    act.text as text then{
                        text.reference as reference -> note.text = (reference.value);
                    }"note";
                }"act";
            }"entryR3";
            observation1.entryRelationship as entryRelationship4 where (typeCode = 'REFR') then{
                entryRelationship4.observation as observation4  then{

                    observation4.value as value -> tgt.clinicalStatus as clinicalStatus then{
                        value as valu -> clinicalStatus.coding = create('Coding') as coding then{
                            valu where(code = 'LA9041-0') -> coding.code =  'resolved' "code";
                            valu where(code = 'LA18632-2') -> coding.code =  'inactive' "code";
                            valu where(code = 'LA16666-2') -> coding.code =  'active' "code";
                            valu -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical' "system";
                            valu.displayName as display-> coding.display= cast(display, 'string') "display";
                        }"coding";
                    }"clinicalStatus";
                }"observ4";
            }"entryR4";
        }"observation";
    }"entryrelationship";
}

group Practitioner(source src : participant, target tgt: MedicationRequest, target bundle: Bundle){
    src -> bundle.entry as e22, e22.request = create('BackboneElement') as request, request.method = 'PUT', e22.resource = create('Practitioner') as practitioner1 then{       
        src.participantRole as practr then{
            practr.id as id ->practitioner1.identifier as identifier then{
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext "ext";
                id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                id.root as r then {
                    id.extension as ext -> practitioner1.id = (r + '-' + ext) as uuid22,  e22.fullUrl = append('https://example/Practitioner/', uuid22), tgt.requester = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner1.id) "id";
                }"r";
            }"identifier";
            practr.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
            practr -> practitioner1.meta as meta then {
                practr-> meta.tag = create('Coding') as coding then {
                    practr -> coding.system ='http://algoritmodiscoring'"system";
                    practr -> coding.code ='ClinicalDocument/body/TerapiaFarmacologicaConsigliata/participant' "code";
                }"coding";
            }"meta";
            practr.addr -> practitioner1.address;      
            practr.telecom -> practitioner1.telecom;
            practr.playingEntity as plentity then{
                plentity.name ->  practitioner1.name "name"; 
                plentity.birthTime as birthTime then{
                    birthTime.value as date -> practitioner1.birthDate= truncate(date, 10);
                  }"birth";
            }"partname";
        }"resurceCreation";
    }"practitionerCreate";

}


",
          "subType": "00"
        }
      }
    }
  ],
  "definitions": [],
  "valuesets": [],
  "template_id_root": "2.16.840.1.113883.2.9.10.1.9.1",
  "last_update_date": {
    "$date": {
      "$numberLong": "1677573442816"
    }
  },
  "version": "2.5",
  "root_map": "RefertodiSpecialisticaAmbulatorialeBody",
  "deleted": false,
  "last_sync": {
    "$date": {
      "$numberLong": "1677573846774"
    }
  }
},{
  "_id": {
    "$oid": "63fdbd444afb2a4bc2c12beb"
  },
  "maps": [
    {
      "name_map": "Vaccinazioni",
      "filename_map": "Vaccinazioni_v1.7.map",
      "content_map": {
        "$binary": {
          "base64": "map "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/Vaccinazioni" = "Vaccinazioni"


uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL-PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target
uses "http://hl7.org/fhir/StructureDefinition/Immunization" alias Immunization as target


imports "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes"
imports "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
  cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('https://example/Composition/', uuid1), request.url = 'Composition',  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Patient/', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3),request.url = 'Encounter',
  bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST',  e5.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid5,  e5.fullUrl = append('https://example/DocumentReference/', uuid5),request.url = 'DocumentReference' then {
  cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
  cda.recordTarget as recordTarget then{
    recordTarget.patientRole as patient then{
       patient.id as id-> patient.identifier as identifier then {
         id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext1 -> identifier.value = ext1 "value";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
        }"idfr";
        patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7')
        or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17') or (root='2.16.840.1.113883.2.9.4.3.15')  then {
          id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
          }"ext";
        }"record";
      }"recPat";
 } "ClinicalDocumentToBody";
}

group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference : DocumentReference) {
  cda -> encounter.status = 'finished' "finished";
  cda -> encounter.class = create("Coding") as coding then{
    cda -> coding.code = 'AMB' "amb";
  }"coding";
  cda -> bundle.id = uuid() "id";
  cda.id -> bundle.identifier "identifier";
  cda -> bundle.type = 'transaction' "type";
  cda -> bundle.timestamp=(timestamp.now()) "date";
  cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";  
  cda.component as component then {
    component.structuredBody as body then {
      body.component as component  then {       
	     component.section as srcSection then {
        srcSection -> composition.section as tgtSection  then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle,encounter) "Terapia Farmacologica alla dimissione";
       };
      };
    } "body";
  };
}

//--------------------------------

group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";    
  } "cdaText";
  src.entry as entry1 then {
    
    entry1.substanceAdministration as substance  then {
      substance.templateId where(root = '2.16.840.1.113883.2.9.10.1.11.4.1') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Immunization') as immunization,  immunization.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Immunization/', uuid1), request.url = 'Immunization',tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Immunization/' + %immunization.id) then{
        substance -> immunization.patient  = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "patientRef"; 
        // substance.templateId as tid -> immunization.identifier as idf then{
        //   tid.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        // }"id";
        substance.statusCode  as statusc where (code='completed') -> immunization.status ='completed';  
        substance.statusCode  as statusc where (code='aborted') -> immunization.status ='final';  
        substance.statusCode  as statusc where (code='suspended') -> immunization.status ='enterer-in-error';  
        substance.statusCode  as statusc where (code='cancelled') -> immunization.status ='not-done';          
        substance.effectiveTime as eff where (value.exists()) -> immunization.occurrence = create('dateTime') as value then TSDateTime(eff, value) "value1";
        substance.effectiveTime as eff where (low.exists()) -> immunization.occurrence = create('Period') as value then IVLTSPeriod(eff, value) "valuePeriod";

        substance.routeCode -> immunization.route "route";

        substance.approachSiteCode -> immunization.site "site";

        substance -> immunization.doseQuantity = create('SimpleQuantity') as quantity then{
          substance.doseQuantity as q then{
            q -> quantity.value = (q.value) "val";
            q -> quantity.unit = (q.unit) "uni"; 
          }"qua"; 
        }"q";

        substance.consumable as cons then{
          cons.manufacturedProduct as manufact then{
            manufact.manufacturedMaterial as manufactmat then{
              manufactmat.code -> immunization.vaccineCode;
              manufactmat.lotNumberText as t -> immunization.lotNumber = (t.dataString);
            }"manufactmat";

            manufact.manufacturerOrganization as manufactOrg -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Organization') as organization  then{
             
              manufactOrg->organization.meta as meta then {
                manufactOrg->meta.tag = create('Coding') as coding then {
                  manufactOrg -> coding.system ='http://algoritmodiscoring'"system";
                  manufactOrg -> coding.code ='ClinicalDocument/body/manufacturerOrganization'"code";
                      }"coding";
                }"meta";
              manufactOrg.id as id -> organization.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  ext-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization.id =(r +'-'+ ext) as uuid5,  e1.fullUrl = append('https://example/Organization/', uuid5) ,immunization.manufacturer  = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %uuid5) ;
                }"r" ; 
              }"identifier";
              // manufactOrg.id as id then{
              //   id -> organization.id = (id.root+'-'+id.extension) as idtar then{
              //     id ->  e1.fullUrl = append('https://example/Organization/', idtar),  "idassi";
              //   }"idt";
              // }"id";                                          
              manufactOrg.name as n -> organization.name = (n.other);
            }"manufactOrg";          
          }"manufact";
        }"cons";
       
        substance.participant as part ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Location') as location then{       
          part->location.meta as meta then {
            part->meta.tag = create('Coding') as coding then {
              part -> coding.system ='http://algoritmodiscoring'"system";
              part -> coding.code ='ClinicalDocument/body/participant'"code";
                  }"coding";
            }"meta";
          part.participantRole as partRole then{
            partRole.id as id  -> location.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext-> identifier.value = ext then {
                ext-> request.url = append('Location?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext ->location.id =(r +'-'+ ext) as uuid6,  e1.fullUrl = append('https://example/Location/', uuid6),  immunization.location  = create('Reference') as reference,  reference.reference = ('https://example/Location/' + %uuid6) "ref";
                }"r" ; 
              }"identifier";
           }"role";
        }"part";
        cda-> immunization.protocolApplied  as prot then {  
        substance.entryRelationship as entrirel4 then{
              entrirel4.observation as obs  then {          
                obs.code where( code = '75323-6') then {
                obs.value -> prot.targetDisease;
                }"code control";
              }"entrirel2";
          entrirel4.observation as obsdosenumber  then {          
             obsdosenumber.code where( code = '30973-2') then {
                obsdosenumber.value as v then {
                  v.value as int ->prot.doseNumber=(int.toString());
                 }"v";
                //  obsdosenumber.value as v then {
                //    v.value as int -> prot.doseNumber  = cast(int,'positiveInt') "val"; 
                //  }"value"; 
            }"code control";
          }"entrirel2";
        }"entrirel4";
      }"protocolAp";
       
        substance.entryRelationship as entrirel2 then{
          entrirel2.observation as obs then{          
            obs.code where( code = '59778-1' or code = '30981-5' or code = '30980-7' or code = '59777-3')then{
              obs.value as value then{
                value.high as h  then {
                  h.value as date-> immunization.expirationDate= truncate(date, 10);
             }"da";
              }"value";
            }"code control";
          }"obs";
        }"entrirel2";


        substance.entryRelationship as entrirel3 then{
          entrirel3.observation as obs then{          
            obs.code where( code = '95715-9') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , immunization.reasonReference  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
              obs then Observation(entrirel3,patient,tgt,bundle,enc,observation) "observation";
            }"code control";
          }"obs";
        }"entrirel2";

        substance.entryRelationship as entrirel4 then{
          entrirel4.observation as obs then{          
            obs.code where( code = '59785-6') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , immunization.reasonReference  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
              obs then Observation1(entrirel4,patient,tgt,bundle,enc,observation) "observation";
            }"code control";
          }"obs";
        }"entrirel2";

        substance.entryRelationship as entrirel4 then{
          entrirel4.observation as obs then{          
            obs.code where( code = '31044-1') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , immunization.reasonReference  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
              obs then Observation1(entrirel4,patient,tgt,bundle,enc,observation) "observation";
            }"code control";
          }"obs";
        }"entrirel2";


      }"Controllo+Immunization";

      substance.templateId where(root = '2.16.840.1.113883.2.9.10.1.11.4.2') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Immunization') as immunization,  immunization.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Immunization/', uuid1), request.url = 'Immunization' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Immunization/' + %immunization.id) then{
        substance -> immunization.patient  = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "patientRef"; 
        // substance.templateId as tid -> immunization.identifier as idf then{
        //   tid.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        // }"id";
        substance.statusCode  as statusc where (code='completed') -> immunization.status ='completed';  
        substance.statusCode  as statusc where (code='aborted') -> immunization.status ='final';  
        substance.statusCode  as statusc where (code='suspended') -> immunization.status ='enterer-in-error';  
        substance.statusCode  as statusc where (code='cancelled') -> immunization.status ='not-done';          
        
        substance.effectiveTime as eff where (value.exists()) -> immunization.occurrence = create('dateTime') as value then TSDateTime(eff, value) "value1";
        substance.effectiveTime as eff where (low.exists()) -> immunization.occurrence = create('Period') as value then IVLTSPeriod(eff, value) "valuePeriod";

        substance.consumable as cons then{
          cons.manufacturedProduct as manufact then{
            manufact.manufacturedMaterial as manufactmat then{
              manufactmat.code -> immunization.vaccineCode;
              manufactmat.lotNumberText as t -> immunization.lotNumber = (t.dataString);
            }"manufactmat";

            manufact.manufacturerOrganization as manufactOrg -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Organization') as organization  then{

              manufactOrg->organization.meta as meta then {
                manufactOrg->meta.tag = create('Coding') as coding then {
                  manufactOrg -> coding.system ='http://algoritmodiscoring'"system";
                  manufactOrg -> coding.code ='ClinicalDocument/body/manufacturerOrganization'"code";
                      }"coding";
                }"meta";

                manufactOrg.id as id -> organization2.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                    manufactOrg-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization1.id= (r +'-'+ ext) as uuid23,  e1.fullUrl = append('https://example/Organization/', uuid23) ,immunization.manufacturer  = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %uuid23)"org";
                }"r" ;   
              }"identifier";
              manufactOrg.name as n -> organization.name = (n.other);
            }"manufactOrg";          
          }"manufact";
        }"cons";

        cda-> immunization.protocolApplied  as prot then {  
          substance.entryRelationship as entrirel4 then{
                entrirel4.observation as obs  then {          
                  obs.code where( code = '75323-6') then {
                        
                    obs.value -> prot.targetDisease;
                    
                  }"code control";
                }"entrirel2";
            entrirel4.observation as obsdosenumber  then {          
               obsdosenumber.code where( code = '30973-2') then {
                  obsdosenumber.value as v then {
                    v.value as int ->prot.doseNumber=(int.toString());
                   }"v";
                //   obsdosenumber.value as v then {
                //   v.value as int -> prot.doseNumber  = cast(int,'positiveInt') "val"; 
                // }"value"; 
              }"code control";
            }"entrirel2";
          }"entrirel4";
        }"protocolAp";

        substance.entryRelationship as entrirel1 then{
          entrirel1.observation as obs then{          
            obs.code where( code = '85714-4') then {
              obs.code -> immunization.statusReason;
            }"code control";
            obs.code where( code = '59784-9') then {
              obs.value as val then{
                val.originalText as original -> immunization.statusReason = create('CodeableConcept') as cod then{
                  original.reference as reff -> cod.text = (reff.value);
                }"cod";
              }"val";
            }"code control";
          }"obs";
        }"entrirel1";

        substance.participant as part -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Location') as location then{          
          
            part->location.meta as meta then {
              part->meta.tag = create('Coding') as coding then {
                part -> coding.system ='http://algoritmodiscoring'"system";
                part -> coding.code ='ClinicalDocument/body/participant'"code";
                    }"coding";
              }"meta";
            part.participantRole as partRole then{
              partRole.id as id  -> location.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext-> identifier.value = ext then {
                ext-> request.url = append('Location?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext ->location.id =(r +'-'+ ext) as uuid7,  e1.fullUrl = append('https://example/Location/', uuid7), immunization.location  = create('Reference') as reference,  reference.reference = ('https://example/Location/' + %uuid7) "ref";
                  }"r" ; 
                }"identifier";
             }"role";
        }"location";
      }"sub2";
    }"substance";
  }"entry";
}

group Observation(source entrirel2: entryRelationship, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target obs: Observation){  
  entrirel2.observation as observation then{
    // observation.templateId as tid -> obs.identifier as idf then{
    //   tid.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
    // }"idf";
    observation.code -> obs.code;
    observation.statusCode as statusc where (code='completed') -> obs.status ='final';
    observation.statusCode as statusc where (code='active') -> obs.status ='registered';
    observation.statusCode as statusc where (code='aborted') -> obs.status ='cancelled';
    observation.statusCode as statusc where (code='suspended') -> obs.status ='partial';
    observation-> obs.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    observation-> obs.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";   
    observation -> obs.referenceRange as refRange then{
      observation.value -> refRange.appliesTo;
      observation -> refRange.text = 'string' "text";
    }"refRange";
  }"obs";
}

group Observation1(source entrirel4: entryRelationship, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target obs: Observation){  
  entrirel4.observation as observation then{
    // observation.templateId as tid -> obs.identifier as idf then{
    //   tid.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
    // }"idf";
    observation.code -> obs.code;
    observation.statusCode as statusc where (code='completed') -> obs.status ='final';
    observation.statusCode as statusc where (code='active') -> obs.status ='registered';
    observation.statusCode as statusc where (code='aborted') -> obs.status ='cancelled';
    observation.statusCode as statusc where (code='suspended') -> obs.status ='partial';
    observation-> obs.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    observation-> obs.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";  

    observation.effectiveTime as eff where (value.exists()) -> obs.effective = create('dateTime') as value then TSDateTime(eff, value) "value1";
    observation.effectiveTime as eff -> obs.effective = create('Period') as period then IVLTSPeriod(eff,period) "period";
    
    observation -> obs.value = create('CodeableConcept') as concept then{      
      observation.value -> concept.coding = create('Coding') as coding then{
        observation.value as v -> coding.code = (v.code);
        observation.value as v then{
          v.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        }"vv";
        observation.value as v -> coding.display = (v.displayName);
      }"coding";
      observation.value as valu then {
        valu.originalText as txt then{
          txt.reference as ref ->  concept.text = (ref.value);
        }"txt";  
      }"value";
    }"refRange";
  }"obs";
}",
          "subType": "00"
        }
      }
    }
  ],
  "definitions": [],
  "valuesets": [],
  "template_id_root": "2.16.840.1.113883.2.9.10.1.11.1.1",
  "last_update_date": {
    "$date": {
      "$numberLong": "1677573444623"
    }
  },
  "version": "1.7",
  "root_map": "Vaccinazioni",
  "deleted": false,
  "last_sync": {
    "$date": {
      "$numberLong": "1677573846774"
    }
  }
},{
  "_id": {
    "$oid": "63fdbd464afb2a4bc2c12bec"
  },
  "maps": [
    {
      "name_map": "Vaccinazioni",
      "filename_map": "Vaccinazioni_v1.7.map",
      "content_map": {
        "$binary": {
          "base64": "map "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/Vaccinazioni" = "Vaccinazioni"


uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL-PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target
uses "http://hl7.org/fhir/StructureDefinition/Immunization" alias Immunization as target


imports "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes"
imports "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
  cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('https://example/Composition/', uuid1), request.url = 'Composition',  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Patient/', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3),request.url = 'Encounter',
  bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST',  e5.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid5,  e5.fullUrl = append('https://example/DocumentReference/', uuid5),request.url = 'DocumentReference' then {
  cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
  cda.recordTarget as recordTarget then{
    recordTarget.patientRole as patient then{
       patient.id as id-> patient.identifier as identifier then {
         id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext1 -> identifier.value = ext1 "value";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
        }"idfr";
        patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7')
        or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17') or (root='2.16.840.1.113883.2.9.4.3.15')  then {
          id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
          }"ext";
        }"record";
      }"recPat";
 } "ClinicalDocumentToBody";
}

group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference : DocumentReference) {
  cda -> encounter.status = 'finished' "finished";
  cda -> encounter.class = create("Coding") as coding then{
    cda -> coding.code = 'AMB' "amb";
  }"coding";
  cda -> bundle.id = uuid() "id";
  cda.id -> bundle.identifier "identifier";
  cda -> bundle.type = 'transaction' "type";
  cda -> bundle.timestamp=(timestamp.now()) "date";
  cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";  
  cda.component as component then {
    component.structuredBody as body then {
      body.component as component  then {       
	     component.section as srcSection then {
        srcSection -> composition.section as tgtSection  then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle,encounter) "Terapia Farmacologica alla dimissione";
       };
      };
    } "body";
  };
}

//--------------------------------

group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";    
  } "cdaText";
  src.entry as entry1 then {
    
    entry1.substanceAdministration as substance  then {
      substance.templateId where(root = '2.16.840.1.113883.2.9.10.1.11.4.1') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Immunization') as immunization,  immunization.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Immunization/', uuid1), request.url = 'Immunization',tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Immunization/' + %immunization.id) then{
        substance -> immunization.patient  = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "patientRef"; 
        // substance.templateId as tid -> immunization.identifier as idf then{
        //   tid.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        // }"id";
        substance.statusCode  as statusc where (code='completed') -> immunization.status ='completed';  
        substance.statusCode  as statusc where (code='aborted') -> immunization.status ='final';  
        substance.statusCode  as statusc where (code='suspended') -> immunization.status ='enterer-in-error';  
        substance.statusCode  as statusc where (code='cancelled') -> immunization.status ='not-done';          
        substance.effectiveTime as eff where (value.exists()) -> immunization.occurrence = create('dateTime') as value then TSDateTime(eff, value) "value1";
        substance.effectiveTime as eff where (low.exists()) -> immunization.occurrence = create('Period') as value then IVLTSPeriod(eff, value) "valuePeriod";

        substance.routeCode -> immunization.route "route";

        substance.approachSiteCode -> immunization.site "site";

        substance -> immunization.doseQuantity = create('SimpleQuantity') as quantity then{
          substance.doseQuantity as q then{
            q -> quantity.value = (q.value) "val";
            q -> quantity.unit = (q.unit) "uni"; 
          }"qua"; 
        }"q";

        substance.consumable as cons then{
          cons.manufacturedProduct as manufact then{
            manufact.manufacturedMaterial as manufactmat then{
              manufactmat.code -> immunization.vaccineCode;
              manufactmat.lotNumberText as t -> immunization.lotNumber = (t.dataString);
            }"manufactmat";

            manufact.manufacturerOrganization as manufactOrg -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Organization') as organization  then{
             
              manufactOrg->organization.meta as meta then {
                manufactOrg->meta.tag = create('Coding') as coding then {
                  manufactOrg -> coding.system ='http://algoritmodiscoring'"system";
                  manufactOrg -> coding.code ='ClinicalDocument/body/manufacturerOrganization'"code";
                      }"coding";
                }"meta";
              manufactOrg.id as id -> organization.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  ext-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization.id =(r +'-'+ ext) as uuid5,  e1.fullUrl = append('https://example/Organization/', uuid5) ,immunization.manufacturer  = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %uuid5) ;
                }"r" ; 
              }"identifier";
              // manufactOrg.id as id then{
              //   id -> organization.id = (id.root+'-'+id.extension) as idtar then{
              //     id ->  e1.fullUrl = append('https://example/Organization/', idtar),  "idassi";
              //   }"idt";
              // }"id";                                          
              manufactOrg.name as n -> organization.name = (n.other);
            }"manufactOrg";          
          }"manufact";
        }"cons";
       
        substance.participant as part ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Location') as location then{       
          part->location.meta as meta then {
            part->meta.tag = create('Coding') as coding then {
              part -> coding.system ='http://algoritmodiscoring'"system";
              part -> coding.code ='ClinicalDocument/body/participant'"code";
                  }"coding";
            }"meta";
          part.participantRole as partRole then{
            partRole.id as id  -> location.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext-> identifier.value = ext then {
                ext-> request.url = append('Location?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext ->location.id =(r +'-'+ ext) as uuid6,  e1.fullUrl = append('https://example/Location/', uuid6),  immunization.location  = create('Reference') as reference,  reference.reference = ('https://example/Location/' + %uuid6) "ref";
                }"r" ; 
              }"identifier";
           }"role";
        }"part";
        cda-> immunization.protocolApplied  as prot then {  
        substance.entryRelationship as entrirel4 then{
              entrirel4.observation as obs  then {          
                obs.code where( code = '75323-6') then {
                obs.value -> prot.targetDisease;
                }"code control";
              }"entrirel2";
          entrirel4.observation as obsdosenumber  then {          
             obsdosenumber.code where( code = '30973-2') then {
                obsdosenumber.value as v then {
                  v.value as int ->prot.doseNumber=(int.toString());
                 }"v";
                //  obsdosenumber.value as v then {
                //    v.value as int -> prot.doseNumber  = cast(int,'positiveInt') "val"; 
                //  }"value"; 
            }"code control";
          }"entrirel2";
        }"entrirel4";
      }"protocolAp";
       
        substance.entryRelationship as entrirel2 then{
          entrirel2.observation as obs then{          
            obs.code where( code = '59778-1' or code = '30981-5' or code = '30980-7' or code = '59777-3')then{
              obs.value as value then{
                value.high as h  then {
                  h.value as date-> immunization.expirationDate= truncate(date, 10);
             }"da";
              }"value";
            }"code control";
          }"obs";
        }"entrirel2";


        substance.entryRelationship as entrirel3 then{
          entrirel3.observation as obs then{          
            obs.code where( code = '95715-9') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , immunization.reasonReference  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
              obs then Observation(entrirel3,patient,tgt,bundle,enc,observation) "observation";
            }"code control";
          }"obs";
        }"entrirel2";

        substance.entryRelationship as entrirel4 then{
          entrirel4.observation as obs then{          
            obs.code where( code = '59785-6') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , immunization.reasonReference  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
              obs then Observation1(entrirel4,patient,tgt,bundle,enc,observation) "observation";
            }"code control";
          }"obs";
        }"entrirel2";

        substance.entryRelationship as entrirel4 then{
          entrirel4.observation as obs then{          
            obs.code where( code = '31044-1') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , immunization.reasonReference  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
              obs then Observation1(entrirel4,patient,tgt,bundle,enc,observation) "observation";
            }"code control";
          }"obs";
        }"entrirel2";


      }"Controllo+Immunization";

      substance.templateId where(root = '2.16.840.1.113883.2.9.10.1.11.4.2') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Immunization') as immunization,  immunization.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Immunization/', uuid1), request.url = 'Immunization' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Immunization/' + %immunization.id) then{
        substance -> immunization.patient  = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "patientRef"; 
        // substance.templateId as tid -> immunization.identifier as idf then{
        //   tid.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        // }"id";
        substance.statusCode  as statusc where (code='completed') -> immunization.status ='completed';  
        substance.statusCode  as statusc where (code='aborted') -> immunization.status ='final';  
        substance.statusCode  as statusc where (code='suspended') -> immunization.status ='enterer-in-error';  
        substance.statusCode  as statusc where (code='cancelled') -> immunization.status ='not-done';          
        
        substance.effectiveTime as eff where (value.exists()) -> immunization.occurrence = create('dateTime') as value then TSDateTime(eff, value) "value1";
        substance.effectiveTime as eff where (low.exists()) -> immunization.occurrence = create('Period') as value then IVLTSPeriod(eff, value) "valuePeriod";

        substance.consumable as cons then{
          cons.manufacturedProduct as manufact then{
            manufact.manufacturedMaterial as manufactmat then{
              manufactmat.code -> immunization.vaccineCode;
              manufactmat.lotNumberText as t -> immunization.lotNumber = (t.dataString);
            }"manufactmat";

            manufact.manufacturerOrganization as manufactOrg -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Organization') as organization  then{

              manufactOrg->organization.meta as meta then {
                manufactOrg->meta.tag = create('Coding') as coding then {
                  manufactOrg -> coding.system ='http://algoritmodiscoring'"system";
                  manufactOrg -> coding.code ='ClinicalDocument/body/manufacturerOrganization'"code";
                      }"coding";
                }"meta";

                manufactOrg.id as id -> organization2.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                    manufactOrg-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization1.id= (r +'-'+ ext) as uuid23,  e1.fullUrl = append('https://example/Organization/', uuid23) ,immunization.manufacturer  = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %uuid23)"org";
                }"r" ;   
              }"identifier";
              manufactOrg.name as n -> organization.name = (n.other);
            }"manufactOrg";          
          }"manufact";
        }"cons";

        cda-> immunization.protocolApplied  as prot then {  
          substance.entryRelationship as entrirel4 then{
                entrirel4.observation as obs  then {          
                  obs.code where( code = '75323-6') then {
                        
                    obs.value -> prot.targetDisease;
                    
                  }"code control";
                }"entrirel2";
            entrirel4.observation as obsdosenumber  then {          
               obsdosenumber.code where( code = '30973-2') then {
                  obsdosenumber.value as v then {
                    v.value as int ->prot.doseNumber=(int.toString());
                   }"v";
                //   obsdosenumber.value as v then {
                //   v.value as int -> prot.doseNumber  = cast(int,'positiveInt') "val"; 
                // }"value"; 
              }"code control";
            }"entrirel2";
          }"entrirel4";
        }"protocolAp";

        substance.entryRelationship as entrirel1 then{
          entrirel1.observation as obs then{          
            obs.code where( code = '85714-4') then {
              obs.code -> immunization.statusReason;
            }"code control";
            obs.code where( code = '59784-9') then {
              obs.value as val then{
                val.originalText as original -> immunization.statusReason = create('CodeableConcept') as cod then{
                  original.reference as reff -> cod.text = (reff.value);
                }"cod";
              }"val";
            }"code control";
          }"obs";
        }"entrirel1";

        substance.participant as part -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Location') as location then{          
          
            part->location.meta as meta then {
              part->meta.tag = create('Coding') as coding then {
                part -> coding.system ='http://algoritmodiscoring'"system";
                part -> coding.code ='ClinicalDocument/body/participant'"code";
                    }"coding";
              }"meta";
            part.participantRole as partRole then{
              partRole.id as id  -> location.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext-> identifier.value = ext then {
                ext-> request.url = append('Location?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext ->location.id =(r +'-'+ ext) as uuid7,  e1.fullUrl = append('https://example/Location/', uuid7), immunization.location  = create('Reference') as reference,  reference.reference = ('https://example/Location/' + %uuid7) "ref";
                  }"r" ; 
                }"identifier";
             }"role";
        }"location";
      }"sub2";
    }"substance";
  }"entry";
}

group Observation(source entrirel2: entryRelationship, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target obs: Observation){  
  entrirel2.observation as observation then{
    // observation.templateId as tid -> obs.identifier as idf then{
    //   tid.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
    // }"idf";
    observation.code -> obs.code;
    observation.statusCode as statusc where (code='completed') -> obs.status ='final';
    observation.statusCode as statusc where (code='active') -> obs.status ='registered';
    observation.statusCode as statusc where (code='aborted') -> obs.status ='cancelled';
    observation.statusCode as statusc where (code='suspended') -> obs.status ='partial';
    observation-> obs.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    observation-> obs.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";   
    observation -> obs.referenceRange as refRange then{
      observation.value -> refRange.appliesTo;
      observation -> refRange.text = 'string' "text";
    }"refRange";
  }"obs";
}

group Observation1(source entrirel4: entryRelationship, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target obs: Observation){  
  entrirel4.observation as observation then{
    // observation.templateId as tid -> obs.identifier as idf then{
    //   tid.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
    // }"idf";
    observation.code -> obs.code;
    observation.statusCode as statusc where (code='completed') -> obs.status ='final';
    observation.statusCode as statusc where (code='active') -> obs.status ='registered';
    observation.statusCode as statusc where (code='aborted') -> obs.status ='cancelled';
    observation.statusCode as statusc where (code='suspended') -> obs.status ='partial';
    observation-> obs.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    observation-> obs.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";  

    observation.effectiveTime as eff where (value.exists()) -> obs.effective = create('dateTime') as value then TSDateTime(eff, value) "value1";
    observation.effectiveTime as eff -> obs.effective = create('Period') as period then IVLTSPeriod(eff,period) "period";
    
    observation -> obs.value = create('CodeableConcept') as concept then{      
      observation.value -> concept.coding = create('Coding') as coding then{
        observation.value as v -> coding.code = (v.code);
        observation.value as v then{
          v.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        }"vv";
        observation.value as v -> coding.display = (v.displayName);
      }"coding";
      observation.value as valu then {
        valu.originalText as txt then{
          txt.reference as ref ->  concept.text = (ref.value);
        }"txt";  
      }"value";
    }"refRange";
  }"obs";
}",
          "subType": "00"
        }
      }
    }
  ],
  "definitions": [],
  "valuesets": [],
  "template_id_root": "2.16.840.1.113883.2.9.10.1.11.1.2",
  "last_update_date": {
    "$date": {
      "$numberLong": "1677573446577"
    }
  },
  "version": "1.7",
  "root_map": "Vaccinazioni",
  "deleted": false,
  "last_sync": {
    "$date": {
      "$numberLong": "1677573846774"
    }
  }
},{
  "_id": {
    "$oid": "63fdbd484afb2a4bc2c12bed"
  },
  "maps": [
    {
      "name_map": "verbalePS",
      "filename_map": "VPS_Completo_v2.2.map",
      "content_map": {
        "$binary": {
          "base64": "map "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/VerbalePS" = "VerbalePS"

conceptmap "cm-v3-administrative-gender" {
  prefix s = "http://terminology.hl7.org/ValueSet/v3-AdministrativeGender"
  prefix t = "http://hl7.org/fhir/ValueSet/administrative-gender"

  s:M == t:male
  s:F == t:female
}

conceptmap "AllergyTypeMap" {

    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
  
    prefix t = "http://hl7.org/fhir/Allergy-type.html"
  
    s:OINT == t:intolerance
    s:ALG == t:allergy
    s:DALG == t:allergy
    s:EALG == t:allergy
    s:FALG == t:allergy
    s:NAINT == t:intolerance
    s:FNAINT == t:intolerance
    s:DNAINT == t:intolerance
    s:ENAINT == t:intolerance
    s:FINT == t:intolerance
    s:DINT == t:intolerance
    s:EINT == t:intolerance
  }
  conceptmap "AllergyCategoryMap" {

    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://hl7.org/fhir/Allergy-type.html"
  
    s:DALG == t:medication
    s:EALG == t:enviroment
    s:FALG == t:food
    s:FNAINT == t:food
    s:DNAINT == t:medication
    s:ENAINT == t:enviroment
    s:FINT == t:food
    s:DINT == t:medication
    s:EINT == t:enviroment
  }

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL-PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL-TS" as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target


imports "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes"
imports "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/FULLHEADER"

//--------------------------------------------------------------------------------------------


group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
  cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('https://example/Composition/', uuid1), request.url = 'Composition',  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Patient/', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3),request.url = 'Encounter',
  bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST',  e6.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid6,  e6.fullUrl = append('https://example/DocumentReference/', uuid6),request.url = 'DocumentReference' then {
    cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle,DocumentReference) "cdatobundle";
    cda.recordTarget as recordTarget then{
      recordTarget.patientRole as patient then{
         patient.id as id-> patient.identifier as identifier then {
           id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext1 -> identifier.value = ext1 "value";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          }"idfr";
          patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7')
          or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17') or (root='2.16.840.1.113883.2.9.4.3.15')  then {
            id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
            }"ext";
          }"record";
        }"recPat";
  } "ClinicalDocumentToBody";
}

group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle , target documentreference : DocumentReference) {
  cda -> bundle.id = uuid() "id";
  cda.id -> bundle.identifier "identifier";
  cda -> bundle.type = 'transaction' "type";
  cda -> bundle.timestamp=(timestamp.now()) "date";
  cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle,documentreference) "composition";
  cda.component as component then {
    component.structuredBody as body then {
      body.component as component  then {
	     component.section as srcSection then {
        srcSection.code where (code='11459-5' )-> composition.section as tgtSection  then ModalitadiTrasposto(cda, srcSection, patient, tgtSection, bundle,encounter)"Modalita_di_trasporto";
        srcSection.code where(code = '78337-3') -> composition.section as tgtSection  then InquadramentoClinicoIniziale(cda, srcSection, patient, tgtSection, bundle,encounter) "Inquadramento_clinico";
        srcSection.code where(code = '46239-0') -> composition.section as tgtSection  then MotivoDellaVisita(cda, srcSection, patient, tgtSection, bundle,encounter) "Inquadramento_clinico";
        srcSection.code where(code = '54094-8') -> composition.section as tgtSection  then Triage(cda, srcSection, patient, tgtSection, bundle,encounter) "Inquadramento_clinico";
        srcSection.code where(code = '46240-8') -> composition.section as tgtSection  then ClinicalDocumentSectionEncounter(cda, srcSection, patient, tgtSection, bundle,encounter) "motivo ricovero";
        srcSection.code where(code = '8648-8') -> composition.section as tgtSection  then ClinicalDocumentSectionDecorsoOspedaliero(cda, srcSection, patient, tgtSection, bundle,encounter) "Decorso Ospedaliero";
        srcSection.code where(code = '55109-3') -> composition.section as tgtSection  then ClinicalDocumentSectionComplicanze(cda, srcSection, patient, tgtSection, bundle,encounter) "Complicazioni";
        srcSection.code where(code = '62387-6') -> composition.section as tgtSection  then ClinicalDocumentSectionConsulenza(cda, srcSection, patient, tgtSection, bundle,encounter) "Hospital discharge studies summary";
        srcSection.code where(code = '30954-2') -> composition.section as tgtSection  then ClinicalDocumentSectionAccertamenti(cda, srcSection, patient, tgtSection, bundle,encounter) "Accertamenti";
        srcSection.code where(code = '8716-3') -> composition.section as tgtSection  then ClinicalDocumentSectionParametriVitali(cda, srcSection, patient, tgtSection, bundle,encounter) "Accertamenti";
        srcSection.code where(code = '29549-3') -> composition.section as tgtSection  then ClinicalDocumentSectionTerapiaFarmacoInPronto(cda, srcSection, patient, tgtSection, bundle,encounter) "Accertamenti";
        srcSection.code where(code = '18776-5') -> composition.section as tgtSection  then ClinicalDocumentSectionPianoCuraDimissione(cda, srcSection, patient, tgtSection, bundle,encounter) "Piano di cura alla dimissione";
        srcSection.code where(code = '28574-2') -> composition.section as tgtSection  then ClinicalDocumentSectionDimissione(cda, srcSection, patient, tgtSection, bundle,encounter) "Piano di cura alla dimissione";
        srcSection.code where(code = '75311-1') -> composition.section as tgtSection  then ClinicalDocumentSectionTerapiaFarmacologicaDimissione(cda, srcSection, patient, tgtSection, bundle,encounter) "Piano di cura alla dimissione";
      };
      };
    }"body";
  };
}

//Sezione complicanze--------------------------------------------------------------------------
group ClinicalDocumentSectionComplicanze(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
    src.title as t -> tgt.title = (t.dataString);
    src.code -> tgt.code;
    src where src.entry.exists() then {
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";
  }"entry_exists";
  // Sezione Strutturata-----------------------------------------------------------------------------------------------------------------------------------------------
    src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
      entry1.observation as obs then Observation(obs, patient ,enc ,observation, bundle) "act";
    }"entry";
    // Sezione Narrativa---------------------------------------------------------------------------------------------------------------------------------------------
    src where src.entry.exists().not() then {
      src.text as cdaText -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('Observation') as Observation,  Observation.id = uuid() as uuid8,  e8.fullUrl = append('https://example/Observation/', uuid8), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %Observation.id) then {
        src -> Observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
        src -> Observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
            src.code -> Observation.code;
            src where observation.statusCode.exists().not() then {
                src->Observation.status ='final'"status";
                }"statuscode";
              cdaText -> Observation.note as note then{
              cdaText as t ->note.text =t "reference";
            }"reference";
          }"cdaText";
        }"where";
  
}

group Observation (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {
  
  obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";  
  obs.code -> ob.code;
  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs where obs.statusCode.exists().not() then {
  obs->ob.status ='final'"status";
  }"statuscode";
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
  obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
    obs.effectiveTime as eff-> ob.effective=create('Period') as period then IVLTSPeriod(eff,period);
    }"where";
  obs.value:INT as int->ob.value=(int.value) "value";
  obs.value:CD as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        }"translation1";
      } "translation";
    }"coding";
  }"val";
  obs.value:CE as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        }"translation1";
      } "translation";
    }"coding";
  }"val";
  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
    val.value as value->quantity.value = value;
    val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";
  obs.value:BL as value->ob.value =create('boolean'),ob.value= (value.value) "value";
  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";
  obs.interpretationCode -> ob.interpretation;
    obs.methodCode -> ob.method;
  obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT', e1.resource = create('Practitioner') as practitioner then {
      performer.assignedEntity as entity then {
        entity->practitioner.meta as meta then {
          entity->meta.tag = create('Coding') as coding then {
            entity -> coding.system ='http://algoritmodiscoring'"system";
            entity -> coding.code ='ClinicalDocument/body/observation/performer'"code";
          }"coding";
        }"meta";
        entity.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            entity-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid1, e1.fullUrl  = append('https://example/Practitioner/', uuid1), ob.performer = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "performer";
          }"r";
        }"identifier";
        entity.assignedPerson as person then {
          person.name -> practitioner.name;
          person.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
          }"birth";
        }"name";
      }"assignedEntity";
    }"performer";
  obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
      refRange.observationRange as obsRange -> ref.low = create('SimpleQuantity') as Low  then {
          obsRange.value: IVL_PQ as v  then {
            v.low as l1 then {
              l1.value as decValue-> Low.value = decValue;
              l1.unit as Unit-> Low.unit = Unit;
            }"decValue";          
          }"IVL_PQ";                      
      }"obsRange";              
    }"refRange";  
}
//------------------------------------------------------------------------------------------------------

//Sezione Decorso Ospedaliero----------------------------------------------------------------------------
group ClinicalDocumentSectionDecorsoOspedaliero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
    src.title as t -> tgt.title = (t.dataString);
    src.code -> tgt.code;
    src ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',  e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id),  observation.note as note then {
        src.code -> observation.code;
        src where observation.statusCode.exists().not() then {
            src->observation.status ='final'"status";
            }"statuscode";
            src->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            src->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";                            
            src.text as t ->note.text =t "reference";                  
      src.author as auth -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT', e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then {
              auth.time as ti ->note.time= create('dateTime') as value then TSDateTime(ti, value) "time";
              auth.assignedAuthor as assAuth then{
              //meta+identifier
              assAuth->practitioner.meta as meta then {
                assAuth->meta.tag = create('Coding') as coding then {
                  assAuth -> coding.system ='http://algoritmodiscoring'"system";
                  assAuth -> coding.code ='ClinicalDocument/body/DecorsoOspedaliero/author'"code";
                }"coding";
              }"meta";
              assAuth.id as id -> practitioner.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext;
                id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                id.root as r then {
                  id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), note.author  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                }"r";
              }"identifier";
              assAuth.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
             assAuth.assignedPerson as assPers then{
                  assPers.name -> practitioner.name;
              }"assPers";
            }"assAuth";
        }"Auth";
    }"OB-note";
}
//--------------------------------------------------------------------------------------------------------

//Sezione Encounter---------------------------------------------------------------------------------------
group ClinicalDocumentSectionEncounter(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc1 : Encounter){
    src.title as t -> tgt.title = (t.dataString);
    src.code -> tgt.code;
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";
    src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Encounter/', uuid1), request.url = 'Encounter' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) then {
        entry1 -> encounter.partOf = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc1.id) "refer";
        entry1 -> encounter.subject = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "refer";
        entry1 -> encounter.status = 'finished' "status";
        entry1 -> encounter.class = create('Coding') as cl then{
          entry1 -> cl.code = 'AMB' "code";
          entry1 -> cl.display = 'ambulatory' "code";
        }"class";
        entry1.encounter as enc then{
            enc.code -> encounter.type;  
             // effectiveTime=period
             enc where effectiveTime.low.exists() or effectiveTime.high.exists() then {
              enc.effectiveTime as eff  -> encounter.period=create('Period') as period then IVLTSPeriod(eff,period);
              }"where";
              // effectiveTime = time-stamp
              enc where effectiveTime.low.exists().not() or effectiveTime.high.exists().not() then {
                enc.effectiveTime as effectivetime1 -> encounter.period = create('Period') as period then{
                effectivetime1 -> period.start =  create('dateTime') as start then TSDateTime(effectivetime1,start) "val"; 
              }"efft";
              }"where";             
            // enc.effectiveTime as eff -> encounter.period = create('Period') as period then{
            //     eff.low as l -> period.start = (l.value);
            //     eff.high as h -> period.end = (h.value);
            // }"period";
            enc.participant as part where(typeCode != 'LOC') -> encounter.participant = create('BackboneElement') as patarg then {
                  part -> patarg.type as type then { 
                  part -> type.coding as coding then{
                  part-> coding.code = (part.typeCode) "codice";
                  part-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
                } "codeType"; 
              }"type";
              part.time as time1 -> patarg.period = create('Period') as period then {
                time1 -> period.start = create('dateTime') as start then TSDateTime(time1,start) "val";
               }"time";
                part.time as ti -> patarg.period =create('Period') as period then IVLTSPeriod(ti,period);                
                   
                part.participantRole as partRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then {                    
                    //modifica meta+identifier
                    partRole->practitioner.meta as meta then {
                      partRole->meta.tag = create('Coding') as coding then {
                        partRole -> coding.system ='http://algoritmodiscoring'"system";
                        partRole -> coding.code ='ClinicalDocument/body/Encounter/participant'"code";
                      }"coding";
                    }"meta";
                    partRole.id as id -> practitioner.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext;
                      id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                      id.root as r then {
                        id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), patarg.individual = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                      }"r";
                    }"identifier";
                    partRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"2.16.840.1.113883.2.9.4.3.2";
                   
                    partRole.playingEntity as playEnt then{
                      playEnt.name -> practitioner.name;
                    }"playEnt";                    
                }"partRole";
            }"participant-ADM";
            enc.participant as part where(typeCode = 'LOC') then{
                part.time as tim -> encounter.location as locat then{
                    tim -> locat.period =create('Period') as period then IVLTSPeriod(tim,period)"time"; 
                    part.time as tim  -> locat.period = create('Period') as period then{
                      tim -> period.start = create('dateTime') as start then TSDateTime(tim,start) "val";
                     }"time";
                part.participantRole as partRole ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Location') as location,  location.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Location/', uuid1) then{                  
                    
                   
                    part-> location.meta as meta then {
                      part-> meta.tag = create('Coding') as coding then {
                      part -> coding.system ='http://algoritmodiscoring'"system";
                      part -> coding.code ='ClinicalDocument/body/Encounter/participant'"code";
                      }"coding";
                    }"meta";       
                    
                    partRole.id as id -> location.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext then {
                        partRole -> request.url = append('Location?identifier=',ext)"UUID";
                      }"ext";
                      id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                      id.root as r then {
                        id.extension as ext  -> location.id = (r +'-'+ ext) as uuid,  e1.fullUrl = append('https://example/Location/', uuid),  locat.location = create('Reference') as reference,  reference.reference = ('https://example/Location/' + %location.id) "idasi";       
                      }"r" ;
                    }"identifier";                                                      
                    partRole.code -> location.type;
                }"partRole";
              }"location";
            }"participant2";
            
            enc.entryRelationship as entr -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as observation, observation.id = uuid() as uuid1, e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , encounter.reasonReference = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
              entr.act as act then{                    

                act.code -> observation.code;
                act -> observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
                act -> observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc1.id) "reference";
                act where act.statusCode.exists().not() then {
                  act->observation.status ='final'"status";
                }"statuscode";
                    act -> observation.note = create('Annotation') as note then{
                        act.text as text then{
                            text.reference as reff -> note.text = (reff.value);
                        }"text";
                        act.text as tx then {
                          tx.reference as ref -> note.text = (ref.value) "val"; 
                        }"String";
                        act.author as auth ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT', e1.resource = create('Practitioner') as practitioner, practitioner.id = uuid() as uuid1, e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
                        auth.time as ti -> note.time= create('dateTime') as value then TSDateTime(ti, value) "notetime";
                        auth.assignedAuthor as assAuth then{
                              
                                assAuth->practitioner.meta as meta then {
                                  assAuth->meta.tag = create('Coding') as coding then {
                                    assAuth -> coding.system ='http://algoritmodiscoring'"system";
                                    assAuth -> coding.code ='ClinicalDocument/body/Encounter/author'"code";
                                  }"coding";
                                }"meta";
                                assAuth.id as id -> practitioner.identifier as identifier then {
                                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                                  id.extension as ext->identifier.value = ext;
                                  id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                                  id.root as r then {
                                    id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                                  }"r";
                                }"identifier";
                                assAuth.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                                  id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                                }"2.16.840.1.113883.2.9.4.3.2";                  
                                // fine modifica
                                //assAuth.id -> practitioner.identifier;
                                assAuth.time as t -> note.text = create('dateTime') as value then TSDateTime(t, value);
                                assAuth.assignedPerson as assPers then{
                                    assPers.name -> practitioner.name;
                                }"name";    
                            }"assAush";
                        }"practitioner";    
                    }"note";
                }"act";
            }"entryRel SUBJ";
        }"encounter";
    }"entry";
}
//--------------------------------------------------------------------------------------------------------

//Sezione Consulenza--------------------------------------------------------------------------------------

group ClinicalDocumentSectionConsulenza(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
      src.title as t -> tgt.title = (t.dataString);
      src.code -> tgt.code;
      src where src.entry.exists() then {
        src.text as cdaText -> tgt.text as fhirText then {
          cdaText -> fhirText.status = 'generated' "narrativeStatus";
          cdaText as t -> fhirText.div = t "narrativeText";
        } "cdaText";
      }"entry_exists";
    //Sezione Narrativa--------------------------------------------------------------------------------------------------------------------------------------------------
      src where src.entry.exists().not() then {
        src.text as cdaText -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('ServiceRequest') as ServiceRequest,  ServiceRequest.id = uuid() as uuid8,  e8.fullUrl = append('https://example/ServiceRequest/', uuid8), request.url = 'ServiceRequest', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/ServiceRequest/' + %ServiceRequest.id) then {
          src -> ServiceRequest.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
          src -> ServiceRequest.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
          src -> ServiceRequest.status='active'"status";
          src -> ServiceRequest.intent='order'"intent";    
                cdaText -> ServiceRequest.note as note then{
                cdaText as t ->note.text =t "reference";
              }"reference";
            }"cdaText";
          }"where";

      //Sezione Strutturata--------------------------------------------------------------------------------------------------------------------------------------------   
      src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('ServiceRequest') as serviceRequest,  serviceRequest.id = uuid() as uuid1,  e1.fullUrl = append('https://example/ServiceRequest/', uuid1), request.url = 'ServiceRequest' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/ServiceRequest/' + %serviceRequest.id), serviceRequest.note as note then {
        
        entry1->serviceRequest.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
        entry1->serviceRequest.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
        entry1 -> serviceRequest.status='active'"status";
        entry1 -> serviceRequest.intent='order'"intent";    
        
        entry1.act as act then{
        act.code -> serviceRequest.code;
          act.text as t -> note.text = (t.dataString) "text"; 
          act.statusCode as code -> serviceRequest.status = (code.code);
          act.performer as perf -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
          perf.time as time  -> serviceRequest.occurrence=create('dateTime') as t then TSDateTime(time,t) "time";
          perf.assignedEntity as assEnt then{

          
              assEnt->practitioner.meta as meta then {
                assEnt->meta.tag = create('Coding') as coding then {
                  assEnt -> coding.system ='http://algoritmodiscoring'"system";
                  assEnt -> coding.code ='ClinicalDocument/body/Consulenze/performer'"code";
                }"coding";
              }"meta";
              assEnt.id as id -> practitioner.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext;
                id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                id.root as r then {
                  id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), serviceRequest.performer  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                }"r";
              }"identifier";
              assEnt.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
              assEnt.assignedPerson as assPer then {
                assPer.name -> practitioner.name;
              }"assPer";
            }"assEnt";
          }"performer";           
          act.participant as parti -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
            parti.time as time  -> serviceRequest.authoredOn=create('dateTime') as t then TSDateTime(time,t) "time";
          parti.participantRole as partRole then {
                partRole->practitioner.meta as meta then {
                partRole->meta.tag = create('Coding') as coding then {
                  partRole -> coding.system ='http://algoritmodiscoring'"system";
                  partRole -> coding.code ='ClinicalDocument/body/Consulenze/participant'"code";
                }"coding";
              }"meta";
              partRole.id as id -> practitioner.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext;
                id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                id.root as r then {
                  id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), serviceRequest.requester  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                }"r";
              }"identifier";
              partRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";

            
              partRole.playingEntity as entity then{
                entity.name -> practitioner.name;
              }"entity";
            }"partRole";
          }"participant";   
        }"ACT";
      }"entry";
}
//---------------------------------------------------------------------------------------------------------

//Sezione Accertamenti--------------------------------------------------------------------------------------
group ClinicalDocumentSectionAccertamenti(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src where src.entry.exists() then {
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";
  }"entry_exists";
  //Sezione Strutturata---------------------------------------------------------------------------------------------------------------------------------------------
  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {    
    entry1.organizer as obs then{      
      src.code -> observation.code;
       obs then ObservationAccertamenti(obs, patient ,enc ,observation, bundle) "act";
    }"obs"; 
  }"entry";
  //Sezione Narrativa--------------------------------------------------------------------------------------------------------------------------------------------
  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('Observation') as Observation,  Observation.id = uuid() as uuid8,  e8.fullUrl = append('https://example/Observation/', uuid8), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %Observation.id) then {
      src -> Observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      src -> Observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
          src.code -> Observation.code;
          src where observation.statusCode.exists().not() then {
              src->Observation.status ='final'"status";
              }"statuscode";
            cdaText -> Observation.note as note then{
            cdaText as t ->note.text =t "reference";
          }"reference";
        }"cdaText";
      }"where";
}


group ObservationAccertamenti (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {
  obs.code -> ob.code;
  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs where obs.statusCode.exists().not() then {
    obs->ob.status ='final'"status";
    }"statuscode";
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
  obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
    obs.effectiveTime as eff-> ob.effective=create('Period') as period then IVLTSPeriod(eff,period);
    }"where";
  obs.value:CD as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        }"qual";
      } "translation";
    }"coding";
  }"val";
  obs.value:CE as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        }"qual";
      } "translation";
    }"coding";
  }"val";
  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
    val.value as value->quantity.value = value;
    val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";
  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";
  obs.value:INT as int->ob.value=(int.value) "value";
  obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";

    obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
    obs.interpretationCode -> ob.interpretation;
    obs.methodCode -> ob.method;
   
    obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
      refRange.observationRange as obsRange -> ref.low = create('SimpleQuantity') as Low  then {
          obsRange.value: IVL_PQ as v  then {
            v.low as l1 then {
              l1.value as decValue-> Low.value = decValue;
              l1.unit as Unit-> Low.unit = Unit;
            }"decValue";          
          }"IVL_PQ";                      
      }"obsRange";              
    }"refRange";  


    obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
      performer.assignedEntity as assEntity then {

        //inizio modifica identifier+meta 
        assEntity->practitioner.meta as meta then {
          assEntity->meta.tag = create('Coding') as coding then {
            assEntity -> coding.system ='http://algoritmodiscoring'"system";
            assEntity -> coding.code ='ClinicalDocument/body/Accertamenti/performer'"code";
          }"coding";
        }"meta";
        assEntity.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext;
          id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
          id.root as r then {
            id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), ob.performer  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
          }"r";
        }"identifier";
        assEntity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"2.16.840.1.113883.2.9.4.3.2";
        //fine modifica
        //assEntity.id -> practitioner.identifier;
        assEntity.assignedPerson as assi then {
          assi.name -> practitioner.name;
        }"assi";
      }"assEntity";
    }"perf";

    obs.participant as participant -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('ServiceRequest') as serviceRequest,  serviceRequest.id = uuid() as uuid1,  e1.fullUrl = append('https://example/ServiceRequest/', uuid1), request.url = 'ServiceRequest' ,ob.basedOn  = create('Reference') as reference,  reference.reference = ('https://example/ServiceRequest/' + %serviceRequest.id) then{
      
      //participant.time as t -> serviceRequest.authoredOn = (t.value);
      participant.time as t -> serviceRequest.authoredOn = create('dateTime') as value then TSDateTime(t, value) "value2";
     
      obs->serviceRequest.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
      obs->serviceRequest.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
      obs -> serviceRequest.status='active'"status";
      obs -> serviceRequest.intent='order'"intent";
      participant.participantRole as participantRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
        
        //modifica meta+identifier
        participantRole->practitioner.meta as meta then {
          participantRole->meta.tag = create('Coding') as coding then {
            participantRole -> coding.system ='http://algoritmodiscoring'"system";
            participantRole -> coding.code ='ClinicalDocument/body/Accertamenti/participant'"code";
          }"coding";
        }"meta";
        participantRole.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext;
          id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
          id.root as r then {
            id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), serviceRequest.requester  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
          }"r";
        }"identifier";
        participantRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"2.16.840.1.113883.2.9.4.3.2";
        //fine modifica         
        
        //participantRole.id -> practitioner.identifier;
        participantRole.playingEntity as pe then{
          pe.name -> practitioner.name;
        }"pe";
      }"participantRole";
    }"participant";

    obs.component as comp -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , ob.hasMember  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then{
      comp.observation as obs then {    
        obs.code -> observation.code;             
        obs.statusCode as statusc where (code='completed') -> observation.status ='final';
        obs.statusCode as statusc where (code='active') -> observation.status ='registered';
        obs.statusCode as statusc where (code='aborted') -> observation.status ='cancelled';
        obs.statusCode as statusc where (code='suspended') -> observation.status ='partial';
        obs where obs.statusCode.exists().not() then {
        obs->observation.status ='final'"status";
        }"statuscode"; 
        
        obs->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
        obs->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
        obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
        obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
          obs.effectiveTime as eff-> ob.effective=create('Period') as period then IVLTSPeriod(eff,period);
          }"where";

        obs.value as val -> observation.value = (val.dataString);
      }"obs";
    }"observation";
}
//-----------------------------------------------------------------------------------------------------------

//Sezione ParametriVitali--------------------------------------------------------------------------------------
group ClinicalDocumentSectionParametriVitali(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
        src.title as t -> tgt.title = (t.dataString);
        src.code -> tgt.code;
        src where src.entry.exists() then {
          src.text as cdaText -> tgt.text as fhirText then {
            cdaText -> fhirText.status = 'generated' "narrativeStatus";
            cdaText as t -> fhirText.div = t "narrativeText";
          } "cdaText";
        }"entry_exists";

      // Sezione Narrativa----------------------------------------------------------------------------------------------------------------------------------------------------
        src where src.entry.exists().not() then {
          src.text as cdaText -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('Observation') as Observation,  Observation.id = uuid() as uuid8,  e8.fullUrl = append('https://example/Observation/', uuid8), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %Observation.id) then {
            src -> Observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            src -> Observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
                src.code -> Observation.code;
                src where observation.statusCode.exists().not() then {
                    src->Observation.status ='final'"status";
                    }"statuscode";
                  cdaText -> Observation.note as note then{
                  cdaText as t ->note.text =t "reference";
                }"reference";
              }"cdaText";
            }"where";
      //Sezione Strutturata --------------------------------------------------------------------------------------------------------------------------------------------------------
        src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
          entry1.organizer as org then{
            org -> observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            org -> observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";     
            org.statusCode as statusc where (code='completed') -> observation.status ='final';
            org.statusCode as statusc where (code='active') -> observation.status ='registered';
            org.statusCode as statusc where (code='aborted') -> observation.status ='cancelled';
            org.statusCode as statusc where (code='suspended') -> observation.status ='partial';
            org where obs.statusCode.exists().not() then {
              org->observation.status ='final'"status";
            }"statuscode";       
            org.code -> observation.code;
            org where org.code.exists().not() then {
              src.code->observation.code;
            }"code";
            org.component as component ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation1,  observation1.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,observation.hasMember  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation1.id) then {
              component.observation as obs then {
                obs -> observation1.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
                obs -> observation1.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
                obs.code -> observation1.code;
                obs.statusCode -> observation1.status;
                obs.statusCode as statusc where (code='completed') -> observation1.status ='final';
                obs.statusCode as statusc where (code='active') -> observation1.status ='registered';
                obs.statusCode as statusc where (code='aborted') -> observation1.status ='cancelled';
                obs.statusCode as statusc where (code='suspended') -> observation1.status ='partial';
                obs where obs.statusCode.exists().not() then {
                obs->observation1.status ='final'"status";
                }"statuscode";           
              
                obs -> observation1.value = create('Quantity') as quant then{
                  obs.value as v -> quant.value = (v.value);
                  obs.value as v -> quant.unit = (v.unit);
                }"quant";
                obs.value:CE as val then{
                  val->ob.value =create('CodeableConcept') as ce then {
                    val.originalText as originalText then{
                      originalText.reference as reference-> ce.text=reference;
                    }"originltext";
                    val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      val.codeSystemVersion as version -> coding.version = cast(version, 'string');
                    }"code";
                    val.translation as translation -> ce.coding as coding then {
                      translation.code as code -> coding.code = cast(code, 'string');
                      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      translation.displayName as display -> coding.display = cast(display, 'string');
                      translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
                      translation.qualifier as qualifier then{
                        qualifier.value as value -> ce.coding as coding then {
                          value.code as code -> coding.code = cast(code, 'string');
                          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                          value.displayName as display -> coding.display = cast(display, 'string');
                          value.codeSystemVersion as version -> coding.version = cast(version, 'string');
                        }"value";
                      }"qualifier";
                    }"translation";
                  }"coding";
                }"val";
                obs.value:CD as val then{
                  val->ob.value =create('CodeableConcept') as ce then {
                    val.originalText as originalText then{
                      originalText.reference as reference-> ce.text=reference;
                    }"originltext";
                    val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      val.codeSystemVersion as version -> coding.version = cast(version, 'string');
                    }"code";
                    val.translation as translation -> ce.coding as coding then {
                      translation.code as code -> coding.code = cast(code, 'string');
                      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      translation.displayName as display -> coding.display = cast(display, 'string');
                      translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
                      translation.qualifier as qualifier then{
                        qualifier.value as value -> ce.coding as coding then {
                          value.code as code -> coding.code = cast(code, 'string');
                          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                          value.displayName as display -> coding.display = cast(display, 'string');
                          value.codeSystemVersion as version -> coding.version = cast(version, 'string');
                        }"value";
                      }"qualifier";
                    }"translation";
                  }"coding";
                }"val";
                obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";
                obs.value:INT as int->ob.value=(int.value) "value";
                obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";
                obs.interpretationCode -> observation1.interpretation;
                obs.methodCode -> observation1.method;
                obs.targetSiteCode -> observation1.bodySite;
                
                obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
                    performer.time as t -> observation1.issued = create('dateTime') as date then TSDateTime(t,date);
                    performer.assignedEntity as assEntity then{
                    
                    //inizio modifica meta+ identifier
                    assEntity->practitioner.meta as meta then {
                      assEntity->meta.tag = create('Coding') as coding then {
                        assEntity -> coding.system ='http://algoritmodiscoring'"system";
                        assEntity -> coding.code ='ClinicalDocument/body/ParametriVitali/performer'"code";
                      }"coding";
                    }"meta";
                    assEntity.id as id -> practitioner.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext;
                      id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                      id.root as r then {
                        id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), observation1.performer  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                      }"r";
                    }"identifier";
                    assEntity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"2.16.840.1.113883.2.9.4.3.2";                
                    //fine modifica
                    
                    //assEntity.id -> practitioner.identifier;
                    assEntity.assignedPerson as assPerson then{
                      assPerson.name -> practitioner.name;
                    }"assPerson";
                  }"assEntity";
                }"performer";

                obs.participant as parti -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('ServiceRequest') as serviceRequest,  serviceRequest.id = uuid() as uuid1,  e1.fullUrl = append('https://example/ServiceRequest/', uuid1), request.url = 'ServiceRequest' ,observation1.basedOn  = create('Reference') as reference,  reference.reference = ('https://example/ServiceRequest/' + %serviceRequest.id) then{
                  
                  parti->serviceRequest.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
                  parti->serviceRequest.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
                  parti -> serviceRequest.status='active'"status";
                  parti -> serviceRequest.intent='order'"intent";                        
                  
                  parti.time as t -> serviceRequest.authoredOn = create('dateTime') as value then TSDateTime(t, value) "value2";
                  parti.participantRole as partRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
                    
                    //inizio modifica meta + identifier
                    partRole->practitioner.meta as meta then {
                      partRole->meta.tag = create('Coding') as coding then {
                        partRole -> coding.system ='http://algoritmodiscoring'"system";
                        partRole -> coding.code ='ClinicalDocument/body/ParametriVitali/participant'"code";
                      }"coding";
                    }"meta";
                    partRole.id as id -> practitioner.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext;
                      id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                      id.root as r then {
                        id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), serviceRequest.requester  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                      }"r";
                    }"identifier";
                    partRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"2.16.840.1.113883.2.9.4.3.2";
                    //fine modifica
                    
                    //partRole.id -> practitioner.identifier;
                    partRole.playingEntity as playingEntity then{
                      playingEntity.name -> practitioner.name;
                    }"name";
                  }"partRole";
                }"parti";

              }"obs";
            }"component";
          }"obs"; 
        }"Observation";
}
//-----------------------------------------------------------------------------------------------------------------

//Sezione terapia Farma in Pronto----------------------------------------------------------------------------------

group ClinicalDocumentSectionTerapiaFarmacoInPronto(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
        src.title as t -> tgt.title = (t.dataString);
        src.code -> tgt.code;
        src where src.entry.exists() then {
          src.text as cdaText -> tgt.text as fhirText then {
            cdaText -> fhirText.status = 'generated' "narrativeStatus";
            cdaText as t -> fhirText.div = t "narrativeText";
          } "cdaText";
        }"entry_exists";
      // Sezione Narrativa------------------------------------------------------------------------------------------------------------------------------------------------
        src where src.entry.exists().not() then {
          src.text as cdaText -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('MedicationAdministration') as MedicationAdministration,  MedicationAdministration.id = uuid() as uuid8,  e8.fullUrl = append('https://example/MedicationAdministration/', uuid8), request.url = 'MedicationAdministration', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationAdministration/' + %MedicationAdministration.id) then {
            src -> MedicationAdministration.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            src -> MedicationAdministration.context=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
            src ->MedicationAdministration.effective = create('Period') as period then{
            src->period.start=(start.now())"low";
            src->period.end=(end.now())"high";
            }"Period";
          src where sub.statusCode.exists().not() then {
            src->MedicationAdministration.status ='completed'"status";
            }"statuscode";
                  cdaText -> MedicationAdministration.note as note then{
                  cdaText as t ->note.text =t "reference";
                  cdaText ->  MedicationAdministration.medication =create('CodeableConcept') as medication then {
                    cdaText as txt -> medication.text=txt "text";
                  }"medication";
                }"reference";
              }"cdaText";
            }"where";
      // Sezione Strutturata-------------------------------------------------------------------------------------------------------------------------------------------------
        src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationAdministration') as medAdm,  medAdm.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationAdministration/', uuid1), request.url = 'MedicationAdministration' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationAdministration/' + %medAdm.id), medAdm.note as note then {
          entry1->medAdm.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
          entry1->medAdm.context=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";    
          entry1.substanceAdministration as sub then{
            sub.text as tx then{ 
              tx.reference as reff -> note.text = (reff.value);
            }"txx";
            sub.statusCode -> medAdm.status;
            sub.effectiveTime: IVL_TS as eff -> medAdm.effective =create('Period') as period then IVLTSPeriod(eff,period);
              
            sub.effectiveTime: PIVL_TS as eff -> medAdm.dosage as dosage then{
              eff -> dosage.rate = create('Ratio') as ratio then {
                eff -> ratio.numerator = create('Quantity') as num then{
                  eff.period as per -> num.value = (per.value);
                  eff.period as per -> num.unit = (per.unit);
                }"num";
                eff -> ratio.denominator = create('Quantity') as num then{
                  eff.period as per -> num.value = '1';
                  eff.period as per -> num.unit = (per.unit);
                }"den";
              }"ratio";
            }"eff2";
            sub -> medAdm.dosage as dosage then{
              sub.routeCode -> dosage.route;
            }"route";
            sub -> medAdm.dosage as dosage then{
              sub.approachSiteCode -> dosage.site;
            }"route";
            
            sub -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationRequest') as medRq,  medRq.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationRequest/', uuid1), request.url = 'MedicationRequest' ,medAdm.request  = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medRq.id) then{
              
              sub.entryRelationship as rel then{
                rel.supply as supl -> medRq.dispenseRequest = create('BackboneElement') as disp  then{
                  supl -> disp.quantity = create('SimpleQuantity') as q then {
                    supl.quantity as qua -> q.value = (qua.value) "fds";
                  }"SimpleQuantity";
                }"obs";
              }"rel";
              sub-> medRq.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
              sub-> medRq.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";    
              sub -> medRq.status='active'"status";
              sub -> medRq.intent='order'"intent";            
              
              sub -> medRq.medication = create('CodeableConcept') as cod then{
                sub -> cod.text = 'medication' "Medi";
              }"code";

              sub.doseQuantity as quantity then  {
                quantity -> medRq.dosageInstruction = create('Dosage') as dosage then{
                  quantity -> dosage.doseAndRate as dosRange then{
                    quantity -> dosRange.dose = create('Range') as range then {
                      quantity ->  range.low = create('SimpleQuantity') as quant then{
                        quantity.low as l -> quant.value = (l.value) "v1";
                        quantity.low as l -> quant.unit = (l.unit) "v1";
                      }"low";
                      quantity ->  range.high = create('SimpleQuantity') as quant then{
                        quantity.high as h -> quant.value = (h.value) "v1";
                        quantity.high as h -> quant.unit = (h.unit) "v1";
                      }"high";
                    }"range";
                  }"dos";
                }"dosage";
              }"dose_quantity";
                sub.rateQuantity as rate then {
                  rate -> medRq.dosageInstruction = create('Dosage') as dosage then{
                    rate -> dosage.doseAndRate as dosRange then{
                      rate -> dosRange.dose = create('Range') as range then {
                        rate ->  range.low = create('SimpleQuantity') as quant then{
                          rate.low as l -> quant.value = (l.value) "v1";
                          rate.low as l -> quant.unit = (l.unit) "v1";
                        }"low";
                        rate ->  range.high = create('SimpleQuantity') as quant then{
                          rate.high as h -> quant.value = (h.value) "v1";
                          rate.high as h -> quant.unit = (h.unit) "v1";
                        }"high";
                      }"range";
                    }"dos";
                  }"dosage";
                }"Rate_quantity";

              sub.participant as part then{
                part.time as t -> medRq.authoredOn = create('dateTime') as date then TSDateTime(t,date) "time";  
                part.participantRole as partRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
                  
                  //inizio meta+identifier
                  partRole->practitioner.meta as meta then {
                    partRole->meta.tag = create('Coding') as coding then {
                      partRole -> coding.system ='http://algoritmodiscoring'"system";
                      partRole -> coding.code ='ClinicalDocument/body/TerapiaFarmacologicaPS/participant'"code";
                    }"coding";
                  }"meta";
                  partRole.id as id -> practitioner.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext;
                    id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                    id.root as r then {
                      id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), medRq.requester  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                    }"r";
                  }"identifier";
                  partRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                    id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                  }"2.16.840.1.113883.2.9.4.3.2";            
                  //fine modifiche
                  
                  partRole.id -> practitioner.identifier;
                  partRole.playingEntity as play then{
                    play.name -> practitioner.name;
                  }"play";
                }"Part";
              }"part";
            }"medicationRequest";

            sub -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as med,  med.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Medication/', uuid1), request.url = 'Medication' ,medAdm.medication  = create('Reference') as reference,  reference.reference = ('https://example/Medication/' + %med.id) then{
              sub.administrationUnitCode as adduni then {
                sub.administrationUnitCode -> med.form;
                sub.consumable as consum then{
                  consum.manufacturedProduct as manuProd then{
                    manuProd.manufacturedMaterial as manuMt then{
                      manuMt.code -> med.code;
                    }"manuMat";
                  }"manuMat";
                }"consum";
              }"unicode";
              sub.entryRelationship as entryR then{
                entryR.observation as observation then{
                      observation.code where displayName='Grammatura' -> med.ingredient as ingredient then{
                        sub.consumable as consumable then{
                                consumable.manufacturedProduct as manufacturedProduct then{
                                    manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                                        manufacturedMaterial.code as code -> ingredient.item = create('CodeableConcept') as value then CECodeableConcept(code,value) "CE";
                                    }"material";
                                }"product";
                            }"consumable";
                            observation.value as value -> ingredient.strength as strength then{
                                value -> strength.numerator as numerator then{
                                    value -> numerator.value = (value.value) "valueN";
                                } "numerator";
                                value -> strength.denominator as denominator then{
                                    value -> denominator.value = 1 "valueD";
                                } "denominator";
                          }"strenght";
                        }"ingredient";
                        observation.code where displayName='Quantità nella Confezione' then{
                            observation.value as value -> med.amount as amount then{
                                value -> amount.numerator  as numerator then{
                                    value -> numerator.value = (value.value) "valueN";
                                } "numerator";
                                value -> amount.denominator as denominator then{
                                    value -> denominator.value = 1 "valueD";
                                } "denominator";
                            }"amount";
                      }"quantità";
                  }"obs";
              }"entry R";
              
      }"med";     

      

      sub.performer as perf -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
        
      perf ->medAdm.note as note then {
        perf->note.text='performertime' "notaa";
       perf.time as t ->note.time= create('dateTime') as value then TSDateTime(t, value) "notetime";
      }"preftime";
      perf.assignedEntity as ent then{

          // inizio modifica meta+identifier
          ent->practitioner.meta as meta then {
            ent->meta.tag = create('Coding') as coding then {
              ent -> coding.system ='http://algoritmodiscoring'"system";
              ent -> coding.code ='ClinicalDocument/body/TerapiaFarmacologicaPS/performer'"code";
            }"coding";
          }"meta";
          ent.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext;
            id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
            id.root as r then {
              id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), medAdm.performer as p, p.actor = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
            }"r";
          }"identifier";
          ent.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";
          //fine modifica

          //ent.id -> practitioner.identifier;
          ent.assignedPerson as assPerson then{
            assPerson.name -> practitioner.name;
          }"assperson";
        }"ent";
        
      }"perform";
    }"MedAdm";
  }"entry";
}
//------------------------------------------------------------------------------------------------------------------

//-
group ClinicalDocumentSectionPianoCuraDimissione(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
 
 src as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('CarePlan') as careplan,  careplan.id = uuid() as uuid1,  e1.fullUrl = append('https://example/CarePlan/', uuid1), request.url = 'CarePlan' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/CarePlan/' + %careplan.id) then {
    src-> careplan.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    src-> careplan.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";    
    src -> careplan.status='active'"status";
    src -> careplan.intent='order'"intent";
    src.text as cdaText -> careplan.note as carenote then {
      cdaText as t -> carenote.text=t "notetxt";
      entry1.author as author then {
        author.time as t-> carenote.time= create('dateTime') as value then TSDateTime(t, value) "notetime";
        author.assignedAuthor as assauthor -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
          
          //inizio modifica meta+identifier
          assauthor->practitioner.meta as meta then {
            assauthor->meta.tag = create('Coding') as coding then {
              assauthor -> coding.system ='http://algoritmodiscoring'"system";
              assauthor -> coding.code ='ClinicalDocument/body/PianoCuraDimissione/author'"code";
            }"coding";
          }"meta";
          assauthor.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext;
            id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
            id.root as r then {
              id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), carenote.author = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
            }"r";
          }"identifier";
          assauthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";            
          //fine modifica
          
          //assauthor.id->practitioner.identifier "cfauthor";
          assauthor.assignedPerson as pers then{
            pers.name -> practitioner.name;
            }"namepers";
          }"authpract";
        }"CFauthor";
      }"author";
      entry1.entry as entry2 then{ 
        entry2.act as entryact ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('ServiceRequest') as servicerequest,  servicerequest.id = uuid() as uuid1,  e1.fullUrl = append('https://example/ServiceRequest/', uuid1), request.url = 'ServiceRequest' , careplan.activity = create('BackboneElement') as activ, activ.reference =create('Reference') as reference, reference.reference = ('https://example/ServiceRequest/' + %servicerequest.id) then{

          entryact->servicerequest.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
          entryact->servicerequest.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
          entryact -> servicerequest.status='active'"status";
          entryact -> servicerequest.intent='order'"intent";          

          entryact-> servicerequest.identifier = create('BackboneElement') as identif then {
           
            entryact.reference as actref then {
              actref.externalAct as extact then{
             
                extact->servicerequest.identifier = create('BackboneElement') as identif3 then{
                  extact.id as id  then {
                    id.root as r ->identif3.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identif3.value = ext then {
                      id.assigningAuthorityName as s -> identif3.assigner as a, a.display = s;
                    }"ext";
                 }"idnetn";
              }"extact";
            }"actref";
          }"jarilemes";
          entryact.code->servicerequest.code;
          entryact.statusCode->servicerequest.status;
          entryact.author as actauthor then {
            actauthor.time as t->servicerequest.authoredOn=create('dateTime') as date then TSDateTime(t,date);
            actauthor.assignedAuthor as assauthor -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
              
              //inizio modifica identifier
              assauthor->practitioner.meta as meta then {
                assauthor->meta.tag = create('Coding') as coding then {
                  assauthor -> coding.system ='http://algoritmodiscoring'"system";
                  assauthor -> coding.code ='ClinicalDocument/body/PianoCuraDimissione/author'"code";
                }"coding";
              }"meta";
              assauthor.id as id -> practitioner.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext;
                id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                id.root as r then {
                  id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), servicerequest.requester = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                }"r";
              }"identifier";
              assauthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
              //fine modifica
              
              //assauthor.id->practitioner.identifier "cfauthor";
              assauthor.assignedPerson as pers then{
                pers.name -> practitioner.name;
                }"namepers";
            }"author";
          }"servReq";
        }"entry2";
      }"carnote";
    }"entry1";
  }"entryident3";
}

//-------Dimissione------------------------------------------------------------------------------------------------------
group ClinicalDocumentSectionDimissione(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";

  src.entry as entry1  then {
    entry1.act as act -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Encounter') as encountert,  encountert.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Encounter/', uuid1), request.url = 'Encounter' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encountert.id) then{
      
      act -> encountert.status = 'finished' "status";
      act -> encountert.class = create('Coding') as cl then{
        act -> cl.code = 'AMB' "code";
        act -> cl.display = 'ambulatory' "code";
      }"class";

      act -> encountert.partOf  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + enc.id)"ref enc";
      act -> encountert.subject  = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + patient.id)"ref enc"; 
      act.code -> encountert.type;
      act where effectiveTime.low.exists() or effectiveTime.high.exists() then {
        act.effectiveTime as eff  -> encountert.period=create('Period') as period then IVLTSPeriod(eff,period);
        }"where";
        // effectiveTime = time-stamp
        act where effectiveTime.low.exists().not() or effectiveTime.high.exists().not() then {
        act.effectiveTime as effectivetime1 -> encountert.period = create('Period') as period then{
          effectivetime1 -> period.start =  create('dateTime') as start then TSDateTime(effectivetime1,start) "val"; 
        }"efft";
        }"where";



      act.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
      //performer.time as ti -> note.time = (ti.value);
       performer.assignedEntity as assEnty then{
       
        assEnty->practitioner.meta as meta then {
          assEnty->meta.tag = create('Coding') as coding then {
            assEnty -> coding.system ='http://algoritmodiscoring'"system";
            assEnty -> coding.code ='ClinicalDocument/body/Dimissione/performer'"code";
          }"coding";
        }"meta";
        assEnty.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext;
          id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
          id.root as r then {
            id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), encountert.participant as perf then {  
            performer->perf.period=create('Period') as period then {
              performer.time as time ->period.start= create('dateTime') as start then TSDateTime(time,start);
            }"period";
            performer ->perf.individual  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
          }"perf";
          }"r";
        }"identifier";
        assEnty.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"2.16.840.1.113883.2.9.4.3.2";
      
        assEnty.assignedPerson as assPers then{
           assPers.name -> practitioner.name;
         }"assPer";
       }"ass";
      }"erformer";
      //Encounter Post dimissione---------------------------------------------------------------------------------------------------------------------------------------
      act.entryRelationship as entriRel then {
        entriRel.encounter as enc1 then{
          enc1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Encounter') as encountert1,  encountert1.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Encounter/', uuid1), request.url = 'Encounter' , tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encountert1.id), encountert1.partOf  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + encountert.id)  then {
            enc1 -> encountert1.status = 'finished' "status";
            enc1 -> encountert1.class = create('Coding') as cl then{
              enc1 -> cl.code = 'AMB' "code";
              enc1 -> cl.display = 'ambulatory' "code";
            }"class";                        
            
            enc1 -> encountert1.subject  = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + patient.id)"ref enc";
            enc1.id -> encountert1.identifier;
            // enc1.code -> encountert1.type;
            enc1 -> encountert1.type = create('CodeableConcept') as ti then{
              enc1 -> ti.coding = create('Coding') as cod then{
                enc1.code as c -> cod.code = (c.code) "code";
                enc1.code as c then{
                  c.codeSystem as s -> cod.system = translate(s, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "system";
                }"syst";
                enc1.code as c -> cod.display = (c.displayName) "dispaly";
              }"coding"; 
              enc1.text as tx then{
                tx.reference as ref -> ti.text = (ref.value) "val"; 
              }"text";              
            }"code";
            

            enc1 where effectiveTime.low.exists() or effectiveTime.high.exists() then {
              enc1.effectiveTime as eff  -> encountert1.period=create('Period') as period then IVLTSPeriod(eff,period);
              }"where";
              // effectiveTime = time-stamp
              enc1 where effectiveTime.low.exists().not() or effectiveTime.high.exists().not() then {
                enc1.effectiveTime as effectivetime1 -> encountert1.period = create('Period') as period then{
                effectivetime1 -> period.start =  create('dateTime') as start then TSDateTime(effectivetime1,start) "val"; 
              }"efft";
              }"where";

            enc1.participant as part where(typeCode = 'LOC')  -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Location') as location,  location.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Location/', uuid1), request.url = append('Location/', uuid1) then {
              part-> location.meta as meta then {
                part-> meta.tag = create('Coding') as coding then {
                part -> coding.system ='http://algoritmodiscoring'"system";
                part -> coding.code ='ClinicalDocument/body/Dimissione/participant'"code";
                }"coding";
              }"meta";              
              
              part.time as tim -> encountert1.location as locat then{
                  tim -> locat.period  =create('Period') as period then IVLTSPeriod(tim,period)"time";
                  part.time as tim  -> locat.period = create('Period') as period then{
                    tim -> period.start = create('dateTime') as start then TSDateTime(tim,start) "val";
                   }"time";
              part.participantRole as partRole then{
                partRole.id as id -> location.identifier as identifier then {
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext then {
                    partRole -> request.url = append('Location?identifier=',ext)"UUID";
                  }"ext";
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                  id.root as r then {
                    id.extension as ext  -> location.id = (r +'-'+ ext) as uuid,  e1.fullUrl = append('https://example/Location/', uuid), locat.location  = create('Reference') as reference,  reference.reference = ('https://example/Location/' + %location.id) "idasi";       
                  }"r" ;
                }"identifier";                          
               //partRole.id -> location.identifier;  
                partRole.code -> location.type;
              }"partRole";
            }"location1";
            }"Location";
           
            enc1.entryRelationship as entryrel2 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , encountert1.reasonReference  = create('BackboneElement') as reference ,  reference.reference = ('https://example/Observation/' + %observation.id) then{
              entryrel2.observation as obs then{
                obs->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
                obs->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encountert1.id) "reference"; 
                obs.code -> observation.code;
                obs.statusCode as statusc where (code='completed') -> observation.status ='final';
                obs.statusCode as statusc where (code='active') -> observation.status ='registered';
                obs.statusCode as statusc where (code='aborted') -> observation.status ='cancelled';
                obs.statusCode as statusc where (code='suspended') -> observation.status ='partial';
                obs  -> observation.status = 'final' "not present";
                obs.effectiveTime as effectiveTime -> observation.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
                obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
                  obs.effectiveTime as eff-> observation.effective=create('Period') as period then IVLTSPeriod(eff,period);
                  }"where";
                obs.value:INT as int->observation.value=(int.value) "value";
                obs.value:BL as boolean ->observation.value=(boolean.value)"boolean";
                obs.value:CE as val then{
                  val->observation.value =create('CodeableConcept') as ce then {
                    val.originalText as originalText then{
                      originalText.reference as reference-> ce.text=reference;
                    }"originltext";
                    val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      val.codeSystemVersion as version -> coding.version = cast(version, 'string');
                    }"code";
                    val.translation as translation -> ce.coding as coding then {
                      translation.code as code -> coding.code = cast(code, 'string');
                      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      translation.displayName as display -> coding.display = cast(display, 'string');
                      translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
                      translation.qualifier as qualifier then{
                        qualifier.value as value -> ce.coding as coding then {
                          value.code as code -> coding.code = cast(code, 'string');
                          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                          value.displayName as display -> coding.display = cast(display, 'string');
                          value.codeSystemVersion as version -> coding.version = cast(version, 'string');
                        }"value";
                      }"qualifier";
                    }"translation";
                  }"coding";
                }"val";
                obs.value:CD as val then{
                  val->observation.value =create('CodeableConcept') as ce then {
                    val.originalText as originalText then{
                      originalText.reference as reference-> ce.text=reference;
                    }"originltext";
                    val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      val.codeSystemVersion as version -> coding.version = cast(version, 'string');
                    }"code";
                    val.translation as translation -> ce.coding as coding then {
                      translation.code as code -> coding.code = cast(code, 'string');
                      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      translation.displayName as display -> coding.display = cast(display, 'string');
                      translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
                      translation.qualifier as qualifier then{
                        qualifier.value as value -> ce.coding as coding then {
                          value.code as code -> coding.code = cast(code, 'string');
                          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                          value.displayName as display -> coding.display = cast(display, 'string');
                          value.codeSystemVersion as version -> coding.version = cast(version, 'string');
                        }"value";
                      }"qualifier";
                    }"translation";
                  }"coding";
                }"val";
                obs.value:PQ as val then{
                  val->observation.value = create('Quantity') as quantity then {
                    val.value as value->quantity.value = value;
                    val.unit as unit-> quantity.unit = unit "unit";
                  }"quantity";
                }"valueQuantity";
                obs.value:ST as value->observation.value =create('string'),observation.value= (value.dataString) "value";
  
              }"obs";
            }"entryrel2";
          }"enc1";
        }"enc";
      }"entriRel";
      //Trasferimento post dimissione-------------------------------------------------------------------------------------------------------------------------------------
      act.entryRelationship as entriRel2 then {
        entriRel2.act as a then{
           a -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Encounter') as encountert2,  encountert2.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Encounter/', uuid1), request.url = 'Encounter' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + encountert2.id),encountert2.partOf  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + encountert.id)  then {
            a -> encountert2.status = 'finished' "status";
            a -> encountert2.class = create('Coding') as cl then{
              a -> cl.code = 'AMB' "code";
              a -> cl.display = 'ambulatory' "code";
            }"class";
            a -> encountert2.subject  = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + patient.id)"ref enc";
            a where effectiveTime.low.exists() or effectiveTime.high.exists() then {
              a.effectiveTime as eff  -> encountert2.period=create('Period') as period then IVLTSPeriod(eff,period);
              }"where";
              // effectiveTime = time-stamp
              a where effectiveTime.low.exists().not() or effectiveTime.high.exists().not() then {
                a.effectiveTime as effectivetime1 -> encountert2.period = create('Period') as period then{
                effectivetime1 -> period.start =  create('dateTime') as start then TSDateTime(effectivetime1,start) "val"; 
              }"efft";
              }"where";             
            
            a -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Location') as location,  location.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Location/', uuid1), request.url = append('Location/', uuid1) then{

              a.text as tx then {
                tx.reference as ref -> location.description = (ref.value) "dfs";
              }"text";
              a.participant as part   then {              
                part-> location.meta as meta then {
                  part-> meta.tag = create('Coding') as coding then {
                  part -> coding.system ='http://algoritmodiscoring'"system";
                  part -> coding.code ='ClinicalDocument/body/Dimissione/act'"code";
                  }"coding";
                }"meta";              
                
                part.time as tim -> encountert2.location as locat then{
                    tim -> locat.period = create('Period') as period then IVLTSPeriod(tim,period)"time";
                    part.time as tim  -> locat.period = create('Period') as period then{
                      tim -> period.start = create('dateTime') as start then TSDateTime(tim,start) "val";
                     }"time";
                    
                part.participantRole as partRole then{

                  partRole.id as id -> location.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext then {
                      partRole -> request.url = append('Location?identifier=',ext)"UUID";
                    }"ext";
                    id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                    id.root as r then {
                      id.extension as ext  -> location.id = (r +'-'+ ext) as uuid,  e1.fullUrl = append('https://example/Location/', uuid),  locat.location  = create('Reference') as reference,  reference.reference = ('https://example/Location/' + %location.id) "idasi";       
                    }"r" ;
                  }"identifier";  

                
                  //partRole.id -> location.identifier;  
                  partRole.code -> location.type;
                }"partRole";
              }"loc2";
              }"Location";
            }"loc";
            a.entryRelationship as entryrel2 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , encountert2.reasonReference  = create('BackboneElement') as reference ,  reference.reference = ('https://example/Observation/' + %observation.id) then{
              entryrel2.observation as obs then{
                obs->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
                obs->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encountert2.id) "reference"; 
                obs.code -> observation.code;
                obs.statusCode as statusc where (code='completed') -> observation.status ='final';
                obs.statusCode as statusc where (code='active') -> observation.status ='registered';
                obs.statusCode as statusc where (code='aborted') -> observation.status ='cancelled';
                obs.statusCode as statusc where (code='suspended') -> observation.status ='partial';
                obs  -> observation.status = 'final' "not present";
                obs.effectiveTime as effectiveTime -> observation.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
                obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
                  obs.effectiveTime as eff-> observation.effective=create('Period') as period then IVLTSPeriod(eff,period);
                  }"where";
                obs.value:INT as int->observation.value=(int.value) "value";
                obs.value:BL as boolean ->observation.value=(boolean.value)"boolean";
                obs.value:CE as val then{
                  val->observation.value =create('CodeableConcept') as ce then {
                    val.originalText as originalText then{
                      originalText.reference as reference-> ce.text=reference;
                    }"originltext";
                    val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      val.codeSystemVersion as version -> coding.version = cast(version, 'string');
                    }"code";
                    val.translation as translation -> ce.coding as coding then {
                      translation.code as code -> coding.code = cast(code, 'string');
                      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      translation.displayName as display -> coding.display = cast(display, 'string');
                      translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
                      translation.qualifier as qualifier then{
                        qualifier.value as value -> ce.coding as coding then {
                          value.code as code -> coding.code = cast(code, 'string');
                          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                          value.displayName as display -> coding.display = cast(display, 'string');
                          value.codeSystemVersion as version -> coding.version = cast(version, 'string');
                        }"value";
                      }"qualifier";
                    }"translation";
                  }"coding";
                }"val";
                obs.value:CD as val then{
                  val->observation.value =create('CodeableConcept') as ce then {
                    val.originalText as originalText then{
                      originalText.reference as reference-> ce.text=reference;
                    }"originltext";
                    val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      val.codeSystemVersion as version -> coding.version = cast(version, 'string');
                    }"code";
                    val.translation as translation -> ce.coding as coding then {
                      translation.code as code -> coding.code = cast(code, 'string');
                      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      translation.displayName as display -> coding.display = cast(display, 'string');
                      translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
                      translation.qualifier as qualifier then{
                        qualifier.value as value -> ce.coding as coding then {
                          value.code as code -> coding.code = cast(code, 'string');
                          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                          value.displayName as display -> coding.display = cast(display, 'string');
                          value.codeSystemVersion as version -> coding.version = cast(version, 'string');
                        }"value";
                      }"qualifier";
                    }"translation";
                  }"coding";
                }"val";
                obs.value:PQ as val then{
                  val->observation.value = create('Quantity') as quantity then {
                    val.value as value->quantity.value = value;
                    val.unit as unit-> quantity.unit = unit "unit";
                  }"quantity";
                }"valueQuantity";
                obs.value:ST as value->observation.value =create('string'),observation.value= (value.dataString) "value";
  
              }"obs";
            }"entryrel2";
           }"act";
        }"a";
     }"entri-act";
     //--------------Diagnosi alla dimissione-------------------------------------------------------------
     act.entryRelationship as entryrel2 then{
      entryrel2.observation as obs then{
        obs.code as code where (code = '29308-4') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , encountert.reasonReference  = create('Reference') as reference ,  reference.reference = ('https://example/Observation/' + %observation.id) then{
            obs->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
            obs->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encountert.id) "reference"; 
                obs.code -> observation.code;
                obs.statusCode as statusc where (code='completed') -> observation.status ='final';
                obs.statusCode as statusc where (code='active') -> observation.status ='registered';
                obs.statusCode as statusc where (code='aborted') -> observation.status ='cancelled';
                obs.statusCode as statusc where (code='suspended') -> observation.status ='partial';
               // obs where obs.statusCode.exists().not() then {
                    obs->observation.status ='final'"status";
                  //  }"statuscode";
               obs.effectiveTime as effectiveTime -> observation.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
               obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
                obs.effectiveTime as eff-> observation.effective=create('Period') as period then IVLTSPeriod(eff,period);
                }"where";
               obs.value as val then{
                  val->observation.value =create('CodeableConcept') as ce then {
                    val.originalText as originalText then{
                      originalText.reference as reference-> ce.text=reference;
                    }"originltext";
                    val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      val.codeSystemVersion as version -> coding.version = cast(version, 'string');
                    }"code";
                    val.translation as translation -> ce.coding as coding then {
                      translation.code as code -> coding.code = cast(code, 'string');
                      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      translation.displayName as display -> coding.display = cast(display, 'string');
                      translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
                      translation.qualifier as qualifier then{
                        qualifier.value as value -> ce.coding as coding then {
                          value.code as code -> coding.code = cast(code, 'string');
                          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                          value.displayName as display -> coding.display = cast(display, 'string');
                          value.codeSystemVersion as version -> coding.version = cast(version, 'string');
                        }"value";
                      }"qualifier";
                    }"translation";
                  }"coding";
                }"val";
                obs.value:INT as int->ob.value=(int.value) "value";
                obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";
                obs.value:PQ as val then{
                  val->ob.value = create('Quantity') as quantity then {
                    val.value as value->quantity.value = value;
                    val.unit as unit-> quantity.unit = unit "unit";
                  }"quantity";
                }"valueQuantity";
                obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";


         }"222";
      }"obs";
      }"entryrel2";
      //--------Esito----------------------------
      act.entryRelationship as entriRel3 then{
        entriRel3.observation as obs2 then{
            obs2.code as code then {
            code.code where (code.code = '11302-7') then { 
            obs2 -> encountert.hospitalization as hospital then{
            obs2.value -> hospital.dischargeDisposition;	
          }"hospital";          
      }"entry-obs1";
    }"act";
    }"x";
    }"3";

    }"act";
  }"entry1";

  src.entry as entry1 then {
    entry1.observation as obs then {
      obs -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then{
    
      obs.value as val where("xsi:type" = 'BL') -> observation.value = (val.value);
      obs then Observation(obs, patient ,enc ,observation, bundle) "act";
      }"obstarg";
    }"obs"; 
  }"entry";

}
//-----------------------------------------------------------------------------------------------------------------------

//------------------------------TerapiaFarmacologicaDimissione-----------------------------------------------------------------------------------------
group ClinicalDocumentSectionTerapiaFarmacologicaDimissione(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  //Sezione Narrativa------------------------------------------------------------------------------------------------------------------------------------------------
  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationRequest') as medRq,  medRq.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationRequest/', uuid1), request.url = 'MedicationRequest' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medRq.id), medRq.note = create('Annotation') as note then {
      cdaText ->note.text =cdaText "reference";  
      cdaText-> medRq.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      cdaText-> medRq.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";     
      cdaText -> medRq.status='active'"status";
      cdaText -> medRq.intent='order'"intent";  
    src.author as auth -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1)  then{
      auth.time as t -> note.time= create('dateTime') as value then TSDateTime(t, value);
      auth.assignedAuthor as assAuth then{
        //  assAuth.time -> note.time;
       assAuth->practitioner.meta as meta then {
          assAuth->meta.tag = create('Coding') as coding then {
            assAuth -> coding.system ='http://algoritmodiscoring'"system";
            assAuth -> coding.code ='ClinicalDocument/body/TerapiaFarmacologicaDimissione/author'"code";
          }"coding";
        }"meta";
        assAuth.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext;
          id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
          id.root as r then {
            id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2),note.author  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
          }"r";
        }"identifier";
        assAuth.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"2.16.840.1.113883.2.9.4.3.2";
        assAuth.assignedPerson as asspers then{
          asspers.name -> practitioner.name;
        }"assPers";
      }"assAuth";
    }"auth";
      src ->  medRq.medication =create('CodeableConcept') as medication then {
        src.text as txt -> medication.text=txt "text";
    }"medicationesiste";
    
  }"note";
}"text";

   // Sezione Strutturata------------------------------------------------------------------------------------------------------------------------------------------
   src where src.entry.exists() then {
   src -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationRequest') as medRq,  medRq.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationRequest/', uuid1), request.url = 'MedicationRequest' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medRq.id), medRq.note = create('Annotation') as note then {
    src.text as t ->note.text =t "reference"; 
    src-> medRq.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    src-> medRq.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";     
    src -> medRq.status='active'"status";
    src -> medRq.intent='order'"intent";  
    src.author as auth -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1)  then{
      auth.time as t ->  note.time= create('dateTime') as value then TSDateTime(t, value);
      auth.assignedAuthor as assAuth then{
        //  assAuth.time -> note.time;
       assAuth->practitioner.meta as meta then {
          assAuth->meta.tag = create('Coding') as coding then {
            assAuth -> coding.system ='http://algoritmodiscoring'"system";
            assAuth -> coding.code ='ClinicalDocument/body/TerapiaFarmacologicaDimissione/author'"code";
          }"coding";
        }"meta";
        assAuth.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext;
          id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
          id.root as r then {
            id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2),note.author  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
          }"r";
        }"identifier";
        assAuth.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"2.16.840.1.113883.2.9.4.3.2";
        assAuth.assignedPerson as asspers then{
          asspers.name -> practitioner.name;
        }"assPers";
      }"assAuth";
    }"auth";
     
    src.entry as entry1 then {
      entry1.substanceAdministration as sub then{   
        sub.statusCode -> medRq.status;
        sub -> medRq.dosageInstruction = create('Dosage') as dosage then{
          sub -> dosage.timing = create('Timing') as tim then{
            sub.effectiveTime as eff -> tim.repeat as repeat then{
              eff -> repeat.bounds  =create('Period') as period then IVLTSPeriod(eff,period)"boundsperiod";
            }"repeat";
          }"timing";
        }"dosage";
       
        sub.effectiveTime: PIVL_TS as eff -> medRq.dosageInstruction = create('Dosage') as dosage then{
        eff -> dosage.timing = create('Timing') as timing then periodTiming(eff,timing) "cod";
        }"eff";

    sub -> medRq.dosageInstruction = create('Dosage') as dosage then{
          sub.routeCode -> dosage.route;        
        }"dosage";
        
        sub -> medRq.dosageInstruction = create('Dosage') as dosage then{
          sub.approachSiteCode -> dosage.site;        
        }"dosage";

        sub.doseQuantity as doseQuant then{
          doseQuant -> medRq.dosageInstruction = create('Dosage') as dosageInstruction then{
            doseQuant.originalText as ot then{
              ot.reference -> dosageInstruction.text;
            }"ot";
            doseQuant -> dosageInstruction.doseAndRate as dosageRate then{
              doseQuant -> dosageRate.dose = create('Range') as d then{
                doseQuant -> d.low = create('SimpleQuantity') as l then{
                  doseQuant.low as lo -> l.value = (lo.value); 
                  doseQuant.low as lo -> l.unit = (lo.unit); 
                }"low";
                doseQuant -> d.high = create('SimpleQuantity') as h then{
                  doseQuant.high as hi -> h.value = (hi.value);
                  doseQuant.high as hi -> h.unit = (hi.unit); 
                }"low";
              }"d";
            }"dosageRate";
            sub.rateQuantity as rateQuantity -> medRq.dosageInstruction = create('Dosage') as dosageInstruction1 then{
              rateQuantity.originalText as ot then{
                ot.reference -> dosageInstruction1.text;
              }"ot";
              rateQuantity -> dosageInstruction1.doseAndRate as dosageRate then{
                rateQuantity -> dosageRate.rate = create('Range') as d then{
                  rateQuantity -> d.low = create('SimpleQuantity') as l then{
                    rateQuantity.low as lo -> l.value = (lo.value); 
                    rateQuantity.low as lo -> l.unit = (lo.unit); 
                  }"low";
                  rateQuantity -> d.high = create('SimpleQuantity') as h then{
                    rateQuantity.high as hi -> h.value = (hi.value);
                    rateQuantity.high as hi -> h.unit = (hi.unit); 
                  }"low";
                }"d";
              }"qualcosa";
            }"dosageRate";
          }"Dosage";  
        }"doseQuant";
        sub -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Medication/', uuid1), request.url = 'Medication' ,medRq.medication  = create('Reference') as reference,  reference.reference = ('https://example/Medication/' + %medication.id) then{
          sub.administrationUnitCode -> medication.form;
          sub.consumable as cons then{
            cons.manufacturedProduct as manuprod then{
              manuprod.manufacturedMaterial as manufact then{
                manufact.code -> medication.code;
              }"manuFact";
            }"manumat";
          }"cons";
       
          sub.entryRelationship as entryR then{
            entryR.observation as observation then{
                   observation.code where displayName='Grammatura' -> medication.ingredient as ingredient then{
                    sub.consumable as consumable then{
                            consumable.manufacturedProduct as manufacturedProduct then{
                                manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                                    manufacturedMaterial.code as code -> ingredient.item = create('CodeableConcept') as value then CECodeableConcept(code,value) "CE";
                                }"material";
                            }"product";
                        }"consumable";
                        observation.value as value -> ingredient.strength as strength then{
                            value -> strength.numerator as numerator then{
                                value -> numerator.value = (value.value) "valueN";
                            } "numerator";
                            value -> strength.denominator as denominator then{
                                value -> denominator.value = 1 "valueD";
                            } "denominator";
                       }"strenght";
                    }"ingredient";
                    observation.code where displayName='Quantità nella Confezione' then{
                        observation.value as value -> medication.amount as amount then{
                            value -> amount.numerator  as numerator then{
                                value -> numerator.value = (value.value) "valueN";
                            } "numerator";
                            value -> amount.denominator as denominator then{
                                value -> denominator.value = 1 "valueD";
                            } "denominator";
                        }"amount";
                   }"quantità";
               }"obs";
          }"entry R";

         
          sub.participant as part -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as participant,  participant.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Participant/', uuid1), request.url = append('Participant/', uuid1) then{
            part.time as t -> medRq.authoredOn = create('dateTime') as date then TSDateTime(t,date)"authoredOn";
            part.participantRole as partRole then{

            
              partRole->participant.meta as meta then {
                partRole->meta.tag = create('Coding') as coding then {
                  partRole -> coding.system ='http://algoritmodiscoring'"system";
                  partRole -> coding.code ='ClinicalDocument/body/TerapiaFarmacologicaDimissione/participant'"code";
                }"coding";
              }"meta";
              partRole.id as id -> participant.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext;
                id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                id.root as r then {
                  id.extension as ext -> participant.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), medRq.requester  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %participant.id) "aut";
                }"r";
              }"identifier";
              partRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
             
              partRole.playingEntity as playent then{
                playent.name -> participant.name;
              }"playent";
            }"partRole";
          }"participant";   
  
          sub.reference as ref then{
            ref.externalAct as external then{
              external.id -> medRq.identifier;
            }"external";
          }"ref";
  
          sub.entryRelationship as entryRelationship then{ 
            entryRelationship.supply as sup -> medRq.dispenseRequest as dispreq then {              
                sup -> dispreq.quantity = create('SimpleQuantity') as quantity then{
                  sup.quantity as q -> quantity.value = (q.value);
                }"quantity";              
            }"sub";
  
           }"med";    
  
        }"admnistrationUnicode";
      }"sub";
    }"entry";
  }"medication";
}"sezioneesiste";
}
//-----------------------------------------------------------------------------------------------------------------------

//______1._____________Sections________________________

group ModalitadiTrasposto(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter) {
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  }"cdaText";
  src.entry as entry1 then {
    src.entry as entry1 -> tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) then {
    entry1.act as act1  then Act(act1, patient,  enc , bundle) "act";
    }"entry1";
 }"entry";
}

group MotivoDellaVisita(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
 
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  }"cdaText";
  src.entry as entry -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Observation') as observation,  observation.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Observation/', uuid2), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
    entry.observation as obs then Observation(obs, patient ,enc ,observation, bundle) "observation";
  }"entry";
 
}

group Triage(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  }"cdaText";
  src.entry as entry -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST',   e2.resource = create('Observation') as observation,  observation.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Observation/', uuid2), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
    entry.observation as obs then Observation(obs, patient ,enc ,observation, bundle) "observation";
  }"entry";
 
}

group InquadramentoClinicoIniziale(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter) {
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id), tgt.text as fhirText then {
    src.code -> observation.code;
    src where observation.statusCode.exists().not() then {
      src->observation.status ='final'"status";
    }"statuscode";
    src->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    src->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
    cdaText->observation.note as note then{
      src.author as author then {
        author->bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'PUT', e2.resource = create('Practitioner') as practitioner then {
          author.assignedAuthor as assignedAuthor then {
            assignedAuthor->practitioner.meta as meta then {
              assignedAuthor->meta.tag = create('Coding') as coding then {
                assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                assignedAuthor -> coding.code ='ClinicalDocument/body/InquadramentoClinicoIniziale/author'"code";
              }"coding";
            }"meta";
            assignedAuthor.id as id -> practitioner.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext;
              id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
              id.root as r then {
                id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e2.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
              }"r";
            }"identifier";
            assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
              id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"2.16.840.1.113883.2.9.4.3.2";
            assignedAuthor.assignedPerson as person then {
              person.name -> practitioner.name;
            }"name";
          }"assignedAuthor";
        }"practitioner";
        author.time as t->note.time= create('dateTime') as value then TSDateTime(t, value);
      }"Author";
      cdaText as t ->note.text = t "reference";
    }"reference";
  }"cdaText";
    
  //START sottosections
  src.component as component then {
    component.section as sottosection then{
      sottosection -> tgt.section as section then {
        //1. Anamnesi Narrativa-------------------------------------------------------------------------------------------------------------------------------------------
        sottosection.code where(code = '11329-0') -> section.code;
        sottosection.code as code1 where(code = '11329-0')  then {
          src where sottosection.entry.exists().not() then {
          sottosection.title as t-> section.title= (t.dataString);
          sottosection.text as cdaText -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('Observation') as observation,  observation.id = uuid() as uuid8,  e8.fullUrl = append('https://example/Observation/', uuid8), request.url = 'Observation', section.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
            cdaText -> observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            cdaText -> observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
            sottosection.code -> observation.code;
            src where observation.statusCode.exists().not() then {
              src->observation.status ='final'"status";
            }"statuscode";
              cdaText -> observation.note as note then{
              cdaText as t ->note.text =t "reference";
              sottosection.author as authors then {
                authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                authors.assignedAuthor as assignedAuthor -> bundle.entry as e9, e9.request = create('BackboneElement') as request, request.method = 'PUT',   e9.resource = create('Practitioner') as practitioner then{
                  assignedAuthor->practitioner.meta as meta then {
                    assignedAuthor->meta.tag = create('Coding') as coding then {
                      assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                      assignedAuthor -> coding.code ='ClinicalDocument/body/EsameObiettivo/author'"code";
                    }"coding";
                  }"meta";
                  assignedAuthor.id as id -> practitioner.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext;
                    id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                    id.root as r then {
                      id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid9,  e9.fullUrl = append('https://example/Practitioner/', uuid9), request.url = append('Practitioner/', uuid9), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id) "autore";
                    }"r";
                  }"identifier";
                  assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                    id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                  }"2.16.840.1.113883.2.9.4.3.2";
                  assignedAuthor.assignedPerson as person then {
                    person.name -> practitioner.name;
                  }"assignedPerson";
                }"assighedAuthor";
              }"author";
            }"reference";
          }"cdaText";
        }"where";
        // Anamnesi Strutturata-----------------------------------------------------------------------------------------------------------------------------------------
           sottosection.entry as entry1 then {
            entry1.observation as obs then {
              obs.code where (code = '75326-9')  then {
              obs->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Condition') as condition, condition.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Condition/', uuid1), request.url = 'Condition', section.entry = create('Reference') as reference,  reference.reference = ('https://example/Condition/' + %condition.id) then {
              obs.code -> condition.category;
              obs->condition.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
              obs->condition.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
              obs.statusCode as status where (code='completed') -> condition.verificationStatus as status2 then {
                status ->  status2.coding as status3 then{
                  status -> status3.code ='confirmed' "finald";
                  status -> status3.system='http://terminology.hl7.org/CodeSystem/condition-ver-status'"system";
                }"st3";
              }"status";

              // blocco Narrativo
              sottosection.text as cdaText1 -> condition.note as note then {
                cdaText1 as t ->note.text =t "reference";
                sottosection.author as authors then {
                  authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                  authors.assignedAuthor as assignedAuthor -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'PUT',   e5.resource = create('Practitioner') as practitioner then{
                    assignedAuthor->practitioner.meta as meta then {
                      assignedAuthor->meta.tag = create('Coding') as coding then {
                        assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                        assignedAuthor -> coding.code ='ClinicalDocument/body/Anamnesi/author'"code";
                      }"coding";
                    }"meta";
                    assignedAuthor.id as id -> practitioner.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext;
                      id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                      id.root as r then {
                        id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid5,  e5.fullUrl = append('https://example/Practitioner/', uuid5), request.url = append('Practitioner/', uuid5), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id);
                      }"r";
                    }"identifier";
                    assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"2.16.840.1.113883.2.9.4.3.2";
                    assignedAuthor.assignedPerson as person then {
                      person.name -> practitioner.name;
                    }"assignedPerson";
                  }"assighedAuthor";
                }"author";
              }"cdaText1";

              obs.effectiveTime as effective1 then {
                effective1 where effective1.low.exists() or effective1.high.exists() then{
                  effective1  -> condition.onset=create('Period') as periodonset then IVLTSPeriod(effective1,periodonset)"onsetperiod";
                  }"ef";
                }"effectivetime1";
              obs.effectiveTime as effectiveTime -> condition.onset = create('dateTime') as value then TSDateTime(effectiveTime, value) "onsetDateTime";
              obs.value:INT as int->ob.value=(int.value) "value";
              obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";
              obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";
              obs.value:CE as val then{
                val->ob.value =create('CodeableConcept') as ce then {
                  val.originalText as originalText then{
                    originalText.reference as reference-> ce.text=reference;
                  }"originltext";
                  val -> ce.coding as coding then {
                    val.code as code -> coding.code = cast(code, 'string');
                    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                    val.displayName as display -> coding.display = cast(display, 'string');
                    val.codeSystemVersion as version -> coding.version = cast(version, 'string');
                  }"code";
                  val.translation as translation -> ce.coding as coding then {
                    translation.code as code -> coding.code = cast(code, 'string');
                    translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                    translation.displayName as display -> coding.display = cast(display, 'string');
                    translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
                    translation.qualifier as qualifier then{
                      qualifier.value as value -> ce.coding as coding then {
                        value.code as code -> coding.code = cast(code, 'string');
                        value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                        value.displayName as display -> coding.display = cast(display, 'string');
                        value.codeSystemVersion as version -> coding.version = cast(version, 'string');
                      }"value";
                    }"qualifier";
                  }"translation";
                }"coding";
              }"val";
              obs.value:CD as val then{
                val->condition.code =create('CodeableConcept') as ce then {
                    val.originalText -> ce.text;
                      val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      }"coding";  
                   }"Ce"; 
                }"Value";
              obs.entryRelationship as entriRel then {
                entriRel -> condition.evidence = create('BackboneElement') as evidence then {
                entriRel.observation as observation2 then {
                  observation2.code as code then {
                  code.code where (code.code = '89261-2') then { 
                    obs -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as observation, observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' then {
                    entriRel -> evidence.detail  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) "ref";
                    observation2.code -> observation.code;
                    observation2 where observation.statusCode.exists().not() then {
                      observation2->observation.status ='final'"status";
                      }"statuscode";            
                    observation2.text as text -> observation.note = create('Annotation') as note then{
                      text.reference as ref -> note.text = (ref.value) "val";
                    }"Annontation"; 
                    obs->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
                    obs->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";                            
                    observation2.statusCode as statusc where (code='completed') -> ob.status ='final';
                    observation2.statusCode as statusc where (code='active') -> ob.status ='registered';
                    observation2.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
                    observation2.statusCode as statusc where (code='suspended') -> ob.status ='partial';

                    observation2.value:INT as int->observation.value=(int.value) "value";
                    observation2.value:BL as boolean ->observation.value=(boolean.value)"boolean";
                    observation2.value:ST as value->observation.value =create('string'),observation.value= (value.dataString) "value";
                    observation2.effectiveTime as effectiveTime -> observation.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
                    observation2 where effectiveTime.low.exists() or effectiveTime.high.exists() then {
                      observation2.effectiveTime as eff-> observation.effective=create('Period') as period then IVLTSPeriod(eff,period);
                      }"where";
                    observation2.value:PQ as val then{
                      val->observation.value = create('Quantity') as quantity then {
                        val.value as value->quantity.value = value;
                        val.unit as unit-> quantity.unit = unit "unit";
                      }"quantity";
                    }"valueQuantity";
                    observation2.value:CE as val then{
                      val->observation.value =create('CodeableConcept') as ce then {
                        
                        val.originalText -> ce.text;
                        val -> ce.coding as coding then {
                        val.code as code -> coding.code = cast(code, 'string');
                        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                        val.displayName as display -> coding.display = cast(display, 'string');
                        }"coding";  
                      }"Ce"; 
                    }"Value"; 
                   }"obser";
                  }"where Decorso Clinico";
                  }"code";
                }"Observation2";
              }"evidence";
           }"EntryRelationship1";
           obs.entryRelationship as entriRel  then{
            entriRel.observation as observation2 then {
              observation2.code as code then {
               code.code where (code.code ='33999-4') then{
                 observation2 -> condition.clinicalStatus = create('CodeableConcept') as status then {
                  observation2.text as text then{
                    text.reference as refstat -> status.text=(refstat.value)"statref";
                    }"textstat";
                   observation2  -> status.coding = create('Coding') as coding then{
                     observation2.value as value then {
                       value.code  where (value.code = 'LA16666-2')-> coding.code = 'active'"active";
                       value.code  where (value.code = 'LA18632-2')-> coding.code = 'inactive'"inactive";
                       value.codeSystem as system -> coding.system ='http://terminology.hl7.org/CodeSystem/condition-clinical'"system";
                       value.displayName as display -> coding.display = cast(display, 'string');
                       }"value1";
                     }"coding";
                   }"code";                       
                 }"where Decorso Clinico"; 
               }"codestatus";  
              }"observationstatus"; 
             }"entryrelationshipstatus";           
           }"condition";
          } "89261-2";
        }"entryobservation1";



         //Anamnesi Familiare---------------------------------------------------------------------------------------------------------------------------------------------

        entry1.organizer as organizer then {
          organizer.code where (code = '10157-6')  then {
              organizer->bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST', e4.resource = create('FamilyMemberHistory') as FamilyMemberHistory, FamilyMemberHistory.id = uuid() as uuid5,  e4.fullUrl = append('https://example/FamilyMemberHistory/', uuid5), request.url = 'FamilyMemberHistory', section.entry = create('Reference') as reference,  reference.reference = ('https://example/FamilyMemberHistory/' + %FamilyMemberHistory.id) then{
              organizer.effectiveTime as effective then {
                effective.value as eff-> FamilyMemberHistory.date= create('dateTime') as value then TSDateTime(eff, value) "date";
              }"effective"; 
              organizer->FamilyMemberHistory.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
              organizer.subject as subject then {
                  subject.relatedSubject as relatedSubject then {
                  relatedSubject.code -> FamilyMemberHistory.relationship "relationship";
                  relatedSubject.subject as subject -> FamilyMemberHistory.sex as sex then {
                      subject.administrativeGenderCode as administrativeGenderCode -> sex.coding as coding then {
                          administrativeGenderCode.code as code-> coding.code = translate(code, '#cm-v3-administrative-gender', 'code') "gender";
                          administrativeGenderCode-> coding.system = 'http://hl7.org/fhir/administrative-gender' "system";
                          }"coding";
                      }"subject1";
                  }"relatedSubject";
              }"subject";

              // blocco Narrativo
              sottosection.text as cdaText1 -> FamilyMemberHistory.note as note then {
                cdaText1 as t ->note.text =t "reference";
                sottosection.author as authors then {
                  authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                  authors.assignedAuthor as assignedAuthor -> bundle.entry as e7, e7.request = create('BackboneElement') as request, request.method = 'PUT',   e7.resource = create('Practitioner') as practitioner then{
                    assignedAuthor->practitioner.meta as meta then {
                      assignedAuthor->meta.tag = create('Coding') as coding then {
                        assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                        assignedAuthor -> coding.code ='ClinicalDocument/body/Anamnesi/author'"code";
                      }"coding";
                    }"meta";
                    assignedAuthor.id as id -> practitioner.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext;
                      id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                      id.root as r then {
                        id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid7,  e7.fullUrl = append('https://example/Practitioner/', uuid7), request.url = append('Practitioner/', uuid7), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id);
                      }"r";
                    }"identifier";
                    assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"2.16.840.1.113883.2.9.4.3.2";
                    assignedAuthor.assignedPerson as person then {
                      person.name -> practitioner.name;
                    }"assignedPerson";
                  }"assighedAuthor";
                }"author";
              }"cdaText1";

              organizer.component as component -> FamilyMemberHistory.condition as condition then{
                  component.observation as observation then{
                      observation.code -> condition.code "code";
                      observation.text as text -> FamilyMemberHistory.note as note then{
                          text.reference as reference -> note.text = (reference.value) "value";
                      }"reference";
                      observation.statusCode -> FamilyMemberHistory.status;
                      observation.value -> condition.outcome "codeable";
                      observation.entryRelationship as entryRelationship then{
                      entryRelationship.observation as obsservation1 then{
                          obsservation1.code as code then {
                          code.code where (code.code ='35267-4') then{
                          obsservation1.value as value -> condition.onset = create('Age') as Age then {
                                      value.value as valueAge -> Age.value = valueAge "age";
                                      value.unit as unit -> Age.code = unit "unit";
                                      value.unit as unit -> Age.unit = unit "unit";
                                      value -> Age.system = 'http://unitsofmeasure.org' "system";
                              } "value";
                          }"insorgenza";
                      }"code";
                      obsservation1.code as code then {
                          code.code where (code.code ='39016-1') then{
                          obsservation1.value as value -> FamilyMemberHistory.deceased = create('Age') as Age then {
                                      value.value as valueAge -> Age.value = valueAge "age";
                                      value.unit as unit -> Age.code = unit "unit";
                                      value.unit as unit -> Age.unit = unit "unit";
                                      value -> Age.system = 'http://unitsofmeasure.org' "system";
                                  } "value";
                               }"deceased";
                           }"code";
                         }"obser";
                      }"EntryRel";
                      observation where observation.effectiveTime.exists() then {
                        observation.effectiveTime as effectiveTime -> FamilyMemberHistory.condition = create('BackboneElement') as condition then {
                             effectiveTime -> condition.onset = create('Period') as period then{
                                 effectiveTime -> period.start = create('dateTime') as start then TSDateTime(effectiveTime,start) "val";                           
                                }"efft";
                                observation.code -> condition.code "code";
                                observation.value -> condition.outcome "codeable";
                            }"effttemp";
                        }"cont";
                   }"observationCondition";
                 }"component";
              }"organizer";
            }"10157-6";
          }"observation1";
       }"subsection1";
    }"11329-0";
       

        //2. Esame Obiettivo Narrativa-----------------------------------------------------------------------------------------------------------------------------------
        sottosection.code where(code = '29545-1') -> section.code;
        sottosection.code as code1 where(code = '29545-1')  then {
          sottosection.title as t -> section.title = (t.dataString);
          sottosection.text as cdaText -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('Observation') as observation,  observation.id = uuid() as uuid8,  e8.fullUrl = append('https://example/Observation/', uuid8), request.url = 'Observation', section.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
            cdaText -> observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            cdaText -> observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
            sottosection.code -> observation.code;
            sottosection where observation.statusCode.exists().not() then {
              sottosection -> observation.status ='final'"status";
            }"statuscode";
            cdaText -> observation.note as note then{
              cdaText as t ->note.text =t "reference";
              sottosection.author as authors then {
                authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                authors.assignedAuthor as assignedAuthor -> bundle.entry as e9, e9.request = create('BackboneElement') as request, request.method = 'PUT',   e9.resource = create('Practitioner') as practitioner then{
                  assignedAuthor->practitioner.meta as meta then {
                    assignedAuthor->meta.tag = create('Coding') as coding then {
                      assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                      assignedAuthor -> coding.code ='ClinicalDocument/body/EsameObiettivo/author'"code";
                    }"coding";
                  }"meta";
                  assignedAuthor.id as id -> practitioner.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext;
                    id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                    id.root as r then {
                      id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid9,  e9.fullUrl = append('https://example/Practitioner/', uuid9), request.url = append('Practitioner/', uuid9), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id) "autore";
                    }"r";
                  }"identifier";
                  assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                    id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                  }"2.16.840.1.113883.2.9.4.3.2";
                  assignedAuthor.assignedPerson as person then {
                    person.name -> practitioner.name;
                  }"assignedPerson";
                }"assighedAuthor";
              }"author";
            }"reference";
          }"cdaText";
        }"condizione_esameObiettivo";
      
        //3. Terapia Farmacologica all'ingresso Narrativa --------------------------------------------------------------------------------------------------------------
        sottosection.code where(code = '42346-7') -> section.code; 
        sottosection.code as code1 where(code = '42346-7')  then {
        sottosection.title as t -> section.title = (t.dataString);
          sottosection.text as cdaText ->bundle.entry as e10, e10.request = create('BackboneElement') as request, request.method = 'POST', e10.resource = create('MedicationStatement') as medicStatement,  medicStatement.id = uuid() as uuid10,  e10.fullUrl = append('https://example/MedicationStatement/', uuid10), request.url = 'MedicationStatement', section.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationStatement/' + %medicStatement.id) then {
          cdaText -> medicStatement.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
           sottosection where medicStatement.statusCode.exists().not() then {
              sottosection->medicStatement.status ='completed'"status";
            }"statuscode";
            cdaText ->  medicStatement.medication =create('CodeableConcept') as medication then {
              cdaText as txt -> medication.text=txt "text";
            }"medication";
            cdaText -> medicStatement.note as note then{
              cdaText as t ->note.text =t "reference";
              sottosection.author as authors then {
                authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                authors.assignedAuthor as assignedAuthor -> bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'PUT',   e11.resource = create('Practitioner') as practitioner then{
                  assignedAuthor->practitioner.meta as meta then {
                    assignedAuthor->meta.tag = create('Coding') as coding then {
                      assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                      assignedAuthor -> coding.code ='ClinicalDocument/body/TerapiaFarmacologicaIngresso/author'"code";
                    }"coding";
                  }"meta";
                  assignedAuthor.id as id -> practitioner.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext;
                    id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                    id.root as r then {
                      id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid11,  e11.fullUrl = append('https://example/Practitioner/', uuid11), request.url = append('Practitioner/', uuid11), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id);
                    }"r";
                  }"identifier";
                  assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                    id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                  }"2.16.840.1.113883.2.9.4.3.2";
                  assignedAuthor.assignedPerson as person then {
                    person.name -> practitioner.name;
                  }"assignedPerson";
                }"assighedAuthor";
              }"author";
            }"reference";
          }"cdaText";
        }"condizione_terapia_ingresso";

        //4. Allergie
        sottosection.code where(code = '48765-2') -> section.code;
        sottosection.code as code1 where(code = '48765-2')  then {
          sottosection.title as t-> section.title= (t.dataString);
          // Allergia Narrativa-------------------------------------------------------------------------------------------------------------------------------------------
          src where sottosection.entry.exists().not() then {
            sottosection.title as t-> section.title= (t.dataString);
            sottosection.text as cdaText -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('AllergyIntolerance') as AllergyIntolerance,  AllergyIntolerance.id = uuid() as uuid8,  e8.fullUrl = append('https://example/AllergyIntolerance/', uuid8), request.url = 'AllergyIntolerance', section.entry  = create('Reference') as reference,  reference.reference = ('https://example/AllergyIntolerance/' + %AllergyIntolerance.id) then {
              cdaText -> AllergyIntolerance.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
              cdaText -> AllergyIntolerance.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
              
              cdaText -> AllergyIntolerance.clinicalStatus = create('CodeableConcept') as status then {
                cdaText  -> status.coding = create('Coding') as coding then{
                  cdaText -> coding.code = 'active'"active";
                  cdaText  -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical'"system";
                  cdaText  -> coding.display = 'active'"active";
                 }"coding";
              }"clinicalStatus";
              cdaText -> AllergyIntolerance.note as note then{
              cdaText as t ->note.text =t "reference";
                sottosection.author as authors then {
                  authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                  authors.assignedAuthor as assignedAuthor -> bundle.entry as e9, e9.request = create('BackboneElement') as request, request.method = 'PUT',   e9.resource = create('Practitioner') as practitioner then{
                    assignedAuthor->practitioner.meta as meta then {
                      assignedAuthor->meta.tag = create('Coding') as coding then {
                        assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                        assignedAuthor -> coding.code ='ClinicalDocument/body/EsameObiettivo/author'"code";
                      }"coding";
                    }"meta";
                    assignedAuthor.id as id -> practitioner.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext;
                      id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                      id.root as r then {
                        id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid9,  e9.fullUrl = append('https://example/Practitioner/', uuid9), request.url = append('Practitioner/', uuid9), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id) "autore";
                      }"r";
                    }"identifier";
                    assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"2.16.840.1.113883.2.9.4.3.2";
                    assignedAuthor.assignedPerson as person then {
                      person.name -> practitioner.name;
                    }"assignedPerson";
                  }"assighedAuthor";
                }"author";
              }"reference";
            }"cdaText";
          }"where";
           // Allergia Strutturata----------------------------------------------------------------------------------------------------------------------------------------
          sottosection.entry as entry1 -> bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST',   e12.resource = create('AllergyIntolerance') as allergy,  allergy.id = uuid() as uuid12,  e12.fullUrl = append('https://example/AllergyIntolerance/', uuid12), request.url = 'AllergyIntolerance' ,section.entry  = create('Reference') as reference,  reference.reference = ('https://example/AllergyIntolerance/' + %allergy.id) then {
            src -> allergy.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            src -> allergy.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
            entry1.act as actallint then {
              actallint.effectiveTime as effectiveTime -> allergy.onset = create('dateTime') as value then TSDateTime(effectiveTime, value) "onsetDateTime";
              actallint where effectiveTime.low.exists() or effectiveTime.high.exists() then {
                actallint.effectiveTime as eff-> allergy.onset=create('Period') as period then IVLTSPeriod(eff,period)"onsetPeriod";
              }"where";
             //mapping note
              sottosection.text as cdaText1 -> allergy.note as note then {
                cdaText1 as t ->note.text =t "reference";
                sottosection.author as authors then {
                  authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                  authors.assignedAuthor as assignedAuthor -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'PUT',   e13.resource = create('Practitioner') as practitioner then{
                    assignedAuthor->practitioner.meta as meta then {
                      assignedAuthor->meta.tag = create('Coding') as coding then {
                        assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                        assignedAuthor -> coding.code ='ClinicalDocument/body/Allergie/author'"code";
                      }"coding";
                    }"meta";
                    assignedAuthor.id as id -> practitioner.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext;
                      id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                      id.root as r then {
                        id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid13,  e13.fullUrl = append('https://example/Practitioner/', uuid13), request.url = append('Practitioner/', uuid13), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id);
                      }"r";
                    }"identifier";
                    assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"2.16.840.1.113883.2.9.4.3.2";
                    assignedAuthor.assignedPerson as person then {
                      person.name -> practitioner.name;
                    }"assignedPerson";
                  }"assighedAuthor";
                }"author";
              }"cdaText1";
              actallint.entryRelationship as entryact then {
                entryact.observation as entryobs then {
                  entryobs.value as code then{
                    code.code as code1-> allergy.type = translate(code1,'#AllergyTypeMap','code') "type";
                    code.code as code2 -> allergy.category = translate(code2,'#AllergyCategoryMap','code') "category";  
                  }"code";
              
                  entryobs.participant as partic then {
                    partic.participantRole as pratRole then {
                      pratRole.playingEntity as pratent then {
                        pratent -> allergy.reaction = create('BackboneElement') as reaction then{
                          pratent.code -> reaction.substance "subs";
                          entryobs.entryRelationship as entryobs1 where (typeCode='MFST') then {
                            entryobs1.observation as entobs then {
                              entobs.effectiveTime as eff  then{
                                eff.low as l -> reaction.onset =create('dateTime') as value then TSDateTime(l,value);
                              }"eff";
                              entobs.value->reaction.manifestation "manifest";
                            }"entryobservation";
                          }"entryRelationship";
                        }"reaction";  
                      }"playingEntity";
                    }"participantRole";
                  }"participant";
          
                  entryobs.entryRelationship as entryobs2 then {
                    entryobs2.observation as entobs then {
                      entobs.code as code where (code='SEV') then {
                        entobs.value as value then{
                          value.code where(value.code = 'M') ->allergy.criticality = 'unable-to-assess'"active";
                          value.code where(value.code = 'L') ->allergy.criticality = 'low'"active"; 
                          value.code where(value.code = 'H') ->allergy.criticality = 'high'"active"; 
                        }"value";
                      }"severity";
                    }"entryobservation2";
                  }"entryrelationship2";

                  entryobs.entryRelationship as entryobs3 then {
                    entryobs3.observation as entobs then {
                      entobs.code as code where (code='33999-4') then {
                        // entobs.value->allergy.clinicalStatus "cstatus";
                        entobs -> allergy.clinicalStatus = create('CodeableConcept') as status then {
                          entobs  -> status.coding = create('Coding') as coding then{
                            entobs.value as value then{
                              value.code  where (value.code = 'LA16666-2')-> coding.code = 'active'"active";
                              value.code  where (value.code = 'LA18632-2')-> coding.code = 'inactive'"active";
                              value.codeSystem as system -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical'"system";
                              // value->coding.version='ConditionClinicalStatusCodes 4.0.1'"version";
                              value.displayName as display -> coding.display = cast(display, 'string');
                            }"value1";
                          }"coding";
                        }"clinicalStatus";
                      }"33999-4";
                    }"entryobservation3";
                  }"entryrelationship3";
          
                  entryobs.entryRelationship as entryobs4 then {
                    entryobs4.act as entact then {
                      entact.text as actext then {
                        actext.reference as reftxt -> allergy.note = create('BackboneElement') as note  then {
                          reftxt as ref->note.text= (ref.value) "notxt";
                        }"notetxt";
                      }"txtact";
                    }"entryact1";
                  }"entryrelationshi4";
                    
                }"entryobservation";
              }"entryrelationshipact";
            }"entryact2";
          }"allergy";
        }"condizione_allergie";  

        //5. Problemi aperti
        sottosection.code where(code = '11450-4') -> section.code;
        sottosection.code as code1 where(code = '11450-4')  then {
          sottosection.title as t -> section.title = (t.dataString);
          sottosection.text as cdaText ->bundle.entry as e14, e14.request = create('BackboneElement') as request, request.method = 'POST', e14.resource = create('Condition') as condition,  condition.id = uuid() as uuid14,  e14.fullUrl = append('https://example/Condition/', uuid14), request.url = 'Condition', section.entry  = create('Reference') as reference,  reference.reference = ('https://example/Condition/' + %condition.id) then {
              
            cdaText -> condition.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            cdaText -> condition.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
            sottosection.code -> condition.code;
            cdaText -> condition.note as note then{
              cdaText as t ->note.text =t "reference";
              sottosection.author as authors then {
                authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                authors.assignedAuthor as assignedAuthor -> bundle.entry as e15, e15.request = create('BackboneElement') as request, request.method = 'PUT',   e15.resource = create('Practitioner') as practitioner then{
                  assignedAuthor->practitioner.meta as meta then {
                    assignedAuthor->meta.tag = create('Coding') as coding then {
                      assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                      assignedAuthor -> coding.code ='ClinicalDocument/body/ProblemiAperti/author'"code";
                    }"coding";
                  }"meta";
                  assignedAuthor.id as id -> practitioner.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext;
                    id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                    id.root as r then {
                      id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid15,  e15.fullUrl = append('https://example/Practitioner/', uuid15), request.url = append('Practitioner/', uuid15), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                    }"r";
                  }"identifier";
                  assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                    id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                  }"2.16.840.1.113883.2.9.4.3.2";
                  assignedAuthor.assignedPerson as person then {
                    person.name -> practitioner.name;
                  }"assignedPerson";
                }"assighedAuthor";
              }"author";
            }"reference";
          }"cdaText";
        }"condizione_problemi_aperti";
      }"Sectionfhir";
    }"Sottosection";
  }"component";

}

//______2._____________ClinicalStatements________________________

group Act (source cda: Act, target pat : Patient, target enc : Encounter, target bundle : Bundle){
  cda.code as code -> enc.extension as extension2 then modeOfArrival(code, extension2);
  cda.participant as participant then {
    participant -> enc.participant as FhirParticipant then {
      participant as p -> FhirParticipant.type as type then { 
        p -> type.coding as coding then{
          p-> coding.code = (p.typeCode) "codice";
          p-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
        } "codeType"; 
      }"type";
    }"fhirParticipant";
    participant.participantRole as participantRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',  e1.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e1.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url = 'PractitionerRole', enc.participant = create('BackboneElement') as participant1, participant1.individual = create('Reference') as referencepart, referencepart.reference =  ('https://example/PractitionerRole/' + %practitionerRole.id) then { 
      participantRole.code -> practitionerRole.code;
    }"participantrole";
  }"participant";
    
}



//______3._____________Extensions_DtType________________________

group modeOfArrival(source src: CE, target ext: Extension) {
 
  src -> ext.url = 'http://hl7.org/fhir/StructureDefinition/encounter-modeOfArrival' "url";
  src -> ext.value = create('Coding') as code1 then coding(src,code1)"coding";

}

group coding(source src : CE, target tgt : Coding)  {
  src.code as code  -> tgt.code = cast(code, 'string');
  src.codeSystem as system -> tgt.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
  src.displayName as display -> tgt.display = cast(display, 'string');
  src.codeSystemVersion as version -> tgt.version = cast(version, 'string');
}
group periodTiming(source effectiveTime: PIVL_TS, target timing: Timing){
  effectiveTime -> timing.repeat as r then{
    effectiveTime.period as p -> r.period = (p.value);
    effectiveTime.period as p -> r.periodUnit = (p.unit);  
  }"repeat";

}",
          "subType": "00"
        }
      }
    }
  ],
  "definitions": [],
  "valuesets": [],
  "template_id_root": "2.16.840.1.113883.2.9.10.1.6.1",
  "last_update_date": {
    "$date": {
      "$numberLong": "1677573448211"
    }
  },
  "version": "2.2",
  "root_map": "verbalePS",
  "deleted": false,
  "last_sync": {
    "$date": {
      "$numberLong": "1677573846774"
    }
  }
}]