[{
  "_id": {
    "$oid": "63a03edc59b6e6165a99296f"
  },
  "maps": [
    {
      "name_map": "RefertodilaboratorioFULLBODY",
      "filename_map": "StructureMap_Referto_di_Laboratorio_v1.0.map",
      "content_map": {
        "$binary": {
          "base64": "map "http://hl7.org/fhir/StructureMap/RefertodilaboratorioFULLBODY" = "RefertodilaboratorioFULLBODY"

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Specimen" alias Specimen as produced
uses "http://hl7.org/fhir/StructureDefinition/Procedure" alias Procedure as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL_PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target
uses "http://hl7.org/fhir/cda/StructureDefinition/Organizer" alias Organizer as source

imports "http://hl7.org/fhir/StructureMap/CdaToFhirDataTypes"
imports "http://hl7.org/fhir/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
  cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('urn:uuid:', uuid1), request.url = append('Composition/', uuid1),  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('urn:uuid:', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('urn:uuid:', uuid3),request.url = append('Encounter/', uuid3),
 // bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST', e4.resource = create('Specimen') as specimen,  specimen.id = uuid() as uuid4,  e4.fullUrl = append('urn:uuid:', uuid4), request.url = append('Specimen/', uuid4),
 // bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('Procedure') as procedure,  procedure.id = uuid() as uuid5,  e5.fullUrl = append('urn:uuid:', uuid5), request.url = append('Procedure/', uuid5),
  bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST',  e6.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid6,  e6.fullUrl = append('urn:uuid:', uuid6),request.url = append('DocumentReference/', uuid6) then {
  cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle,DocumentReference) "cdatobundle";
  cda.recordTarget as recordTarget then{
    recordTarget.patientRole as patient then{
      patient.id as id -> patient.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext->identifier.value = ext then {
        recordTarget-> requestPAT.url = append('Patient?identifier=',ext) "UUID";
        }"ext";
        id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
      }"record";
    }"recPat";
   }"patient";
 } "ClinicalDocumentToBody";
}


group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle , target documentreference : DocumentReference) {
  cda -> bundle.id = uuid() "id";
  cda.id -> bundle.identifier "identifier";
  cda -> bundle.type = 'transaction' "type";
  cda.effectiveTime -> bundle.timestamp;
  cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle,documentreference) "composition";
  cda.component as component then {
    component.structuredBody as body then {
      body.component as component  then {
	     component.section as srcSection then {
        srcSection.code -> composition.section as tgtSection  then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle,encounter,documentreference);       
       };
      };
    }"body";
  };
}


group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter,target documentreference : DocumentReference) {
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  }"cdaText";
  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('DiagnosticReport') as DiagnosticReport,  DiagnosticReport.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('DiagnosticReport/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %DiagnosticReport.id) then {
    entry1.act as act1 then Act(act1, patient, DiagnosticReport , enc , bundle) "act";
  }"entry";
  src.component as component then {
    component.section as sec -> tgt.section as tgtSection then ClinicalDocumentSection(cda, sec, patient, tgtSection, bundle,enc,documentreference);
  }"component";
}


group Observation (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {
    
  obs->ob.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference"; 
  obs.code -> ob.code;

  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
  obs.interpretationCode -> ob.interpretation;
  obs.methodCode -> ob.method;
  obs.value:INT as int->ob.value=(int.value) "value";
  obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";
  obs.value:CE as val then{
    val->ob.value =create('CodeableConcept') as ce then {
      val.originalText as originalText then{
        originalText.reference as reference-> ce.text=reference;
      }"originltext";
      val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        val.codeSystemVersion as version -> coding.version = cast(version, 'string');
      }"code";
      val.translation as translation -> ce.coding as coding then {
        translation.code as code -> coding.code = cast(code, 'string');
        translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        translation.displayName as display -> coding.display = cast(display, 'string');
        translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
        translation.qualifier as qualifier then{
          qualifier.value as value -> ce.coding as coding then {
            value.code as code -> coding.code = cast(code, 'string');
            value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
            value.displayName as display -> coding.display = cast(display, 'string');
            value.codeSystemVersion as version -> coding.version = cast(version, 'string');
          }"value";
        }"qualifier";
      }"translation";
    }"coding";
  }"val";
  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
      val.value as value->quantity.value = value;
      val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";
  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";


  //Note e commenti
  obs.entryRelationship as entryRelationship then {
    entryRelationship.act as act then {
      act.text as text then {
        text.reference as reference -> ob.note as note then {
          reference->note.text =(reference.value)"reference";
        }"reference";
      }"text";
    }"Act";
  }"entryRelationship";


  //subject
  obs.subject as sbj then {
    sbj.relatedSubject as relatedSubj-> patient.extension as extension2 then ExtSubjectAnimal(relatedSubj, extension2);
  }"subject";


  //specimen
  obs.specimen as spmn ->bundle.entry as e4o, e4o.request = create('BackboneElement') as request, request.method = 'POST', e4o.resource = create('Specimen') as specimen, specimen.id = uuid() as uuid4o, e4o.fullUrl = append('urn:uuid:', uuid4o), request.url = append('Specimen/', uuid4o), ob.specimen=create('Reference') as reference, reference.reference = ('urn:uuid:' + %specimen.id) then {
    spmn.specimenRole as specimenRole then{
      specimenRole.id as id -> specimen.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext->identifier.value = ext then {
          specimenRole-> request.url = append('Specimen?identifier=',ext)"UUID";
        }"ext";
        id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
      }"identifier";
  
      specimenRole.specimenPlayingEntity as specimenPlayingEntity then {
        specimenPlayingEntity.code -> specimen.type;
      }"specimenPlayingEntity";
    }"specimenRole";
  }"specimen";
   
  
  //performer
  obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',  e1.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('PractitionerRole/', uuid1) then{
    performer -> ob.performer = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitionerRole.id) then {
      performer.assignedEntity as entity then {
        entity.code -> practitionerRole.code;
        entity -> bundle.entry as e2,  e2.request = create('BackboneElement') as request, request.method = 'PUT', e2.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid2,  e2.fullUrl = append('urn:uuid:', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner.id) then {
          entity.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              entity-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          }"identifier";
          entity.addr -> practitioner.address;      
          entity.telecom -> practitioner.telecom;
          entity.assignedPerson as person then {
            person.name -> practitioner.name;
            person.birthTime -> practitioner.birthDate;
          }"name";
          //organization
          entity.representedOrganization as representedOrganization ->  bundle.entry as e3,  e3.request = create('BackboneElement') as request, request.method = 'PUT',  e3.resource = create('Organization') as organization,  organization.id = uuid() as uuid3,  e3.fullUrl = append('urn:uuid:', uuid3), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('urn:uuid:', uuid3) then {
            representedOrganization.id as id -> organization.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            }"identifier";
            representedOrganization.name as v -> organization.name = (v.other);
            representedOrganization.telecom -> organization.telecom;
            representedOrganization.addr -> organization.address;
            representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e4,  e4.request = create('BackboneElement') as request, request.method = 'PUT',  e4.resource = create('Organization') as organization1,  organization1.id = uuid() as uuid4,  e4.fullUrl = append('urn:uuid:', uuid4), organization.partOf = create('Reference') as reference, reference.reference= ('urn:uuid:' + %organization1.id) then {
              OrgPartOf.id as id -> organization1.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              }"identifier";
              OrgPartOf.code -> organization1.type;
              OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
              OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e5,  e5.request = create('BackboneElement') as request, request.method = 'PUT',  e5.resource = create('Organization') as organization2,  organization2.id = uuid() as uuid5,  e5.fullUrl = append('urn:uuid:', uuid5), organization1.partOf = create('Reference') as reference, reference.reference= ('urn:uuid:' + %organization2.id) then{
                wholeOrgan.id as id -> organization2.identifier as identifier then {
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext then {
                    wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
                  }"ext";
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                }"identifier";
                wholeOrgan.name as v -> organization2.name = (v.other);
                wholeOrgan.telecom -> organization2.telecom;
                wholeOrgan.addr -> organization2.address;
              }"wholeOrganization";
            }"OrgPartOf";
          }"representedOrganization"; 
        }"practitioner";
      }"entity";
    }"practitionerRole";
  }"performer";


  //author
  obs.author as srcAuthor ->  bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST', e6.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid6,  e6.fullUrl = append('urn:uuid:', uuid6), request.url=append('PractitionerRole/', uuid6), ob.performer = create('Reference') as referenceaut,  referenceaut.reference = ('urn:uuid:' + %practitionerRole.id) then {
    srcAuthor.assignedAuthor as assignedAuthor then {
      assignedAuthor.code as codice -> practitionerRole.code as code2 then CECodeableConcept(codice,code2);
      assignedAuthor -> bundle.entry as e7,  e7.request = create('BackboneElement') as request, request.method = 'PUT', e7.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid7,  e7.fullUrl = append('urn:uuid:', uuid7),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner.id) then {
        srcAuthor.functionCode -> practitionerRole.code;
        assignedAuthor.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            assignedAuthor-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
        }"identifier";
        assignedAuthor.addr -> practitioner.address;      
        assignedAuthor.telecom -> practitioner.telecom;
        //person
        assignedAuthor.assignedPerson as person then {
          person.name -> practitioner.name;
          person.birthTime -> practitioner.birthDate;
        }"name";
      }"ASSAUth";
      //organization
      assignedAuthor.representedOrganization as representedOrganization ->  bundle.entry as e8,  e8.request = create('BackboneElement') as request, request.method = 'PUT',  e8.resource = create('Organization') as organization,  organization.id = uuid() as uuid8,  e8.fullUrl = append('urn:uuid:', uuid8), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('urn:uuid:', uuid8) then {
        representedOrganization.id as id -> organization.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
        }"identifier";
        representedOrganization.name as v -> organization.name = (v.other);
        representedOrganization.telecom -> organization.telecom;
        representedOrganization.addr -> organization.address;
        representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e9,  e9.request = create('BackboneElement') as request, request.method = 'PUT',  e9.resource = create('Organization') as organization1,  organization1.id = uuid() as uuid9,  e9.fullUrl = append('urn:uuid:', uuid9), organization.partOf = create('Reference') as reference, reference.reference= ('urn:uuid:' + %organization1.id) then {
          OrgPartOf.id as id -> organization1.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          }"identifier";
          OrgPartOf.code -> organization1.type;
          OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
          OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e10,  e10.request = create('BackboneElement') as request, request.method = 'PUT',  e10.resource = create('Organization') as organization2,  organization2.id = uuid() as uuid10,  e10.fullUrl = append('urn:uuid:', uuid10), organization1.partOf = create('Reference') as reference, reference.reference= ('urn:uuid:' + %organization2.id) then{
            wholeOrgan.id as id -> organization2.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            }"identifier";
            wholeOrgan.name as v -> organization2.name = (v.other);
            wholeOrgan.telecom -> organization2.telecom;
            wholeOrgan.addr -> organization2.address;
          }"wholeOrganization";
        }"OrgPartOf";
      }"representedOrganization"; 
      //device
      assignedAuthor.assignedAuthoringDevice as assignedAuthoringDevice -> bundle.entry as e11,  e11.request = create('BackboneElement') as request, request.method = 'POST',  e11.resource = create('Device') as device,  device.id = uuid() as uuid11,  e11.fullUrl = append('urn:uuid:', uuid11), request.url =append('Device/', uuid11), tgt.author = create('Reference') as reference, reference.reference= ('urn:uuid:' + %device.id) then{
        assignedAuthoringDevice.templateId -> device.identifier; 
        assignedAuthoringDevice.code -> device.type;
        assignedAuthoringDevice.manufacturerModelName as manufacturerModelName then{
          manufacturerModelName as m-> device.manufacturer = (m.displayName) "displayRule";
        }"manufacturer"; 
        assignedAuthoringDevice.softwareName as softwareName -> device.deviceName as deviceName then{
          softwareName -> deviceName.type = 'other' "typeName";		
          softwareName as s -> deviceName.name = (s.displayName) "name";
        }"deviceName";
      }"Device";
    }"assignedAuthor";
  }"author";


  //participant person
  obs.participant as participant where(typeCode!='DEV') ->  ob.encounter = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) then {
    participant -> encounter.participant as FhirParticipant then {
      participant as p -> FhirParticipant.type as type then { 
        p -> type.coding as coding then{
          p-> coding.code = (p.typeCode) "codice";
          p-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
        } "codeType"; 
      }"type";
    }"fhirParticipant";
    participant.participantRole as participantRole -> bundle.entry as e12,   e12.request = create('BackboneElement') as request, request.method = 'POST',  e12.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid12 ,  e12.fullUrl = append('urn:uuid:', uuid12), request.url = append('PractitionerRole/',uuid12), encounter.participant = create('BackboneElement') as participant1, participant1.individual = create('Reference') as referencepart, referencepart.reference =  ('urn:uuid:' + %practitionerRole.id) then { 
      participant.time -> participant1.period; 
      participant.functionCode -> practitionerRole.code;
      //non mappa i 2 precedenti
      participantRole  -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'PUT', e13.resource = create('Practitioner') as practitioner, practitioner.id = uuid() as uuid13, e13.fullUrl = append('urn:uuid:', uuid13),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner.id) then {
        participantRole.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            participantRole-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
        }"identifier";
        participantRole.code -> practitionerRole.code;
        participantRole.addr -> practitioner.address;
        participantRole.telecom -> practitioner.telecom;
        participantRole.playingEntity as playingEntity then {
          playingEntity.name -> practitioner.name;
          playingEntity.birthTime -> practitioner.birthDate;
        }"name";
      }"practitioner";
    }"partRole";
  }"participantEncounter";


  //participant device
  obs.participant as devParticipant where(typeCode='DEV') -> bundle.entry as e14, e14.request = create('BackboneElement') as request, request.method = 'POST', e14.resource = create('Device') as device,  device.id = uuid() as uuid14,  e14.fullUrl = append('urn:uuid:', uuid14), request.url=append('Device/', uuid14), ob.device = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %device.id) then {
    devParticipant.participantRole as participantRoleDev then {
      participantRoleDev.playingDevice as playingDevice then {
        playingDevice.code -> device.type;
        playingDevice.manufacturerModelName as manufacturerModelName then{
          manufacturerModelName as m-> device.manufacturer = (m.displayName) "displayRule";
        }"manufacturer"; 
        playingDevice.softwareName as softwareName -> device.deviceName as deviceName then{
          softwareName -> deviceName.type = 'other' "typeName";		
          softwareName as s -> deviceName.name = (s.displayName) "name";
        }"deviceName";
      }"playingDevice";
    }"participantRoleDev";
  }"devParticipant";


  //observationMedia
  obs.entryRelationship as er then {
    er.observationMedia as obsMedia -> bundle.entry as e15, e15.request = create('BackboneElement') as request, request.method = 'POST', e15.resource = create('Media') as media1,  media1.id = uuid() as uuid15,  e15.fullUrl = append('urn:uuid:', uuid15), request.url=append('Media/', uuid15), ob.derivedFrom = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %media1.id) then {
      obsMedia-> media1.content = create('Attachment') as Attachment then {
        obsMedia -> media1.status='unknown'"status";
        obsMedia.value as valueMedia then {
          valueMedia.mediaType as type -> Attachment.contentType=type "type";
          valueMedia -> Attachment.data=(valueMedia.dataBase64Binary) "data";
        }"valuemedia";
      } "Attachment";
    }"media";
  }"observationMedia";


  //referenceRange   
  obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
    refRange.observationRange as obsRange then {
    obsRange.value:ST as value->ref.text =create('string'),ref.text= (value.dataString) "value";
      obsRange -> ref.low = create('Quantity') as Low  then {
      obsRange.value: IVL_PQ as v  then {
        v.low as l1 then {
          l1.value as decValue-> Low.value = decValue;
          l1.unit as Unit-> Low.unit = Unit;
        }"decValue"; 
        v->ref.high = create('Quantity') as high  then {
          v.high as h1 then {
            h1.value as decValue1-> high.value = decValue1;
            h1.unit as Unit1-> high.unit = Unit1;
          }"decValue";
        }"high";           
      }"IVL_PQ";
      obsRange.interpretationCode->ref.type;
      obsRange.precondition as precondition then { 
        precondition.criterion as criterion then{ 
          criterion.code -> ref.appliesTo "appliesTo";
          criterion.value: IVL_PQ as v then {
            v.high as l1 then {
           l1-> ref.age = create('Quantity')as age then {
            l1 -> age.high as high then {
              l1.value as decValue -> high.value = decValue;
              l1.unit as Unit1-> high.unit = Unit1;
                      }"high";
                    }"age";
                  } "low"; 
             } "v"; 
          } "criterion"; 
       }"precondition";
    }"obsRange";              
  }"refRange";  
 }"ref";

}
group Act (source cda: Act, target pat : Patient, target ac : DiagnosticReport, target enc : Encounter, target bundle : Bundle){
  cda.code -> ac.code;
  cda where cda.statusCode .exists().not() then {
    cda->ac.status ='final'"statuscode";
  }"status";
  cda.statusCode as statusc where (code='completed') -> ac.status ='final';
  cda.statusCode as statusc where (code='active') -> ac.status ='registered';
  cda.statusCode as statusc where (code='aborted') -> ac.status ='cancelled';
  cda.statusCode as statusc where (code='suspended') -> ac.status ='partial';
  cda.effectiveTime as effectiveTime -> ac.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value3";
  cda -> ac.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %pat.id) "reference";
  cda -> ac.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";
  

  //specimen
  cda.specimen as src->bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST', e4.resource = create('Specimen') as specimen,  specimen.id = uuid() as uuid4,  e4.fullUrl = append('urn:uuid:', uuid4), request.url = append('Specimen/', uuid4), ac.specimen=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %specimen.id) then {
      src.specimenRole as specimenRole then{
        specimenRole.id ->specimen.identifier;
          specimenRole.specimenPlayingEntity as specimenPlayingEntity then {
          specimenPlayingEntity.code -> specimen.type;
        }"specimenPlayingEntity";
      }"SpecimenRole";
      src->specimen.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";

    cda.entryRelationship as entryRelationship then {
        entryRelationship.act as act then {
          act.code as code where (code='33882-2') ->specimen.collection=create('BackboneElement') as collection then {
            act.effectiveTime as effectivetime -> collection.collected =create('dateTime') as value then TSDateTime(effectivetime,value)"value";
            act.participant as participant ->bundle.entry as e10, e10.request = create('BackboneElement') as request, request.method = 'PUT', e10.resource = create('Practitioner') as practitioner, practitioner.id = uuid() as uuid11, e10.fullUrl = append('urn:uuid:', uuid11),  collection.collector = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner.id) then {
              participant.participantRole as participantRole then {
                participantRole.id as id -> practitioner.identifier as identifier then {
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext then {
                    participantRole-> request.url = append('Practitioner?identifier=',ext)"UUID";
                  }"ext";
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                }"identifier";
                participantRole.addr -> practitioner.address;
                participantRole.playingEntity  as playingEntity then{
                  playingEntity.name -> practitioner.name;
                }"playingEntity";
              }"participantRole";
            }"participant";
          }"collection";
        }"entryRelationshipact";
      }"entryRelationship";
  }"specimen";


  cda.entryRelationship as entryRelationship then {
    entryRelationship.observation as observation then {
      observation -> bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('Observation') as obs,  obs.id = uuid() as uuid13,  e12.fullUrl = append('urn:uuid:', uuid13), request.url = append('Observation/', uuid13), ac.result = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs.id) then {
        observation then  Observation(observation,pat,enc,obs,bundle) "ORG";
        // procedure
        cda.entryRelationship as entryRelationship1 then {
          entryRelationship1.procedure as proc  -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('Procedure') as procedure,  procedure.id = uuid() as uuid5,  e5.fullUrl = append('urn:uuid:', uuid5), request.url = append('Procedure/', uuid5), obs.partOf=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %procedure.id)  then{
            proc -> procedure.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
            proc -> procedure.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";
            proc where proc.statusCode .exists().not() then {
              proc->procedure.status ='unknown'"statuscode";
            }"status";
            proc.statusCode as statusc where (code='completed') -> procedure.status ='completed';
            proc.statusCode as statusc where (code='active') -> procedure.status ='in-progress';
            proc.statusCode as statusc where (code='aborted') -> procedure.status ='stopped';
            proc.statusCode as statusc where (code='suspended') -> procedure.status ='on-hold';
            proc.statusCode as statusc where (code='cancelled') -> procedure.status ='not-done';
            proc.statusCode as statusc where (code='held') -> procedure.status ='on-hold';
            proc.statusCode as statusc where (code='new') -> procedure.status ='preparation';
            proc.statusCode as statusc where (code='obsolete') -> procedure.status ='entered-in-error';
            proc.statusCode as statusc where (code='nullified') -> procedure.status ='unknown';
            proc.effectiveTime as effectiveTime -> procedure.performed = create('dateTime') as value then TSDateTime(effectiveTime, value) "datetime";
            proc.targetSiteCode -> procedure.bodySite;     
          }"procedure"; 
        }"entryRelationshipprocedure"; 
      }"obs";
    }"observation";
  }"entryRelationshipobservation";

  cda.entryRelationship as entryRelationship then {
     entryRelationship.organizer as organizer then {
      organizer -> bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('Observation') as obs,  obs.id = uuid() as uuid13,  e12.fullUrl = append('urn:uuid:', uuid13), request.url = append('Observation/', uuid13), ac.result = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs.id) then {
        organizer then  Organizer(cda,organizer,pat,enc,obs,bundle) "ORG";
        // procedure
        cda.entryRelationship as entryRelationship1 then {
          entryRelationship1.procedure as proc  -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('Procedure') as procedure,  procedure.id = uuid() as uuid5,  e5.fullUrl = append('urn:uuid:', uuid5), request.url = append('Procedure/', uuid5), obs.partOf=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %procedure.id)  then{
            proc -> procedure.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
            proc -> procedure.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";
            proc where proc.statusCode .exists().not() then {
              proc->procedure.status ='unknown'"statuscode";
            }"status";
            proc.statusCode as statusc where (code='completed') -> procedure.status ='completed';
            proc.statusCode as statusc where (code='active') -> procedure.status ='in-progress';
            proc.statusCode as statusc where (code='aborted') -> procedure.status ='stopped';
            proc.statusCode as statusc where (code='suspended') -> procedure.status ='on-hold';
            proc.statusCode as statusc where (code='cancelled') -> procedure.status ='not-done';
            proc.statusCode as statusc where (code='held') -> procedure.status ='on-hold';
            proc.statusCode as statusc where (code='new') -> procedure.status ='preparation';
            proc.statusCode as statusc where (code='obsolete') -> procedure.status ='entered-in-error';
            proc.statusCode as statusc where (code='nullified') -> procedure.status ='unknown';
            proc.effectiveTime as effectiveTime -> procedure.performed = create('dateTime') as value then TSDateTime(effectiveTime, value) "datetime";
            proc.targetSiteCode -> procedure.bodySite;     
          }"pbservation"; 
        }"entryRelationshiprocedure"; 
      }"Organizer";
    }"organizer";
  }"entryRelationshiporganizer";
          

  //PARTICIPANT
  cda.participant  as part where(typeCode!='DEV') ->  enc.participant as participant then{
      part  -> participant.type as type then { 
        part -> type.coding as coding then {
        part-> coding.code = (part.typeCode) "codice";
        part-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
        } "codeType"; 
      }"type";
  
     part.participantRole as participantRole ->  participant.individual = create('Reference') as reference then {
        participantRole ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'PUT', e.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e.fullUrl = append('urn:uuid:', uuid1),  reference.reference = ('urn:uuid:' + %practitioner.id) then { 
          participantRole.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
               participantRole-> request.url = append('Practitioner?identifier=',ext)"UUID";
               }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            }"identifier";
          participantRole.playingEntity  as playingEntity then{
          playingEntity.name -> practitioner.name;
        }"playingEntity";
      }"participanRoleBund";  
    }"participantRole";
  }"participant";

 // PERFORMER
  cda.performer as performer-> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url=append('PractitionerRole/', uuid1), ac.performer = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitionerRole.id) then {
    performer.assignedEntity as assignedEntity then {
      assignedEntity.code as codice -> practitionerRole.code;
      assignedEntity -> bundle.entry as e2,  e2.request = create('BackboneElement') as request, request.method = 'PUT', e2.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid2,  e2.fullUrl = append('urn:uuid:', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner.id) then {
      assignedEntity.code -> practitionerRole.code;
      assignedEntity.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            assignedEntity-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          }"identifier";
      assignedEntity.addr -> practitioner.address;      
      assignedEntity.telecom -> practitioner.telecom;
      assignedEntity.assignedPerson as person then {
        person.name -> practitioner.name;
        person.birthTime -> practitioner.birthDate;
      }"name";
      } "ASSAUth";
      assignedEntity.representedOrganization as representedOrganization ->  bundle.entry as e3,  e3.request = create('BackboneElement') as request, request.method = 'PUT',  e3.resource = create('Organization') as organization,  organization.id = uuid() as uuid3,  e3.fullUrl = append('urn:uuid:', uuid3), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('urn:uuid:', uuid3) then {
        representedOrganization.id as id -> organization.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
            }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          }"identifier";
        representedOrganization.name as v -> organization.name = (v.other);
        representedOrganization.telecom -> organization.telecom;
        representedOrganization.addr -> organization.address;
        representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e4,  e4.request = create('BackboneElement') as request, request.method = 'PUT',  e4.resource = create('Organization') as organization1,  organization1.id = uuid() as uuid4,  e4.fullUrl = append('urn:uuid:', uuid4), organization.partOf = create('Reference') as reference, reference.reference= ('urn:uuid:' + %organization1.id) then {
           OrgPartOf.id as id -> organization1.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
               }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            }"identifier";
          OrgPartOf.code -> organization1.type;
          OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
          OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e10bis,  e10bis.request = create('BackboneElement') as request, request.method = 'PUT',  e10bis.resource = create('Organization') as organization2,  organization2.id = uuid() as uuid5,  e10bis.fullUrl = append('urn:uuid:', uuid5), organization1.partOf = create('Reference') as reference, reference.reference= ('urn:uuid:' + %organization2.id) then{
            wholeOrgan.id as id -> organization2.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                  wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
               }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              }"identifier";
            wholeOrgan.name as v -> organization2.name = (v.other);
            wholeOrgan.telecom -> organization2.telecom;
            wholeOrgan.addr -> organization2.address;
            }"wholeOrganization";
          } "OrgPartOf";
       } "representedOrganization"; 
    }"performer";
  }; 
 
 
  // AUTHOR
  cda.author as srcAuthor-> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid6,  e5.fullUrl = append('urn:uuid:', uuid6), request.url=append('PractitionerRole/', uuid6), ac.performer = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitionerRole.id) then {
    srcAuthor.assignedAuthor as assignedAuthor then {
        assignedAuthor.code as codice -> practitionerRole.code;
        assignedAuthor -> bundle.entry as e7,  e7.request = create('BackboneElement') as request, request.method = 'PUT', e7.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid7,  e7.fullUrl = append('urn:uuid:', uuid7),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner.id) then {
        srcAuthor.functionCode -> practitionerRole.code;
        assignedAuthor.code -> practitionerRole.code;
        assignedAuthor.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              assignedAuthor-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
           }"identifier";
        assignedAuthor.addr -> practitioner.address;      
        assignedAuthor.telecom -> practitioner.telecom;
        //person
        assignedAuthor.assignedPerson as person then {
          person.name -> practitioner.name;
          person.birthTime -> practitioner.birthDate;
        }"name";
      }"ASSAUth";
      //organization
      assignedAuthor.representedOrganization as representedOrganization ->  bundle.entry as e8,  e8.request = create('BackboneElement') as request, request.method = 'PUT',  e8.resource = create('Organization') as organization,  organization.id = uuid() as uuid8,  e8.fullUrl = append('urn:uuid:', uuid8), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('urn:uuid:', uuid8) then {
         representedOrganization.id as id -> organization.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
             }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            }"identifier";
        representedOrganization.name as v -> organization.name = (v.other);
        representedOrganization.telecom -> organization.telecom;
        representedOrganization.addr -> organization.address;
        representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e9,  e9.request = create('BackboneElement') as request, request.method = 'PUT',  e9.resource = create('Organization') as organization1,  organization1.id = uuid() as uuid9,  e9.fullUrl = append('urn:uuid:', uuid9), organization.partOf = create('Reference') as reference, reference.reference= ('urn:uuid:' + %organization1.id) then {
            OrgPartOf.id as id -> organization1.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
               }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            }"identifier";
            OrgPartOf.code -> organization1.type;
            OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
            OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e10,  e10.request = create('BackboneElement') as request, request.method = 'PUT',  e10.resource = create('Organization') as organization2,  organization2.id = uuid() as uuid10,  e10.fullUrl = append('urn:uuid:', uuid10), organization1.partOf = create('Reference') as reference, reference.reference= ('urn:uuid:' + %organization2.id) then{
                wholeOrgan.id as id -> organization2.identifier as identifier then {
                 id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                 id.extension as ext->identifier.value = ext then {
                   wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              }"identifier";
                wholeOrgan.name as v -> organization2.name = (v.other);
                wholeOrgan.telecom -> organization2.telecom;
                wholeOrgan.addr -> organization2.address;
               }"wholeOrganization";
           }"OrgPartOf";
        }"representedOrganization"; 
     }"author";
  };

 
   //<!--entryRelationship per la gestione delle note e commenti-->

  cda.entryRelationship as entryRelationship then {
    entryRelationship.act as act then {
      act.text as text then {
        text.reference as reference -> ac.conclusion=(reference.value);
      }"text";
    }"Act";
  }"entryRelationship";
 
}


group Organizer(source cda: Act, source org : Organizer, target patient : Patient, target encounter : Encounter, target observation : Observation, target bundle : Bundle ) {
  org->observation.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
  org->observation.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";  
  org.code -> observation.code;
  org where org.code.exists().not() then {
    cda.code ->observation.code;
  }"act";
  org.statusCode as statusc where (code='completed') -> observation.status ='final';
  org.statusCode as statusc where (code='active') -> observation.status ='registered';
  org.statusCode as statusc where (code='aborted') -> observation.status ='cancelled';
  org.statusCode as statusc where (code='suspended') -> observation.status ='partial';
  org.effectiveTime as effectiveTime -> observation.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
  

   //specimen
  org.specimen as  spmn ->bundle.entry as e4o, e4o.request = create('BackboneElement') as request, request.method = 'POST', e4o.resource = create('Specimen') as specimen, specimen.id = uuid() as uuid4o, e4o.fullUrl = append('urn:uuid:', uuid4o), request.url = append('Specimen/', uuid4o), observation.specimen=create('Reference') as reference, reference.reference = ('urn:uuid:' + %specimen.id) then {
      spmn.specimenRole as specimenRole then{
          specimenRole.id as id -> specimen.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
              specimenRole-> request.url = append('Specimen?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
              }"identifier";
    
          specimenRole.specimenPlayingEntity as specimenPlayingEntity then {
          specimenPlayingEntity.code -> specimen.type;
            }"specimenPlayingEntity";
        }"specimenRole";
  }"specimen";


    //subject
  org.subject as sbj then {
    sbj.relatedSubject as relatedSubj-> patient.extension as extension2 then ExtSubjectAnimal(relatedSubj, extension2);
  }"subject";

 
  //performer
  org.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',  e1.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('PractitionerRole/', uuid1) then{
    performer -> observation.performer = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitionerRole.id) then {
      performer.assignedEntity as entity then {
          entity.code -> practitionerRole.code;
          entity -> bundle.entry as e2,  e2.request = create('BackboneElement') as request, request.method = 'PUT', e2.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid2,  e2.fullUrl = append('urn:uuid:', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner.id) then {
          entity.id as id -> practitioner.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                entity-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            }"identifier";
            entity.addr -> practitioner.address;      
            entity.telecom -> practitioner.telecom;
            entity.assignedPerson as person then {
              person.name -> practitioner.name;
              person.birthTime -> practitioner.birthDate;
            }"name";
              
          entity.representedOrganization as representedOrganization ->  bundle.entry as e3,  e3.request = create('BackboneElement') as request, request.method = 'PUT',  e3.resource = create('Organization') as organization,  organization.id = uuid() as uuid3,  e3.fullUrl = append('urn:uuid:', uuid3), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('urn:uuid:', uuid3) then {
            representedOrganization.id as id -> organization.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                   representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
                  }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                }"identifier";
            representedOrganization.name as v -> organization.name = (v.other);
            representedOrganization.telecom -> organization.telecom;
            representedOrganization.addr -> organization.address;
            representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e4,  e4.request = create('BackboneElement') as request, request.method = 'PUT',  e4.resource = create('Organization') as organization1,  organization1.id = uuid() as uuid4,  e4.fullUrl = append('urn:uuid:', uuid4), organization.partOf = create('Reference') as reference, reference.reference= ('urn:uuid:' + %organization1.id) then {
              OrgPartOf.id as id -> organization1.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              }"identifier";
              OrgPartOf.code -> organization1.type;
              OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
              OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e5,  e5.request = create('BackboneElement') as request, request.method = 'PUT',  e5.resource = create('Organization') as organization2,  organization2.id = uuid() as uuid5,  e5.fullUrl = append('urn:uuid:', uuid5), organization1.partOf = create('Reference') as reference, reference.reference= ('urn:uuid:' + %organization2.id) then{
                wholeOrgan.id as id -> organization2.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext then {
                          wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
                          }"ext";
                       id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                     }"identifier";
                  wholeOrgan.name as v -> organization2.name = (v.other);
                  wholeOrgan.telecom -> organization2.telecom;
                  wholeOrgan.addr -> organization2.address;
                  }"wholeOrganization";
                }"OrgPartOf";
            }"representedOrganization"; 
         }"practitioner";
       }"entity";
     }"practitionerRole";
  }"performer";


  //author
  org.author as srcAuthor ->  bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST', e6.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid6,  e6.fullUrl = append('urn:uuid:', uuid6), request.url=append('PractitionerRole/', uuid6), observation.performer = create('Reference') as referenceaut,  referenceaut.reference = ('urn:uuid:' + %practitionerRole.id) then {
    //srcAuthor.time as time -> tgt.date;
    srcAuthor.assignedAuthor as assignedAuthor then {
       assignedAuthor.code as codice -> practitionerRole.code as code2 then CECodeableConcept(codice,code2);
       assignedAuthor -> bundle.entry as e7,  e7.request = create('BackboneElement') as request, request.method = 'PUT', e7.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid7,  e7.fullUrl = append('urn:uuid:', uuid7),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner.id) then {
         srcAuthor.functionCode -> practitionerRole.code;
        //assignedAuthor.code -> practitionerRole.code;
         assignedAuthor.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            assignedAuthor-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
        }"identifier";
        assignedAuthor.addr -> practitioner.address;      
        assignedAuthor.telecom -> practitioner.telecom;
        //person
        assignedAuthor.assignedPerson as person then {
          person.name -> practitioner.name;
          person.birthTime -> practitioner.birthDate;
        }"name";
      }"ASSAUth";
      //organization
      assignedAuthor.representedOrganization as representedOrganization ->  bundle.entry as e8,  e8.request = create('BackboneElement') as request, request.method = 'PUT',  e8.resource = create('Organization') as organization,  organization.id = uuid() as uuid8,  e8.fullUrl = append('urn:uuid:', uuid8), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('urn:uuid:', uuid8) then {
        representedOrganization.id as id -> organization.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
        }"identifier";
        representedOrganization.name as v -> organization.name = (v.other);
        representedOrganization.telecom -> organization.telecom;
        representedOrganization.addr -> organization.address;
        representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e9,  e9.request = create('BackboneElement') as request, request.method = 'PUT',  e9.resource = create('Organization') as organization1,  organization1.id = uuid() as uuid9,  e9.fullUrl = append('urn:uuid:', uuid9), organization.partOf = create('Reference') as reference, reference.reference= ('urn:uuid:' + %organization1.id) then {
          OrgPartOf.id as id -> organization1.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          }"identifier";
          OrgPartOf.code -> organization1.type;
          OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
          OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e10,  e10.request = create('BackboneElement') as request, request.method = 'PUT',  e10.resource = create('Organization') as organization2,  organization2.id = uuid() as uuid10,  e10.fullUrl = append('urn:uuid:', uuid10), organization1.partOf = create('Reference') as reference, reference.reference= ('urn:uuid:' + %organization2.id) then{
            wholeOrgan.id as id -> organization2.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            }"identifier";
            wholeOrgan.name as v -> organization2.name = (v.other);
            wholeOrgan.telecom -> organization2.telecom;
            wholeOrgan.addr -> organization2.address;
          }"wholeOrganization";
        }"OrgPartOf";
      }"representedOrganization"; 
      //device
      assignedAuthor.assignedAuthoringDevice as assignedAuthoringDevice -> bundle.entry as e11,  e11.request = create('BackboneElement') as request, request.method = 'POST',  e11.resource = create('Device') as device,  device.id = uuid() as uuid11,  e11.fullUrl = append('urn:uuid:', uuid11), request.url =append('Device/', uuid11), tgt.author = create('Reference') as reference, reference.reference= ('urn:uuid:' + %device.id) then{
        assignedAuthoringDevice.templateId -> device.identifier; 
        assignedAuthoringDevice.code -> device.type;
        assignedAuthoringDevice.manufacturerModelName as manufacturerModelName then{
          manufacturerModelName as m-> device.manufacturer = (m.displayName) "displayRule";
        }"manufacturer"; 
        assignedAuthoringDevice.softwareName as softwareName -> device.deviceName as deviceName then{
          softwareName -> deviceName.type = 'other' "typeName";		
          softwareName as s -> deviceName.name = (s.displayName) "name";
        }"deviceName";
      }"Device";
    }"assignedAuthor";
  }"author";


   //participant person
  org.participant as participant where(typeCode!='DEV') ->  observation.encounter = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) then {
    participant -> encounter.participant as FhirParticipant then {
      participant as p -> FhirParticipant.type as type then { 
        p -> type.coding as coding then{
          p-> coding.code = (p.typeCode) "codice";
          p-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
        } "codeType"; 
      }"type";
    }"fhirParticipant";
    participant.participantRole as participantRole -> bundle.entry as e12,   e12.request = create('BackboneElement') as request, request.method = 'POST',  e12.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid12 ,  e12.fullUrl = append('urn:uuid:', uuid12), request.url = append('PractitionerRole/',uuid12), encounter.participant = create('BackboneElement') as participant1, participant1.individual = create('Reference') as referencepart, referencepart.reference =  ('urn:uuid:' + %practitionerRole.id) then { 
      participant.time -> participant1.period; 
      participant.functionCode -> practitionerRole.code;
      //non mappa i 2 precedenti
      participantRole  -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'PUT', e13.resource = create('Practitioner') as practitioner, practitioner.id = uuid() as uuid13, e13.fullUrl = append('urn:uuid:', uuid13),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner.id) then {
        participantRole.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            participantRole-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
        }"identifier";
        participantRole.code -> practitionerRole.code;
        participantRole.addr -> practitioner.address;
        participantRole.telecom -> practitioner.telecom;
        participantRole.playingEntity as playingEntity then {
          playingEntity.name -> practitioner.name;
          playingEntity.birthTime -> practitioner.birthDate;
        }"name";
      }"practitioner";
    }"partRole";
  }"participantEncounter";


  //participant device 
  org.participant as devParticipant where(typeCode='DEV') -> bundle.entry as e14, e14.request = create('BackboneElement') as request, request.method = 'POST', e14.resource = create('Device') as device,  device.id = uuid() as uuid14,  e14.fullUrl = append('urn:uuid:', uuid14), request.url=append('Device/', uuid14), observation.device = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %device.id) then {
    devParticipant.participantRole as participantRoleDev then {
      participantRoleDev.playingDevice as playingDevice then {
        playingDevice.code -> device.type;
        playingDevice.manufacturerModelName as manufacturerModelName then{
          manufacturerModelName as m-> device.manufacturer = (m.displayName) "displayRule";
        }"manufacturer"; 
        playingDevice.softwareName as softwareName -> device.deviceName as deviceName then{
          softwareName -> deviceName.type = 'other' "typeName";		
          softwareName as s -> deviceName.name = (s.displayName) "name";
        }"deviceName";
      }"playingDevice";
    }"participantRoleDev";
  }"devParticipant";


  org.component as component then {
      component.observation as observation -> bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST', e.resource = create('Observation') as observationhasmember, 
          observationhasmember.id = uuid() as uuid2, e.fullUrl = append('urn:uuid:', uuid2), request.url = append('Observation/', uuid2),
          observation.hasMember = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observationhasmember.id) then Observation(observation,patient,encounter,observationhasmember,bundle) "OBS";
  }"componentobservation";
   
   
  org.component as component then {
        component.organizer as organizer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as observationorganizer, 
          observationorganizer.id = uuid() as uuid3, e1.fullUrl = append('urn:uuid:', uuid3), request.url = append('Observation/', uuid3), observation.hasMember = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observationorganizer.id) then  {
          organizer then  Organizer(cda,organizer,patient,encounter,observationorganizer,bundle) "ORG";
        }"organizer";
  }"componentorganizer";


    //observationMedia  
  org.component as component then {
        component.observationMedia as obsMedia -> bundle.entry as e15, e15.request = create('BackboneElement') as request, request.method = 'POST', e15.resource = create('Media') as media1,  media1.id = uuid() as uuid15,  e15.fullUrl = append('urn:uuid:', uuid15), request.url=append('Media/', uuid15), observation.derivedFrom = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %media1.id) then {
          obsMedia-> media1.content = create('Attachment') as Attachment then {
          obsMedia -> media1.status='unknown'"status";
          obsMedia.value as valueMedia then {
              valueMedia.mediaType as type -> Attachment.contentType=type "type";
              valueMedia -> Attachment.data=(valueMedia.dataBase64Binary) "data";
              }"valuemedia";
          } "Attachment";
         }"obsmedia";
  }"component";


     //note
  org.component as component then {
      component.act as act then {
        act.text as text then {
            text.reference as reference -> observation.note as note then {
            reference->note.text =(reference.value)"reference";
            }"note";
        }"text"; 
      }"componentact";
  }"component";

}


group ExtSubjectAnimal(source src: relatedSubject, target ext: Extension) {
  src -> ext.url = 'http://hl7.org/fhir/StructureDefinition/patient-animal' "url";
  src.code as code -> ext.extension as ext, ext.url='species' ,ext.value = create('CodeableConcept') as code1 then CECodeableConcept(code,code1) "code";
  
}
",
          "subType": "00"
        }
      }
    }
  ],
  "definitions": [],
  "valuesets": [],
  "template_id_root": "2.16.840.1.113883.2.9.10.1.1",
  "last_update_date": {
    "$date": {
      "$numberLong": "1671446236619"
    }
  },
  "version": "1.0",
  "root_map": "RefertodilaboratorioFULLBODY",
  "deleted": false,
  "last_sync": {
    "$date": {
      "$numberLong": "1673389070410"
    }
  }
},{
  "_id": {
    "$oid": "63a03f6f59b6e6165a992970"
  },
  "maps": [
    {
      "name_map": "LetteraDimissioneOspedaliera",
      "filename_map": "Lettera_Dimissione_Ospedaliera.map",
      "content_map": {
        "$binary": {
          "base64": "map "http://hl7.org/fhir/StructureMap/LetteraDimissioneOspedaliera" = "LetteraDimissioneOspedaliera"

conceptmap "AllergyTypeMap" {

  prefix s = "http://terminology.hl7.org/ValueSet/v3-type"

  prefix t = "http://hl7.org/fhir/Allergy-type.html"

  s:OINT == t:intolerance
  s:ALG == t:allergy
  s:DALG == t:allergy
  s:EALG == t:allergy
  s:FALG == t:allergy
  s:NAINT == t:intolerance
  s:FNAINT == t:intolerance
  s:DNAINT == t:intolerance
  s:ENAINT == t:intolerance
  s:FINT == t:intolerance
  s:DINT == t:intolerance
  s:EINT == t:intolerance
}

conceptmap "AllergyCategoryMap" {

  prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
  prefix t = "http://hl7.org/fhir/Allergy-type.html"

  s:DALG == t:medication
  s:EALG == t:enviroment
  s:FALG == t:food
  s:FNAINT == t:food
  s:DNAINT == t:medication
  s:ENAINT == t:enviroment
  s:FINT == t:food
  s:DINT == t:medication
  s:EINT == t:enviroment
}

conceptmap "AllergyCriticality" {

  prefix s = "https://art-decor.org/art-decor/decor-valuesets--hl7it-?id=2.16.840.1.113883.2.9.77.22.11.6"
  prefix t = "https://www.hl7.org/fhir/codesystem-allergy-intolerance-criticality.html"
  
  s:L == t:low
  s:H == t:high
  s:M == t:unable_to_assess
}


uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL_PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target


imports "http://hl7.org/fhir/StructureMap/CdaToFhirDataTypes"
imports "http://hl7.org/fhir/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
  cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('urn:uuid:', uuid1), request.url = append('Composition/', uuid1),  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('urn:uuid:', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('urn:uuid:', uuid3),request.url = append('Encounter/', uuid3),
  bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST', e4.resource = create('Specimen') as specimen,  specimen.id = uuid() as uuid4,  e4.fullUrl = append('urn:uuid:', uuid4), request.url = append('Specimen/', uuid4),
  bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST',  e5.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid5,  e5.fullUrl = append('urn:uuid:', uuid5),request.url = append('DocumentReference/', uuid5) then {
  cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
   cda.recordTarget as recordTarget then{
    recordTarget.patientRole as patient then{
      patient.id as id -> patient.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext->identifier.value = ext then {
        recordTarget-> requestPAT.url = append('Patient?identifier=',ext) "UUID";
        }"ext";
        id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
      }"record";
    }"recPat";
   }"patient";
 } "ClinicalDocumentToBody";
}

group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference : DocumentReference) {
  cda -> bundle.id = uuid() "id";
  cda.id -> bundle.identifier "identifier";
  cda -> bundle.type = 'transaction' "type";
  cda.effectiveTime -> bundle.timestamp;
  cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";  
  cda.component as component then {
    component.structuredBody as body then {
      body.component as component  then {
       //discretizzi il primo livello di component 
	     component.section as srcSection then {
        srcSection.code where(code = '46241-6') -> composition.section as tgtSection  then ClinicalDocumentSectionMotivoRicovero(cda, srcSection, patient, tgtSection, bundle,encounter) "motivo ricovero";
        srcSection.code where(code = '47039-3') -> composition.section as tgtSection  then ClinicalDocumentSectionInquadramentoClinico(cda, srcSection, patient, tgtSection, bundle,encounter) "inquadramento clinico";
        srcSection.code where(code = '8648-8') -> composition.section as tgtSection  then ClinicalDocumentSectionDecorsoOspedaliero(cda, srcSection, patient, tgtSection, bundle,encounter) "Decorso Ospedaliero";
        srcSection.code where(code = '55109-3') -> composition.section as tgtSection  then ClinicalDocumentSectionComplicanze(cda, srcSection, patient, tgtSection, bundle,encounter) "Complicazioni";
        srcSection.code where(code = '11493-4') -> composition.section as tgtSection  then ClinicalDocumentSectionRiscontri(cda, srcSection, patient, tgtSection, bundle,encounter) "Hospital discharge studies summary";
        srcSection.code where(code = '34104-0') -> composition.section as tgtSection  then ClinicalDocumentSectionConsulenza(cda, srcSection, patient, tgtSection, bundle,encounter) "Hospital discharge studies summary";
        srcSection.code where(code = '30954-2') -> composition.section as tgtSection  then ClinicalDocumentSectionEsamiEseguitiRicovero(cda, srcSection, patient, tgtSection, bundle,encounter) "Esami_Eseguiti_Durante_il_Ricovero";
        srcSection.code where(code = '47519-4') -> composition.section as tgtSection  then ClinicalDocumentSectionProcedureEseguiteRicovero(cda, srcSection, patient, tgtSection, bundle,encounter) "History of Procedures Document";
        srcSection.code where(code = '48765-2') -> composition.section as tgtSection  then ClinicalDocumentSectionAllergie(cda, srcSection, patient, tgtSection, bundle,encounter) "Esami_Eseguiti_Durante_il_Ricovero";
        srcSection.code where(code = '10160-0') -> composition.section as tgtSection  then ClinicalDocumentSectionTerapiaFarmacologicaDuranteRicovero(cda, srcSection, patient, tgtSection, bundle,encounter) "Terapia Farmacologica alla dimissione";       
        srcSection.code where(code = '11535-2') -> composition.section as tgtSection  then ClinicalDocumentSectionDiagnosiDimissione(cda, srcSection, patient, tgtSection, bundle,encounter) "Diagnosi di Dimissione";
        srcSection.code where(code = '18776-5') -> composition.section as tgtSection  then ClinicalDocumentSectionIstruzioniFollowUp(cda, srcSection, patient, tgtSection, bundle,encounter) "Diagnosi di Dimissione";
        srcSection.code where(code = '10183-2') -> composition.section as tgtSection  then ClinicalDocumentSectionTerapiaDimissione(cda, srcSection, patient, tgtSection, bundle,encounter) "Terapia Farmacologica alla dimissione";
       };
      };
    } "body";
  };
}


// -----------------------------------------------------------------------------------------


group ClinicalDocumentSectionMotivoRicovero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";    
  } "cdaText";
  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id) then {
    entry1.observation as obs then Observation(obs, patient ,enc ,observation, bundle) "act";
  }"entry";
}

group ClinicalDocumentSectionInquadramentoClinico(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id), tgt.text as fhirText then {
    cdaText -> observation.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
    cdaText -> observation.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference"; 
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
    src.code -> observation.code;
    src where observation.statusCode.exists().not() then {
      src->observation.status ='final'"status";
      }"statuscode";
    cdaText->observation.note as note then{
      cdaText as t ->note.text =t "reference";
    }"reference";
  } "cdaText";
  src.component as component then {
    component.section as section2 then{
      // ANAMNESI
      section2 -> tgt.section as sec2 then{
      section2.code where(code = '11329-0') ->  sec2.code;
        section2.title as t -> sec2.title = (t.dataString);
        //section2.code -> sec2.code;
        section2.text as cdaText -> sec2.text as fhirText then {
          cdaText -> fhirText.status = 'generated' "narrativeStatus";
          cdaText as t -> fhirText.div = t "narrativeText";          
        } "cdaText";
        section2.entry as entry1 then {
          entry1.observation as obs then {
            //EntryRelationship per il Problem
            obs.code where (code = '75326-9')  then {
            obs->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Condition') as condition, condition.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('condtiion/', uuid1), sec2.entry = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %condition.id) then{
            obs.code -> condition.category;
            obs->condition.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
            obs->condition.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference"; 
            obs.statusCode as status where (code='completed') -> condition.verificationStatus as status2 then {
              status ->  status2.coding as status3 then{
                status -> status3.code ='confirmed' "finald";
                status -> status3.system='http://terminology.hl7.org/CodeSystem/condition-ver-status'"system";
              }"st3";
            }"status";
            obs.effectiveTime as effective1 then {
              effective1 where effective1.low.exists() or effective1.high.exists() then{
                effective1  -> condition.onset=create('Period') as periodonset then IVLTSPeriod(effective1,periodonset)"onsetperiod";
                }"ef";
              }"effectivetime1";
           
            obs.value:CD as val then{
              val->condition.code =create('CodeableConcept') as ce then {
                val.originalText -> ce.text;
                val -> ce.coding as coding then {
                val.code as code -> coding.code = cast(code, 'string');
                val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                val.displayName as display -> coding.display = cast(display, 'string');
                }"coding";  
              }"Ce"; 
            }"Value";
            obs.entryRelationship as entriRel  then{
              entriRel -> condition.evidence = create('BackboneElement') as evidence then{
              entriRel.observation as observation2 then {
                observation2.code as code then {
                code.code where (code.code = '89261-2') then { 
                  obs -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as observation, observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) then {
                 // entriRel -> condition.evidence = create('BackboneElement') as evidence then{
                   entriRel -> evidence.detail  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id) "ref";
                // }"evidence";   
                observation2.code -> observation.code;
                  observation2 where observation.statusCode.exists().not() then {
                    observation2->observation.status ='final'"status";
                    }"statuscode";            
                  observation2.text as text -> observation.note = create('Annotation') as note then{
                    text.reference as ref -> note.text = (ref.value) "val";
                  }"Annontation"; 
                  obs->observation.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
                  obs->observation.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";                            
                  observation2.statusCode as statusc where (code='completed') -> ob.status ='final';
                  observation2.statusCode as statusc where (code='active') -> ob.status ='registered';
                  observation2.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
                  observation2.statusCode as statusc where (code='suspended') -> ob.status ='partial';
                  observation2.value:CE as val then{
                    val->observation.value =create('CodeableConcept') as ce then {
                      val.originalText -> ce.text;
                      val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      }"coding";  
                    }"Ce"; 
                  }"Value"; 
                 }"obser";
                }"where Decorso Clinico";
                }"code";
                         
              }"Observation2";
            }"evidence";
         }"EntryRelationship1";
         obs.entryRelationship as entriRel  then{
          entriRel.observation as observation2 then {
            observation2.code as code then {
             code.code where (code.code ='33999-4') then{
               observation2 -> condition.clinicalStatus = create('CodeableConcept') as status then {
                observation2.text as text then{
                  text.reference as refstat -> status.text=(refstat.value)"statref";
                  }"textstat";
                 observation2  -> status.coding = create('Coding') as coding then{
                   observation2.value as value then{
                     value.code  where (value.code = 'LA16666-2')-> coding.code = 'active'"active";
                     value.code  where (value.code = 'LA18632-2')-> coding.code = 'inactive'"inactive";
                     value.codeSystem as system -> coding.system ='http://terminology.hl7.org/CodeSystem/condition-clinical'"system";
                     //value->coding.version='ConditionClinicalStatusCodes 4.0.1'"version";
                     value.displayName as display -> coding.display = cast(display, 'string');
                     }"value1";
                 }"coding";
               }"code";                       
             }"where Decorso Clinico"; 
            }"codestatus";  
           }"observationstatus"; 
          }"entryrelationshipstatus";           
          }"where entry patologica prossima";
        } "observationcondition";
       
        }"entry 1";
     
      
      
    }"subsection1";
 
  // ESAME PBIETTIVO
  section2.code where(code = '29545-1') then ClinicalDocumentSottoSectionOBS(section2, sec2, bundle,enc,patient) "esame obiettivo";
      // TETAPIA FARMACOLOGICA
   section2.code where(code = '42346-7') then ClinicalDocumentSottoSectionMS(section2, sec2, bundle,patient,enc) "Terapia Farmacologica all'ingresso";
    }"sec2fhir";
  }"componentSec";
 };
}


group ClinicalDocumentSectionDecorsoOspedaliero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id), tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";          
    src.code -> observation.code;
    src where observation.statusCode.exists().not() then {
      src->observation.status ='final'"status";
      }"statuscode";
      src->observation.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
      src->observation.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";                            
      cdaText->observation.note as note then{
      cdaText as t ->note.text =t "reference";
    }"reference";
  } "cdaText";
  src.component as component then {
    component.section as section2 then{
      src then  ClinicalDocumentSottoSectionOBS(section2, tgt, bundle,enc,patient) "Decorso";
    }"1";
  }"2";
  
}

group ClinicalDocumentSectionComplicanze(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";
  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id) then {
    entry1.observation as obs then Observation(obs, patient ,enc ,observation, bundle) "act";
  }"entry";

  //src then  ClinicalDocumentSottoSectionOBS(src, tgt, bundle,enc) "Decorso";

}

group ClinicalDocumentSectionRiscontri(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id), tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";          
    src.code -> observation.code;
    src where observation.statusCode.exists().not() then {
      src->observation.status ='final'"status";
      }"statuscode";
      src->observation.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
      src->observation.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";
      cdaText->observation.note as note then {
      cdaText as t ->note.text =t "reference";
    }"reference";
  } "cdaText";
  src.component as component then {
    component.section as section2 then{
      src then  ClinicalDocumentSottoSectionOBS(section2, tgt, bundle,enc,patient) "Decorso";
    }"1";
  }"2";
}

group ClinicalDocumentSectionConsulenza(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id) then {
    entry1.observation as obs then ObservationConsulenza(obs, patient ,enc ,observation, bundle) "act";
  }"entry";

}

group ClinicalDocumentSectionEsamiEseguitiRicovero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id) then {
    entry1.observation as obs then ObservationEsamiDuranteRicovero(obs, patient ,enc ,observation, bundle) "act";
  }"entry";

}

group ClinicalDocumentSectionProcedureEseguiteRicovero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";
 
  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Procedure') as procedure,  procedure.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Procedure/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %procedure.id) then {
    src -> procedure.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
    src -> procedure.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";
    entry1.procedure as proceduresrc then{
      proceduresrc.code -> procedure.code;
      proceduresrc.text as txt -> procedure.note as note then {
        txt.reference as ref -> note.text = (ref.value);
      }"text";
      
      proceduresrc where proc.statusCode .exists().not() then {
      proceduresrc->procedure.status ='unknown'"statuscode";
      }"status";
      proceduresrc.statusCode as statusc where (code='completed') -> procedure.status ='completed';
      proceduresrc.statusCode as statusc where (code='active') -> procedure.status ='in-progress';
      proceduresrc.statusCode as statusc where (code='aborted') -> procedure.status ='stopped';
      proceduresrc.statusCode as statusc where (code='suspended') -> procedure.status ='on-hold';
      proceduresrc.statusCode as statusc where (code='cancelled') -> procedure.status ='not-done';
      proceduresrc.statusCode as statusc where (code='held') -> procedure.status ='on-hold';
      proceduresrc.statusCode as statusc where (code='new') -> procedure.status ='preparation';
      proceduresrc.statusCode as statusc where (code='obsolete') -> procedure.status ='entered-in-error';
      proceduresrc.statusCode as statusc where (code='nullified') -> procedure.status ='unknown';

      proceduresrc.effectiveTime as efft -> procedure.performed = create('Period') as period then{
        efft.low as l -> period.start = (l.value) "val";
        efft.high as h -> period.end = (h.value) "val2";
      }"efft";

      proceduresrc.entryRelationship as entriRel ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Procedure/', uuid1) ,procedure.reasonReference  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id) then{
        entriRel->observation.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
        entriRel->observation.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference"; 
        entriRel.observation as obs then{
          obs.code -> observation.code;
          obs where observation.statusCode.exists().not() then {
            obs->observation.status ='final'"status";
            }"statuscode";           
        }"Observation value";
      }"Observation"; 
    }"Procedure";
  }"Entry";
}

group ClinicalDocumentSectionAllergie(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";
  
  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('AllergyIntolerance') as allergy,  allergy.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('AllergyIntolerance/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %allergy.id) then {
    src -> allergy.patient=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
    src -> allergy.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";
    entry1.act as actallint then {
  actallint.effectiveTime as eff -> allergy.onset = create('Period') as per then{
    eff.low as l -> per.start = (l.value) "val";
    eff.high as h -> per.end = (h.value) "val2";
  }"eff";
  actallint.entryRelationship as entryact then {
    entryact.observation as entryobs then {
      entryobs.value as code then{
        code.code as code1-> allergy.type = translate(code1,'#AllergyTypeMap','code') "type";
        code.code as code2 -> allergy.category = translate(code2,'#AllergyCategoryMap','code') "category";  
      }"code";
    
      entryobs.participant as partic then {
        partic.participantRole as pratRole then {
           pratRole.playingEntity as pratent then {
               pratent -> allergy.reaction = create('BackboneElement') as reaction then{
               pratent.code -> reaction.substance "subs";
           entryobs.entryRelationship as entryobs1 where (typeCode='MFST') then {
           entryobs1.observation as entobs then {
             entobs.effectiveTime as eff  then{
                    eff.low as l -> reaction.onset =(l.value);
            }"eff";
            entobs.value->reaction.manifestation "manifest";
                     }"observ";
                   }"entry";
               }"cod";  
          }"react";
        }"pratentit";
       }"PratRole";

       entryobs.entryRelationship as entryobs2 then {
        entryobs2.observation as entobs then {
          entobs.code as code where (code='SEV') then {
          entobs.value as value then{
             value.code where(value.code = 'M') ->allergy.criticality = 'unable-to-assess'"active";
             value.code where(value.code = 'L') ->allergy.criticality = 'low'"active"; 
             value.code where(value.code = 'H') ->allergy.criticality = 'high'"active"; 
              }"entobs";
             } "sev";
            }"severity";
          }"observ";
       

       entryobs.entryRelationship as entryobs3 then {
        entryobs3.observation as entobs then {
          entobs.code as code where (code='33999-4') then {
           // entobs.value->allergy.clinicalStatus "cstatus";
           entobs -> allergy.clinicalStatus = create('CodeableConcept') as status then {
           entobs  -> status.coding = create('Coding') as coding then{
            entobs.value as value then{
                value.code  where (value.code = 'LA16666-2')-> coding.code = 'active'"active";
                value.code  where (value.code = 'LA18632-2')-> coding.code = 'inactive'"active";
                value.codeSystem as system -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical'"system";
               // value->coding.version='ConditionClinicalStatusCodes 4.0.1'"version";
                value.displayName as display -> coding.display = cast(display, 'string');
                 }"value1";
               }"coding";
             }"clinicalStatus";
            }"stat";
          }"obobs3serv";
       }"entry3";

        entryobs.entryRelationship as entryobs4 then {
         entryobs4.act as entact then {
          entact.text as actext then {
              actext.reference as reftxt -> allergy.note = create('BackboneElement') as note  then {
              reftxt as ref->note.text= (ref.value) "notxt";
                }"notetxt";
              }"txtact";
          }"obobs4serv";
       }"entry4";

         }"partic";
        };
       };
      }"allergy";
}

group ClinicalDocumentSectionDiagnosiDimissione(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";
  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id) then {
    entry1.observation as obs then Observation(obs, patient ,enc ,observation, bundle) "act";
  }"entry";
}

group ClinicalDocumentSectionIstruzioniFollowUp(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";
  src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('CarePlan') as carePlan,  carePlan.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('CarePlan/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %carePlan.id) then {
    cdaText-> carePlan.note as note then{
      cdaText as t ->note.text =t "reference";
    }"reference";
    src-> carePlan.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
    src-> carePlan.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";
    src -> carePlan.status='active'"status";
    src -> carePlan.intent='order'"intent";
  }"entry";
}

group ClinicalDocumentSectionTerapiaFarmacologicaDuranteRicovero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";
  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationAdministration') as medicationAdm,  medicationAdm.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('MedicationAdministration/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %medicationAdm.id) then {
    entry1->medicationAdm.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
    entry1->medicationAdm.context=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";
   entry1.substanceAdministration as sa then{
      sa.text as tx -> medicationAdm.note as note then{
        sa.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Practitioner/', uuid1) ,medicationAdm.performer as perf,  perf.actor  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner.id) then{
           performer.time as ti -> note.time = (ti.value);
          performer.assignedEntity as assEnty then{
            assEnty.id -> practitioner.identifier;
            assEnty.assignedPerson as assPers then{
              assPers.name -> practitioner.name;
            }"assPer";
          }"ass";
        }"erformer";
        tx.reference as ref -> note.text = (ref.value);
      }"tx"; 
      sa.statusCode as st -> medicationAdm.status = (st.code);
      sa.effectiveTime as eff -> medicationAdm.effective = create('Period') as period then IVLTSPeriod(eff,period) "period";//then{
      //   eff.low as l -> period.start = (l.value);
      //   eff.high as h -> period.start = (h.value);        
      // }"period";
      
      sa ->  medicationAdm.dosage as dos then {
        sa.routeCode -> dos.route;        
      }"dos";
      sa ->  medicationAdm.dosage as dos then {
        sa.approachSiteCode -> dos.site;        
      }"dos";
      

      sa.doseQuantity as doseQuant ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationRequest') as medicationRq,  medicationRq.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('MedicationRequest/', uuid1) ,medicationAdm.request  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %medicationRq.id) then{
        doseQuant -> medicationRq.dosageInstruction = create('Dosage') as dosageInstruction then{
          doseQuant.originalText as ot then{
            ot.reference -> dosageInstruction.text;
          }"ot";
          doseQuant -> dosageInstruction.doseAndRate as dosageRate then{
            doseQuant -> dosageRate.dose = create('Range') as d then{
              doseQuant -> d.low = create('SimpleQuantity') as l then{
                doseQuant.low as lo -> l.value = (lo.value); 
                doseQuant.low as lo -> l.unit = (lo.unit); 
              }"low";
              doseQuant -> d.high = create('SimpleQuantity') as h then{
                doseQuant.high as hi -> h.value = (hi.value);
                doseQuant.high as hi -> h.unit = (hi.unit); 
              }"low";
            }"d";
          }"dosageRate";
        }"Dosage";
        sa-> medicationRq.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
        sa-> medicationRq.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";
        sa -> medicationRq.status='active'"status";
        sa -> medicationRq.intent='order'"intent";
        sa.rateQuantity as rateQuantity -> medicationRq.dosageInstruction = create('Dosage') as dosageInstruction1 then{
          rateQuantity.originalText as ot then{
            ot.reference -> dosageInstruction1.text;
          }"ot";
          rateQuantity -> dosageInstruction1.doseAndRate as dosageRate then{
            rateQuantity -> dosageRate.rate = create('Range') as d then{
              rateQuantity -> d.low = create('SimpleQuantity') as l then{
                rateQuantity.low as lo -> l.value = (lo.value); 
                rateQuantity.low as lo -> l.unit = (lo.unit); 
              }"low";
              rateQuantity -> d.high = create('SimpleQuantity') as h then{
                rateQuantity.high as hi -> h.value = (hi.value);
                rateQuantity.high as hi -> h.unit = (hi.unit); 
              }"low";
            }"d";
          }"dosageRate";
        }"Dosage";

       
        sa -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Medication/', uuid1) ,medicationAdm.medication  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %medication.id) then{
        sa-> medicationRq.medication=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %medication.id) "reference";
          sa.administrationUnitCode -> medication.form;
          sa.consumable as consumable then {
            consumable.manufacturedProduct as manufac then{
              manufac.manufacturedMaterial as manuprod then{
                  manuprod.code -> medication.code;
              }"manufactproduct"; 
            }"manufac";
          }"consumable";
          
          sa.entryRelationship as entryRelationship then{

            entryRelationship.supply as sup -> medicationRq.dispenseRequest as dispreq then {              
                sup -> dispreq.quantity = create('SimpleQuantity') as quantity then{
                  sup.quantity as q -> quantity.value = (q.value);
                }"quantity";              
            }"sub";

            entryRelationship.observation as obs -> medication then{
              obs.code where(code = '123') then{
                obs.code -> medication.code; 
                obs -> medication.ingredient as ingr then{
                  obs -> ingr.item = create('Reference') as ref then{
                    obs-> ref.display = 'string' "string";
                  }"ref";
                  obs -> ingr.strength = create('Ratio') as st then{
                    obs -> st.numerator = create('Quantity') as num then{
                      obs.value as v -> num.value = (v.value);
                    }"num";
                    obs -> st.denominator = create('Quantity') as num then{
                      obs.value as v -> num.value = '1';
                    }"num";
                  }"st";
                }"ingr";
              }"where1";
  
              obs.code where(code = '1234') then{
                obs.code -> medication.code;               
                  obs -> medication.amount = create('Ratio') as st then{
                    obs -> st.numerator = create('Quantity') as num then{
                      obs.value as v -> num.value = (v.value);
                    }"num";
                    obs -> st.denominator = create('Quantity') as num then{
                      obs.value as v -> num.value = '1';
                    }"num";
                  }"st";              
              }"where2";
            }"obs"; 
          }"med";
        }"Medication";
        
        //giusto
        sa.participant as participant then {
          participant.time as t -> medicationRq.authoredOn = (t.value);

          participant.participantRole as participantR -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Practitioner/', uuid1) ,medicationRq.requester  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner.id) then{
            participantR.id -> practitioner.identifier;
            participantR.playingEntity as playingEntity then{
              playingEntity.name -> practitioner.name;
            }"playingEntity";
          }"PR";
        }"participant";
  
  
        sa.effectiveTime: EIVL as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
          eff -> dosage.timing = create('Timing') as timing then {
            eff -> timing.repeat as rep then {
              eff.event as ev -> rep.where = (ev.code);
            }"rep";
          }"timing";
        }"period";
  
        sa.effectiveTime: TS as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage, dosage.timing = create('Timing') as timing, timing.event = (eff.value) "tim";
  
          
        sa.effectiveTime: PIVL_TS as eff -> medicationAdm.dosage = create('BackboneElement') as dosage then{
          eff -> dosage.rate = create('Ratio') as ratio then{
            eff -> ratio.numerator = create('Quantity') as quan then{
              eff.period as per ->  quan.value = (per.value);
              eff.period as per ->  quan.unit = (per.unit);
            }"quanti";
            eff -> ratio.denominator = create('Quantity') as quan then{
              eff.period ->  quan.value = '1';
              eff.period as per ->  quan.unit = (per.unit);
            }"quanti";
          }"ratio";
        }"eff";     

      }"Medicationrequest";

     
    }"sa";
  }"entry";
}

group ClinicalDocumentSectionTerapiaDimissione(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationRequest') as medicationRq,  medicationRq.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('MedicationRequest/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %medicationRq.id) then {
    src-> medicationRq.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
    src-> medicationRq.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";
    src -> medicationRq.status='active'"status";
    src -> medicationRq.intent='order'"intent";
    entry1.substanceAdministration as substract then{      
      substract.consumable as cons then{
        cons.manufacturedProduct as man1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Medication/', uuid1) ,medicationRq.medication = create('Reference') as medref,  medref.reference = ('urn:uuid:' + %medication.id) then {
          man1.manufacturedMaterial as mm then{
            mm.code -> medication.code;
          }"mm";
          substract.administrationUnitCode -> medication.form;

          substract.entryRelationship as entryRelationship then{
            entryRelationship.observation as obs -> medication then{
              obs.code where(code = '12345') then{
                obs.code -> medication.code; 
                obs -> medication.ingredient as ingr then{
                  obs -> ingr.item = create('Reference') as ref then{
                    obs-> ref.display = 'string' "string";
                  }"ref";
                  obs -> ingr.strength = create('Ratio') as st then{
                    obs -> st.numerator = create('Quantity') as num then{
                      obs.value as v -> num.value = (v.value);
                    }"num";
                    obs -> st.denominator = create('Quantity') as num then{
                      obs.value as v -> num.value = '1';
                    }"num";
                  }"st";
                }"ingr";
              }"where1";
  
              obs.code where(code = '123456') then{
                obs.code -> medication.code;               
                  obs -> medication.amount = create('Ratio') as st then{
                    obs -> st.numerator = create('Quantity') as num then{
                      obs.value as v -> num.value = (v.value);
                    }"num";
                    obs -> st.denominator = create('Quantity') as num then{
                      obs.value as v -> num.value = '1';
                    }"num";
                  }"st";              
              }"where2";
            }"obs"; 
          }"med";
  
          substract.entryRelationship as entryRelationship then{
            entryRelationship.supply as sup -> medicationRq.dispenseRequest as dispreq then {              
                sup -> dispreq.quantity = create('SimpleQuantity') as quantity then{
                  sup.quantity as q -> quantity.value = (q.value);
                }"quantity";              
            }"sub";
          }"entry";
        }"man1";
      }"cons";
      substract.text as tx -> medicationRq.note as note then{
        tx.reference as ref -> note.text = (ref.value);
      }"tx"; 
      substract.statusCode as st -> medicationRq.status = (st.code);

      substract.effectiveTime: IVL_TS as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
        eff -> dosage.timing = create('Timing') as timing then {
          eff -> timing.repeat as rep then {
            eff -> rep.bounds = create('Period') as period then{
              eff.low as lo1 -> period.start = (lo1 .value);
              eff.high as hi1 -> period.end = (hi1.value);  
            }"period";
          }"rep";
        }"timing";
      }"period";

      substract.effectiveTime: EIVL_TS as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
        eff -> dosage.timing = create('Timing') as timing then {
          eff -> timing.repeat as rep then {
            eff.event as ev -> rep.when = (ev.code);
          }"rep";
        }"timing";
      }"period";

      substract.effectiveTime: IVL_TS as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage, dosage.timing = create('Timing') as timing, timing.event = (eff.value) "tim";

      substract.effectiveTime: PIVL_TS as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
        eff -> dosage.timing = create('Timing') as timing then periodTiming(eff,timing) "cod";
      }"eff";     

      substract -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
        substract.routeCode -> dosage.route;        
      }"dosage";
      
      substract -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
        substract.approachSiteCode -> dosage.site;        
      }"dosage";

      substract.doseQuantity as doseQuant -> medicationRq.dosageInstruction = create('Dosage') as dosageInstruction then{
        doseQuant.originalText as ot then{
          ot.reference -> dosageInstruction.text;
        }"ot";
        doseQuant -> dosageInstruction.doseAndRate as dosageRate then{
          doseQuant -> dosageRate.dose = create('Range') as d then{
            doseQuant -> d.low = create('SimpleQuantity') as l then{
              doseQuant.low as lo -> l.value = (lo.value); 
              doseQuant.low as lo -> l.unit = (lo.unit); 
            }"low";
            doseQuant -> d.high = create('SimpleQuantity') as h then{
              doseQuant.high as hi -> h.value = (hi.value); 
              doseQuant.high as hi -> h.unit = (hi.unit);
            }"low";
          }"d";
        }"dosageRate";
      }"Dosage";
      
      substract.rateQuantity as rateQuantity -> medicationRq.dosageInstruction = create('Dosage') as dosageInstruction1 then{
        rateQuantity.originalText as ot then{
          ot.reference -> dosageInstruction1.text;
        }"ot";
        rateQuantity -> dosageInstruction1.doseAndRate as dosageRate then{
          rateQuantity -> dosageRate.rate = create('Range') as d then{
            rateQuantity -> d.low = create('SimpleQuantity') as l then{
              rateQuantity.low as lo -> l.value = (lo.value); 
              rateQuantity.low as lo -> l.unit = (lo.unit); 
            }"low";
            rateQuantity -> d.high = create('SimpleQuantity') as h then{
              rateQuantity.high as hi -> h.value = (hi.value);
              rateQuantity.high as hi -> h.unit = (hi.unit); 
            }"low";
          }"d";
        }"dosageRate";
      }"rateq";
            
      substract.participant as part then{
        part.time as time -> medicationRq.authoredOn = (time.value);
      }"Participant";

      substract.participant as part -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Practitioner/', uuid1) ,medicationRq.performer = create('Reference') as medref,  medref.reference = ('urn:uuid:' + %practitioner.id) then{
        part.participantRole as partRole then{
          partRole.id -> practitioner.identifier;
          partRole.playingEntity as playingEntity then{
            playingEntity.name -> practitioner.name;
          }"playingEntity";
        }"partRole";
      }"participant";  

    }"substract";
  };
}

//---------------------------------------------------------------------------------------------------

group ClinicalDocumentSottoSectionOBS(source src : Section,  target tgt, target bundle : Bundle, target enc : Encounter , target patient : Patient){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id), tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
   
    src.code -> observation.code;
    src->observation.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
    src->observation.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";
    src where observation.statusCode.exists().not() then {
      src->observation.status ='final'"status";
      }"statuscode";
    cdaText->observation.note as note then{
      cdaText as t ->note.text =t "reference";      
    }"reference";
  } "cdaText";
}

group ClinicalDocumentSottoSectionMS(source src : Section,  target tgt, target bundle : Bundle, target patient : Patient,target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('MedicationStatement') as Medicationstatement,  Medicationstatement.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Medicationstatement/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %Medicationstatement.id), tgt.text as fhirText then {
    cdaText->Medicationstatement.note as note then{
      cdaText as t ->note.text =t "reference";
      cdaText as t-> Medicationstatement.medication= create('CodeableConcept') as medication, medication.text=t"text";
    }"reference";
    
    src->Medicationstatement.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
    src->Medicationstatement.context=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";

     src->Medicationstatement.status ='unknown'"status";
    
  } "cdaText";
}


group Observation (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {
    
  obs->ob.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";  
  obs.code -> ob.code;
  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs where obs.statusCode.exists().not() then {
  obs->ob.status ='final'"status";
  }"statuscode";
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";

  obs.value:CD as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        };
      } "translation";
    }"coding";
  }"val";

  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
    val.value as value->quantity.value = value;
    val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";

  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";
  obs.interpretationCode -> ob.interpretation;
    obs.methodCode -> ob.method;

    
    obs.effectiveTime as eff -> ob.effective = create('Period') as per then{
      eff.low as l -> per.start = (l.value) "val";
      eff.high as h -> per.end = (h.value) "val2";
    }"eff";
    
    obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
      refRange.observationRange as obsRange -> ref.low = create('SimpleQuantity') as Low  then {
          obsRange.value: IVL_PQ as v  then {
            v.low as l1 then {
              l1.value as decValue-> Low.value = decValue;
              l1.unit as Unit-> Low.unit = Unit;
            }"decValue";          
          }"IVL_PQ";                      
      }"obsRange";              
    }"refRange";  
};


group ObservationConsulenza (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {
    
  obs->ob.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";  
  obs.code -> ob.code;
  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs where obs.statusCode.exists().not() then {
    obs->ob.status ='final'"status";
    }"statuscode";
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";


  obs.value:CD as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        };
      } "translation";
    }"coding";
  }"val";

  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
    val.value as value->quantity.value = value;
    val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";

  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";

    obs->ob.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
    obs->ob.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";
    obs.interpretationCode -> ob.interpretation;
    obs.methodCode -> ob.method;

    
    obs.effectiveTime as eff -> ob.effective = create('Period') as per then{
      eff.low as l -> per.start = (l.value) "val";
      eff.high as h -> per.end = (h.value) "val2";
    }"eff";
    
    obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
      refRange.observationRange as obsRange -> ref.low = create('SimpleQuantity') as Low  then {
          obsRange.value: IVL_PQ as v  then {
            v.low as l1 then {
              l1.value as decValue-> Low.value = decValue;
              l1.unit as Unit-> Low.unit = Unit;
            }"decValue";          
          }"IVL_PQ";                      
      }"obsRange";              
    }"refRange";  


    obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Practitioner/', uuid1) ,ob.performer  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner.id) then{
      performer.assignedEntity as assEntity then {
        assEntity.id -> practitioner.identifier;
        assEntity.assignedPerson as assi then {
          assi.name -> practitioner.name;
        }"assi";
      }"assEntity";
    }"perf";

    obs.participant as participant -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('ServiceRequest') as serviceRequest,  serviceRequest.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('ServiceRequest/', uuid1) ,ob.basedOn  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %serviceRequest.id) then{
      participant.time as t -> serviceRequest.authoredOn = (t.value);
      obs->serviceRequest.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
      obs->serviceRequest.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";
      obs -> serviceRequest.status='active'"status";
      obs -> serviceRequest.intent='order'"intent";
      participant.participantRole as participantRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Practitioner/', uuid1) ,serviceRequest.performer  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner.id) then{
        participantRole.id -> practitioner.identifier;
        participantRole.playingEntity as pe then{
          pe.name -> practitioner.name;
        }"pe";
      }"participantRole";
    }"participant";


};

group ObservationEsamiDuranteRicovero (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {
    
  obs->ob.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";  
  obs.code -> ob.code;
  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs where obs.statusCode.exists().not() then {
    obs->ob.status ='final'"status";
    }"statuscode";
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";


  obs.value:CD as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        };
      } "translation";
    }"coding";
  }"val";

  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
    val.value as value->quantity.value = value;
    val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";

  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";

    obs->ob.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
    obs->ob.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";
    obs.interpretationCode -> ob.interpretation;
    obs.methodCode -> ob.method;

    
    obs.effectiveTime as eff -> ob.effective = create('Period') as per then{
      eff.low as l -> per.start = (l.value) "val";
      eff.high as h -> per.end = (h.value) "val2";
    }"eff";
    
    obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
      refRange.observationRange as obsRange -> ref.low = create('SimpleQuantity') as Low  then {
          obsRange.value: IVL_PQ as v  then {
            v.low as l1 then {
              l1.value as decValue-> Low.value = decValue;
              l1.unit as Unit-> Low.unit = Unit;
            }"decValue";          
          }"IVL_PQ";                      
      }"obsRange";              
    }"refRange";  


    obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Practitioner/', uuid1) ,ob.performer  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner.id) then{
      performer.assignedEntity as assEntity then {
        assEntity.id -> practitioner.identifier;
        assEntity.assignedPerson as assi then {
          assi.name -> practitioner.name;
        }"assi";
      }"assEntity";
    }"perf";

    obs.participant as participant -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('ServiceRequest') as serviceRequest,  serviceRequest.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('ServiceRequest/', uuid1) ,ob.basedOn  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %serviceRequest.id) then{
      participant.time as t -> serviceRequest.authoredOn = (t.value);
      obs->serviceRequest.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
      obs->serviceRequest.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";
      obs -> serviceRequest.status='active'"status";
      obs -> serviceRequest.intent='order'"intent";
      participant.participantRole as participantRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Practitioner/', uuid1) ,serviceRequest.performer  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner.id) then{
        participantRole.id -> practitioner.identifier;
        participantRole.playingEntity as pe then{
          pe.name -> practitioner.name;
        }"pe";
      }"participantRole";
    }"participant";
};

group periodTiming(source effectiveTime: PIVL_TS, target timing: Timing){
  effectiveTime -> timing.repeat as r then{
    effectiveTime.period as p -> r.period = (p.value); 
    effectiveTime.period as p -> r.periodUnit = (p.unit);   
  }"repeat";
}

//---------------------------------------------------------------------------------------

group Act (source cda: Act, target pat : Patient, target ac : DiagnosticReport, target enc : Encounter, target bundle : Bundle){
  cda.code -> ac.code;
  cda.statusCode as statusc where (code='completed') -> ob.status ='final';
  cda.statusCode as statusc where (code='active') -> ob.status ='registered';
  cda.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  cda.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  cda.effectiveTime as effectiveTime -> ac.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value3";
  cda -> ac.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %pat.id) "reference";
  cda -> ac.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";
  cda.participant  as part->  enc.participant as participant then{
     part  -> participant.type as type then { 
          part -> type.coding as coding then{
            part-> coding.code = (part.typeCode) "codice";
            part-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
          } "codeType"; 
        }"type";
    part.participantRole as participantRole ->  participant.individual = create('Reference') as reference then {
      participantRole ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'PUT', e.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e.fullUrl = append('urn:uuid:', uuid1),  reference.reference = ('urn:uuid:' + %practitioner.id) then { 
        participantRole.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
            participantRole-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
        }"identifier";
        participantRole.playingEntity  as playingEntity then{
          playingEntity.name -> practitioner.name;
        }"playingEntity";
         }"participanRoleBund";  
    }"participantRole";
  }"participant";
  cda.entryRelationship as entryRelationship then {
    entryRelationship.observation as observation ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST', e.resource = create('Observation') as obs,  obs.id = uuid() as uuid2,  e.fullUrl = append('urn:uuid:', uuid2), request.url = append('Observation/', uuid2), ac.result = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs.id) then Observation(observation,pat,enc,obs,bundle) "OBS";
  }"entryRelationship";
}

",
          "subType": "00"
        }
      }
    }
  ],
  "definitions": [],
  "valuesets": [],
  "template_id_root": "2.16.840.1.113883.2.9.10.1.5",
  "last_update_date": {
    "$date": {
      "$numberLong": "1671446383560"
    }
  },
  "version": "1.0",
  "root_map": "LetteraDimissioneOspedaliera",
  "deleted": false,
  "last_sync": {
    "$date": {
      "$numberLong": "1673389070410"
    }
  }
},{
  "_id": {
    "$oid": "63a03f7259b6e6165a992971"
  },
  "maps": [
    {
      "name_map": "RefertodiRadiologiaBody",
      "filename_map": "StructureMap_Referto di radiologia.map",
      "content_map": {
        "$binary": {
          "base64": "map "http://hl7.org/fhir/StructureMap/RefertodiRadiologiaBody" = "RefertodiRadiologiaBody"

conceptmap "OBSstatus" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-statusCode"
    prefix t = "http://hl7.org/fhir/status.html"

    s:completed == t:final
    s:active == t:registered
    s:aborted == t:cancelled
    s:suspended == t:partial
  }
  conceptmap "cm-v3-administrative-gender" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-AdministrativeGender"
    prefix t = "http://hl7.org/fhir/ValueSet/administrative-gender"
  
    s:M == t:male
    s:F == t:female
  }
  conceptmap "AllergyTypeMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://hl7.org/fhir/Allergy-type.html"

    s:OINT == t:intolerance
    s:ALG == t:allergy
    s:DALG == t:allergy
    s:EALG == t:allergy
    s:FALG == t:allergy
    s:NAINT == t:intolerance
    s:FNAINT == t:intolerance
    s:DNAINT == t:intolerance
    s:ENAINT == t:intolerance
    s:FINT == t:intolerance
    s:DINT == t:intolerance
    s:EINT == t:intolerance
  }
  conceptmap "AllergyCategoryMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://hl7.org/fhir/Allergy-type.html"

    s:DALG == t:medication
    s:EALG == t:enviroment
    s:FALG == t:food
    s:FNAINT == t:intolerance
    s:DNAINT == t:medication
    s:ENAINT == t:enviroment
    s:FINT == t:food
    s:DINT == t:medication
    s:EINT == t:enviroment
  }

conceptmap "CricalityMap" {
    prefix s = "http://terminology.hl7.org/CodeSystem/v3-ObservationValue"
    prefix t = "http://hl7.org/fhir/allergy-intolerance-criticality"

    s: M == t: low
    s: H == t: high
    s: L == t: low
}

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/List" alias List as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL_PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target


imports "http://hl7.org/fhir/StructureMap/CdaToFhirDataTypes"
imports "http://hl7.org/fhir/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
    cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('urn:uuid:', uuid1), request.url = append('Composition/', uuid1),  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('urn:uuid:', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('urn:uuid:', uuid3),request.url = append('Encounter/', uuid3), bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST',  e4.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid4,  e4.fullUrl = append('urn:uuid:', uuid4),request.url = append('DocumentReference/', uuid4) then {
    cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
     cda.recordTarget as recordTarget then{
      recordTarget.patientRole as patient then{
        patient.id as id -> patient.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
          recordTarget-> requestPAT.url = append('Patient?identifier=',ext) "UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
        }"record";
      }"recPat";
     }"patient";
   } "ClinicalDocumentToBody";
  }
  
group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference : DocumentReference) {
    cda -> bundle.id = uuid() "id";
    cda.id -> bundle.identifier "identifier";
    cda -> bundle.type = 'transaction' "type";
    cda.effectiveTime -> bundle.timestamp;
    cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";
    cda -> bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('DiagnosticReport') as diagnosticReport,  diagnosticReport.id = uuid() as uuid1,  e.fullUrl = append('urn:uuid:', uuid1), request.url = append('DiagnosticReport/', uuid1) then{
        cda.code -> diagnosticReport.code "diagnosticCode";
        cda -> diagnosticReport.status = 'registered' "stats";
    cda.component as component then {
      component.structuredBody as body then {
        body.component as component  then {
           component.section as srcSection then {
          srcSection.code -> composition.section as tgtSection  then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle,encounter, diagnosticReport);       
         } "section";
        } "component";
    }"body";
    };
    }"diagnostic";
  }
  
group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target dReport : DiagnosticReport) {
    src.title as t -> tgt.title = (t.dataString);
    src.code -> tgt.code;
    src -> tgt.entry = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %dReport.id) "reference"; 
    src.entry as entry then{
        src.text as cdaText -> tgt.text as fhirText then {
            cdaText -> fhirText.status = 'generated' "narrativeStatus";
            cdaText as t -> fhirText.div = t "narrativeText";
        } "cdaText";
        entry then DiagnosticReportFunction(src, entry, dReport, bundle, enc, patient) "dreport";
    }"entry";
    src where src.entry.exists().not() then  DiagnosticReportFunction(src, cda, dReport, bundle, enc, patient) "narrative";
    src.component as component then {
        component.section as sec -> tgt.section as tgtSection then ClinicalDocumentSection(cda, sec, patient, tgtSection, bundle, enc, dReport);
    }"component";
}

group DiagnosticReportFunction(source section: section, source src: entry, target dReport: DiagnosticReport, target bundle: Bundle, target encounter : Encounter, target patient : Patient){
    src.act as act1 then{
        section where (code.code = '121181') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('ImagingStudy') as imageS,  imageS.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('ImagingStudy/', uuid1), dReport.imagingStudy = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %imageS.id) then ImagingStudy(act1,section, imageS,patient,encounter) "imagingStudy";
        section where (code.code = '48765-2') -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid2,  e2.fullUrl = append('urn:uuid:', uuid2), request.url = append('Observation/', uuid2), dReport.result = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs1.id) then{ 
            section -> obs1.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
            section -> obs1.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";  
            section -> obs1.status = 'final' "STatusobse";
            section.code -> obs1.code;
            act1.statusCode as s then {
                s.code as cos-> obs1.status = translate(cos, '#OBSstatus', 'code') "codeS";
            }"status";
            section -> bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST', e4.resource = create('List') as list1,  list1.id = uuid() as uuid4,  e4.fullUrl = append('urn:uuid:', uuid4), request.url = append('List/', uuid4), obs1.focus = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %list1.id) then{
                section -> list1.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
                section -> list1.status = 'current' "listatus";
                section -> list1.mode = 'working' "lstmod";
                section -> list1.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";  
                src -> list1.entry as entryList1 then{
                    act1 -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('AllergyIntolerance') as allergy,  allergy.id = uuid() as uuid5,  e5.fullUrl = append('urn:uuid:', uuid5), request.url = append('AllergyIntolerance/', uuid5), entryList1.item = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %allergy.id) then allergyFunction(act1, allergy, patient,encounter) "allergy";
                }"item";
            }"list";
        }"allergyAct";
        section where (code.code = '55111-9') -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST', e3.resource = create('Observation') as obs2,  obs2.id = uuid() as uuid3,  e3.fullUrl = append('urn:uuid:', uuid3), request.url = append('Observation/', uuid3), dReport.result = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs2.id) then Observation(act1, patient, encounter, obs2, bundle) "observation";
    }"act";
    src.observation as entryobs then{
        section where (code.code = '11329-0') -> bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST', e6.resource = create('Observation') as obs6,  obs6.id = uuid() as uuid6,  e6.fullUrl = append('urn:uuid:', uuid6), request.url = append('Observation/', uuid6), dReport.result = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs6.id) then {
            section -> obs6.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
            section -> obs6.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";  
            section -> obs6.status = 'final' "tatusobse";
            section.code -> obs6.code;
            entryobs -> bundle.entry as e7, e7.request = create('BackboneElement') as request, request.method = 'POST', e7.resource = create('Condition') as condition1,  condition1.id = uuid() as uuid7,  e7.fullUrl = append('urn:uuid:', uuid7), request.url = append('Condition/', uuid7), obs6.focus = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %condition1.id) then ConditionFunction(entryobs,condition1, patient, encounter,bundle) "condition";
        }"observationstclinica";
        section where (code.code = '55114-3') -> bundle.entry as e9, e9.request = create('BackboneElement') as request, request.method = 'POST', e9.resource = create('Observation') as obs9,  obs9.id = uuid() as uuid9,  e9.fullUrl = append('urn:uuid:', uuid9), request.url = append('Observation/', uuid9), dReport.result = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs9.id) then Observation(entryobs, patient, encounter, obs9, bundle) "precesami";
        section where (code.code = '55109-3') -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('Observation') as obs8, obs8.id = uuid() as uuid8, e8.fullUrl = append('urn:uuid:', uuid8), request.url = append('Observation/', uuid8), dReport.result = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs8.id) then Observation(entryobs, patient, encounter, obs8, bundle) "complicanze";
        section where (code.code = '18785-6') -> bundle.entry as e14, e14.request = create('BackboneElement') as request, request.method = 'POST', e14.resource = create('Observation') as obs14, obs14.id = uuid() as uuid14, e14.fullUrl = append('urn:uuid:', uuid14), request.url = append('Observation/', uuid14), dReport.result = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs14.id) then Observation(entryobs, patient, encounter, obs14, bundle) "quesitoDiagnostico";
    } "entryObs";
    src.organizer as organizer then {
        src -> bundle.entry as e10, e10.request = create('BackboneElement') as request, request.method = 'POST', e10.resource = create('Observation') as obs10,  obs10.id = uuid() as uuid10,  e10.fullUrl = append('urn:uuid:', uuid10), request.url = append('Observation/', uuid10), dReport.result = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs10.id) then{
            section -> obs10.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
            section -> obs10.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";  
            section -> obs10.status = 'final' "tatusobse";
            section.code -> obs10.code "codeObs"; 
            section -> bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'POST', e11.resource = create('List') as list11,  list11.id = uuid() as uuid11,  e11.fullUrl = append('urn:uuid:', uuid11), request.url = append('List/', uuid11), obs10.focus = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %list11.id) then{
                section -> list11.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
                section -> list11.status = 'current' "liststat";
                section -> list11.mode = 'working' "listmd";
                section -> list11.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";  
                organizer -> list11.entry as entryList2 then{
                    organizer ->bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('FamilyMemberHistory') as familyMember, familyMember.id = uuid() as uuid12,  e12.fullUrl = append('urn:uuid:', uuid12), request.url = append('FamilyMemberHistory/', uuid12), entryList2.item = create('Reference') as reference, reference.reference = ('urn:uuid:' + %familyMember.id) then FamilyMemberFunction(organizer, familyMember, patient) "family";
                }"org";
            }"List";
        }"entryOrganizer";
    }"organizer";
    section where section.entry.exists().not() then {
        section where (code.code = '55110-1').not() then{
            section.text as text -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'POST', e13.resource = create('Observation') as obs13,  obs13.id = uuid() as uuid13,  e13.fullUrl = append('urn:uuid:', uuid13), request.url = append('Observation/', uuid13), dReport.result = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs13.id) then {
                section -> obs13.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
                section -> obs13.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";  
                section -> obs13.status = 'preliminary' "obsst";
                section.code -> obs13.code "obscde";
                section -> obs13.status = 'final' "statusS";
                text -> obs13.note as note then{
                    text as t-> note.text = create('string') as textNote then EDstring(t,textNote) "note";
                } "narrative";    
            }"txtsec";
          } "NonConclusion";
        section where(code.code = '55110-1') then {
            section.text as t -> dReport.conclusion = create('string')  as textConclusion then EDstring(t,textConclusion) "conc";
        }"conclusion";
    }"whereCond";
}

group Observation(source cda : observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {  
    cda->ob.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
    cda->ob.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference"; 
    cda.code -> ob.code;
    cda -> ob.status = 'final' "Stats";
    //value datatype
    cda.value:ST as st -> ob.value =create('string'),  ob.value= (st.dataString) "value";
    cda.value:BL as boolean ->ob.value=(boolean.value)"boolean";
    cda.value:CE as val then{
        val->ob.value =create('CodeableConcept') as ce then {
        val.originalText as originalText then{
            originalText.reference as reference-> ce.text = (reference.value) "reference";
        }"originalText";
        val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        } "code";
        val.translation as translation -> ce.coding as coding then {
          translation.code as code -> coding.code = cast(code, 'string');
          translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          translation.displayName as display -> coding.display = cast(display, 'string');
          translation.qualifier as qualifier then{
            qualifier.value as value -> ce.coding as coding then {
              value.code as code -> coding.code = cast(code, 'string');
              value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
              value.displayName as display -> coding.display = cast(display, 'string');
              } "value";
            };
          } "translation";
        }"coding";
      }"val";
      cda.value:CD as val then{
        val->ob.value =create('CodeableConcept') as ce then {
        val.originalText as originalText then{
            originalText.reference as reference-> ce.text = (reference.value) "reference";
        }"originalText";
        val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        } "code";
        val.translation as translation -> ce.coding as coding then {
          translation.code as code -> coding.code = cast(code, 'string');
          translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          translation.displayName as display -> coding.display = cast(display, 'string');
          translation.qualifier as qualifier then{
            qualifier.value as value -> ce.coding as coding then {
              value.code as code -> coding.code = cast(code, 'string');
              value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
              value.displayName as display -> coding.display = cast(display, 'string');
              } "value";
            };
          } "translation";
        }"coding";
      }"val";
    cda.value:PQ as val then{
        val->ob.value = create('Quantity') as quantity then {
            val.value as value->quantity.value = value;
            val.unit as unit-> quantity.unit = unit "unit";
        }"quantity";
    }"valueQuantity";
    //
    cda.effectiveTime as effectiveTime where (value.exists()) -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
    cda.effectiveTime as effectiveTime where (low.exists()) -> ob.effective = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
    cda.text as text -> ob.note as note then{
        text.reference as reference -> note.text = (reference.value) "text";
    } "note";
    cda.statusCode as s then {
        s.code as cos-> ob.status = translate(cos, '#OBSstatus', 'code') "codeS";
    }"status";
}  

group ImagingStudy(source src: act, source section : section, target tgt : ImagingStudy, target patient: patient, target encounter : encounter){
    src.id -> tgt.identifier;
    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";  
    src -> tgt.status = 'available' "status";
    src.entryRelationship as entryRelationship then{
        entryRelationship.act as act -> tgt.series as series then{
            act.id as id -> series.uid = (id.root);
             section.code as code -> series.modality= create('Coding') as coding then {
                code.code as code1 -> coding.code = cast(code1, 'string');
                code.codeSystem as system->coding.system= translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                code.displayName as display->coding.display= cast(display, 'string');
                }"modality";
            act.entryRelationship as entryRelationship2 then{
                entryRelationship2.observation as obs -> series.instance as instance then{
                    obs.id as id -> instance.uid = (id.root) "root";
                    obs.code as code1-> instance.sopClass = create('Coding') as coding then {
                        code1.code as code -> coding.code = cast(code, 'string');
                         code1.codeSystem as system->coding.system= translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                        code1.displayName as display->coding.display= cast(display, 'string');
                       }"sopClass";
                } "idRoot";
            }"instance";
        } "series";
    } "entryRelationship";
}

group ConditionFunction (source src: cdaElement, target tgt: Condition, target patient : patient, target encounter : encounter, target bundle : Bundle) {
    src.code -> tgt.category;
    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference"; 
    src.statusCode as stscode -> tgt.verificationStatus as verifstatus then { 
        stscode as codeS -> verifstatus.coding = create('Coding') as coding then {
            codeS.code -> coding.code = 'confirmed' "code";
            codeS -> coding.system ='http://terminology.hl7.org/CodeSystem/condition-ver-status' "system";
            codeS -> coding.display= cast('Confirmed', 'string') "display";
    }"coding";    
    }"verifstatus";
    src.effectiveTime as effectiveTime -> tgt.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
    src.value -> tgt.code;
    src.entryRelationship as entryRelationship then{
        entryRelationship.observation as obsentry then{
            obsentry.code where code ='89261-2' then{
                obsentry -> tgt.evidence as evidence, bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as obsy,  obsy.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1), evidence.detail = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obsy.id) then Observation(obsentry, patient, encounter, obsy, bundle) "observation";
            }"observation";
            obsentry.code where code = '33999-4' then{
                obsentry.value as value -> tgt.clinicalStatus as clinicalstatus then {
                    value as val -> clinicalstatus.coding = create('Coding') as coding then {
                        val where(code = 'LA9041-0') -> coding.code =  'resolved' "code";
                        val where(code = 'LA18632-2') -> coding.code =  'inactive' "code";
                        val where(code = 'LA16666-2') -> coding.code =  'active' "code";
                        val -> coding.system = 'http://terminology.hl7.org/CodeSystem/condition-clinical' "system";
                        val.displayName as display-> coding.display= cast(display, 'string') "display";
                    }"coding";           
                    obsentry.text as text then{
                        text.reference as reference -> clinicalstatus.text = (reference.value) "text";
                    }"text";
                }"clinicalstatus";
            }"clinicalStatus2";
        }"EntryRelObsevation";
        
    } "entryR";
}

group allergyFunction(source src: cdaElement, target tgt: AllergyIntolerance, target patient : patient, target encounter : encounter) {
    src -> tgt.patient=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference"; 
    src.entryRelationship as entryRelationship1 then{
        entryRelationship1.observation as observation1 then{
            observation1.effectiveTime as effectiveTime -> tgt.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
            observation1.value as code then{
                code.code as code1-> tgt.type = translate(code1,'#AllergyTypeMap','code') "type"; 
                code.code as code1 -> tgt.category = translate(code1,'#AllergyCategoryMap','code') "category";   
            }"code";
            observation1.participant as participant-> tgt.reaction as reaction then{
                observation1.entryRelationship as entryRelationship2 where (typeCode = 'MFST') then{
                    entryRelationship2.observation as observation2 then{
                        observation2.value -> reaction.manifestation "manifestation";
                        observation2.effectiveTime as effectiveTime then{
                            effectiveTime.low as low -> reaction.onset = create('dateTime') as value then TSDateTime(low, value) "valuePeriodLow";
                        }"low";
                    }"observ2";
                }"entryR2";
                participant.participantRole as participantRole then{
                    participantRole.playingEntity as playingEntity then{
                        playingEntity.code -> reaction.substance "reaction";
                    }"playingEntity";
                }"participantRole";
            }"participant";
            observation1.entryRelationship as entryRelationship2 where (typeCode = 'MFST') then{
                entryRelationship2.observation as observation2 where observation1.participant.exists().not() -> tgt.reaction as reaction then{
                    observation2.value -> reaction.manifestation "manifestation";
                    observation2.effectiveTime as effectiveTime then{
                        effectiveTime.low as low -> reaction.onset = create('dateTime') as value then TSDateTime(low, value) "valuePeriodLow";
                    }"low";
                }"observ2";
            }"entryR2";
            observation1.entryRelationship as entryRelationship3 where (typeCode = 'SUBJ') then{
                entryRelationship3.observation as observation3 then{
                    //criticality
                    observation3.value as value then{
                        value.code as c-> tgt.criticality = translate(c,'#CricalityMap','code') "value";
                    }"criticality"; 
                }"observ3";
                entryRelationship3.act as act -> tgt.note as note then{
                    act.text as text then{
                        text.reference as reference -> note.text = (reference.value);
                    }"note";
                }"act";
            }"entryR3";
            observation1.entryRelationship as entryRelationship4 where (typeCode = 'REFR') then{
                entryRelationship4.observation as observation4  then{
                    //observation4.value -> tgt.clinicalStatus;
                    observation4.value as value -> tgt.clinicalStatus as clinicalStatus then{
                        value as valu -> clinicalStatus.coding = create('Coding') as coding then{
                            valu where(code = 'LA9041-0') -> coding.code =  'resolved' "code";
                            valu where(code = 'LA18632-2') -> coding.code =  'inactive' "code";
                            valu where(code = 'LA16666-2') -> coding.code =  'active' "code";
                            valu -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical' "system";
                            valu.displayName as display-> coding.display= cast(display, 'string') "display";
                        }"coding";
                    }"clinicalStatus";
                }"observ4";
            }"entryR4";
        }"observation";
    }"entryrelationship";
}


group FamilyMemberFunction(source src : organizer, target tgt : familyMember, target patient : patient){
    src -> tgt.patient = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "patReference";    
    src.statusCode -> tgt.status;
    src.effectiveTime as effectiveTime -> tgt.date = create('date') as value then TSDate(effectiveTime,value) "date";
    src.subject as subject then{
        subject.relatedSubject as relatedSubject then{
            relatedSubject.code -> tgt.relationship "relationship code";
            relatedSubject.subject as subject -> tgt.sex as sex then {
                subject.administrativeGenderCode as administrativeGenderCode -> sex.coding as coding then {
                    administrativeGenderCode.code as sexCode-> coding.code = translate(sexCode, '#cm-v3-administrative-gender', 'code') "gender";
                    administrativeGenderCode.system -> coding.system = 'http://hl7.org/fhir/administrative-gender' "system";
                }"coding";
            }"subject";
        }"relatedSub";
    }"relationship";
    src.component as component -> tgt.condition as condition then{
        component.observation as observation then{
            observation.code -> condition.code "code";
            observation.text as text -> tgt.note as note then{
                text.reference as reference -> note.text = (reference.value) "value";
            }"reference";
            observation.statusCode -> tgt.status;
            observation.effectiveTime as effectiveTime -> condition.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
            observation.value -> condition.outcome "codeable";
            observation.entryRelationship as entryR then{
                entryR.observation as obs then{
                    obs where (code.code ='35267-4') then{
                        obs.value as value -> condition.onset = create('Age') as Age then {
                            value.value as valueAge -> Age.value = valueAge "age";
                            value.unit as unit -> Age.code = unit "unit";
                            value.unit as unit -> Age.unit = unit "unit";
                            value -> Age.system = 'http://unitsofmeasure.org' "system";
                    } "value";
                }"insorgenza";
                    obs where (code.code ='39016-1') then{
                        obs.value as value -> tgt.deceased = create('Age') as Age then {
                            value.value as valueAge -> Age.value = valueAge "age";
                            value.unit as unit -> Age.code = unit "unit";
                            value.unit as unit -> Age.unit = unit "unit";
                            value -> Age.system = 'http://unitsofmeasure.org' "system";
                    } "value";
                }"death";
            }"obser";
            }"EntryRel";
        }"observation";
    }"component";
}",
          "subType": "00"
        }
      }
    }
  ],
  "definitions": [],
  "valuesets": [],
  "template_id_root": "2.16.840.1.113883.2.9.10.1.7.1",
  "last_update_date": {
    "$date": {
      "$numberLong": "1671446386225"
    }
  },
  "version": "1.0",
  "root_map": "RefertodiRadiologiaBody",
  "deleted": false,
  "last_sync": {
    "$date": {
      "$numberLong": "1673389070410"
    }
  }
},{
  "_id": {
    "$oid": "63a03f7359b6e6165a992972"
  },
  "maps": [
    {
      "name_map": "RefertodiSpecialisticaAmbulatorialeBody",
      "filename_map": "Referto di specialistica_v1.0.map",
      "content_map": {
        "$binary": {
          "base64": "map "http://hl7.org/fhir/StructureMap/RefertodiSpecialisticaAmbulatorialeBody" = "RefertodiSpecialisticaAmbulatorialeBody"

conceptmap "OBSstatus" {
prefix s = "http://terminology.hl7.org/ValueSet/v3-statusCode"
prefix t = "http://hl7.org/fhir/status.html"

s:completed == t:final
s:active == t:registered
s:aborted == t:cancelled
s:suspended == t:partial
}
conceptmap "MedicationStatusMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-statusCode"
    prefix t = "http://hl7.org/fhir/CodeSystem/medicationrequest-status"
    
    s:completed == t:completed
    s:active == t:active
    s:aborted == t:cancelled
    s:suspended == t:"on-hold"
    }
conceptmap "cm-v3-administrative-gender" {
prefix s = "http://terminology.hl7.org/ValueSet/v3-AdministrativeGender"
prefix t = "http://hl7.org/fhir/ValueSet/administrative-gender"

s:M == t:male
s:F == t:female
}

conceptmap "AllergyTypeMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://hl7.org/fhir/Allergy-type.html"

    s:OINT == t:intolerance
    s:ALG == t:allergy
    s:DALG == t:allergy
    s:EALG == t:allergy
    s:FALG == t:allergy
    s:NAINT == t:intolerance
    s:FNAINT == t:intolerance
    s:DNAINT == t:intolerance
    s:ENAINT == t:intolerance
    s:FINT == t:intolerance
    s:DINT == t:intolerance
    s:EINT == t:intolerance
  }
  conceptmap "AllergyCategoryMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://hl7.org/fhir/Allergy-type.html"

    s:DALG == t:medication
    s:EALG == t:enviroment
    s:FALG == t:food
    s:FNAINT == t:intolerance
    s:DNAINT == t:medication
    s:ENAINT == t:enviroment
    s:FINT == t:food
    s:DINT == t:medication
    s:EINT == t:enviroment
  }

conceptmap "CricalityMap" {
    prefix s = "http://terminology.hl7.org/CodeSystem/v3-ObservationValue"
    prefix t = "http://hl7.org/fhir/allergy-intolerance-criticality"

    s: M == t: low
    s: H == t: high
    s: L == t: low
}


conceptmap "ClinicalStatusMap" {
    prefix s = "https://loinc.org/99493-9/"
    prefix t = "http://terminology.hl7.org/CodeSystem/condition-clinical"

    s: "LA16666-2" == t: active
    s: "LA18632-2" == t: inactive
    s: "LA9041-0" == t: resolved
}

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/List" alias List as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL_PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target


imports "http://hl7.org/fhir/StructureMap/CdaToFhirDataTypes"
imports "http://hl7.org/fhir/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
    cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('urn:uuid:', uuid1), request.url = append('Composition/', uuid1),  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('urn:uuid:', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('urn:uuid:', uuid3),request.url = append('Encounter/', uuid3), bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST',  e4.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid4,  e4.fullUrl = append('urn:uuid:', uuid4),request.url = append('DocumentReference/', uuid4) then {
    cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
    cda.recordTarget as recordTarget then{
        recordTarget.patientRole as patient then{
        patient.id as id -> patient.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext1 -> identifier.value = ext1 "value";
        id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
        }"idfr";
            patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7') or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17') or (root='2.16.840.1.113883.2.9.4.3.15') then {
                id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
            }"record";
        }"recPat";
    }"patient";
    } "ClinicalDocumentToBody";
}


group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference : DocumentReference) {
    cda -> bundle.id = uuid() "id";
    cda.id -> bundle.identifier "identifier";
    cda -> bundle.type = 'transaction' "type";
    cda.effectiveTime -> bundle.timestamp;
    cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";
    cda -> bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('DiagnosticReport') as diagnosticReport,  diagnosticReport.id = uuid() as uuid1,  e.fullUrl = append('urn:uuid:', uuid1), request.url = append('DiagnosticReport/', uuid1) then{
        cda.code -> diagnosticReport.code "diagnosticCode";
        cda -> diagnosticReport.status = 'registered' "stats";
    cda.component as component then {
    component.structuredBody as body then {
        body.component as component  then {
            component.section as srcSection then {
        srcSection.code -> composition.section as tgtSection  then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle,encounter, diagnosticReport);       
        } "section";
        } "component";
    }"body";
    };
    }"diagnostic";
}

group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target dReport : DiagnosticReport) {
    src.title as t -> tgt.title = (t.dataString);
    src.code -> tgt.code;
    src -> tgt.entry = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %dReport.id) "reference"; 
    src.entry as entry then{
        src.text as cdaText -> tgt.text as fhirText then {
            cdaText -> fhirText.status = 'generated' "narrativeStatus";
            cdaText as t -> fhirText.div = t "narrativeText";
        } "cdaText";
        entry then DiagnosticReportFunction(src, entry, dReport, bundle, enc, patient) "dreport";
    }"entry";
    src where src.entry.exists().not() then  DiagnosticReportFunction(src, cda, dReport, bundle, enc, patient) "narrative";
    src.component as component then {
        component.section as sec -> tgt.section as tgtSection then ClinicalDocumentSection(cda, sec, patient, tgtSection, bundle, enc, dReport);
    }"component";
}

group DiagnosticReportFunction(source section: section, source src: entry, target dReport: DiagnosticReport, target bundle: Bundle, target encounter : Encounter, target patient : Patient){
    src.observation as observation then{
        section where code.code ='29299-5' -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1), dReport.result = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs1.id) then Observation(observation, patient, encounter, obs1, bundle) "Quesito Diagnostico";
        section where code.code = '11329-0' -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Observation') as obs2,  obs2.id = uuid() as uuid2,  e2.fullUrl = append('urn:uuid:', uuid2), request.url = append('Observation/', uuid2), dReport.result = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs2.id) then {
            section -> obs2.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
            section -> obs2.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";  
            section -> obs2.status = 'final' "STatusobse";
            section.code -> obs2.code;
            observation.statusCode as s then {
                s.code as cos-> obs2.status = translate(cos, '#OBSstatus', 'code') "codeS";
            }"status";
            section.component as component then{
                component.section as section then{
                    section.code where code = '10160-0' then{
                        section.entry as entry then{
                            entry.substanceAdministration as subAdmin -> bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'POST', e11.resource = create('MedicationStatement') as medicationstatement,  medicationstatement.id = uuid() as uuid11,  e11.fullUrl = append('urn:uuid:', uuid11), request.url = append('Medicationstatement/', uuid11), obs2.partOf = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %medicationstatement.id) then MedicationStatement(subAdmin, medicationstatement, patient, encounter, bundle) "Terapia farmacologica in atto";
                        }"admin";
                    }"entry";
                    section.code where code = '48765-2' then{
                        section -> bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST', e4.resource = create('List') as list1,  list1.id = uuid() as uuid4,  e4.fullUrl = append('urn:uuid:', uuid4), request.url = append('List/', uuid4), obs2.focus = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %list1.id) then{
                            section -> list1.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
                            section -> list1.status = 'current' "listatus";
                            section -> list1.mode = 'working' "lstmod";
                            section -> list1.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";  
                            section -> list1.entry as entryList1 then{
                                section.entry as entry then{
                                    entry.act as act1 -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('AllergyIntolerance') as allergy,  allergy.id = uuid() as uuid5,  e5.fullUrl = append('urn:uuid:', uuid5), request.url = append('AllergyIntolerance/', uuid5), entryList1.item = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %allergy.id) then allergyFunction(act1, allergy, patient,encounter) "allergy";
                                }"entryAll";
                            }"entryList";
                        }"section";
                    }"conditionAllergie";
                }"section";
            } "subSection";
            section.entry as entry then{
                entry.observation -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST', e3.resource = create('Condition') as condition,  condition.id = uuid() as uuid3,  e3.fullUrl = append('urn:uuid:', uuid3), request.url = append('Condition/', uuid3), obs2.focus = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %condition.id) then ConditionFunction(observation ,condition, patient, encounter, bundle) "condition";        
                entry.organizer as organizer then {
                    section -> bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'POST', e11.resource = create('List') as list11,  list11.id = uuid() as uuid11,  e11.fullUrl = append('urn:uuid:', uuid11), request.url = append('List/', uuid11), obs2.focus = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %list11.id) then{
                        section -> list11.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
                        section -> list11.status = 'current' "liststat";
                        section -> list11.mode = 'working' "listmd";
                        section -> list11.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";  
                        organizer -> list11.entry as entryList2 then{
                            organizer ->bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('FamilyMemberHistory') as familyMember, familyMember.id = uuid() as uuid12,  e12.fullUrl = append('urn:uuid:', uuid12), request.url = append('FamilyMemberHistory/', uuid12), entryList2.item = create('Reference') as reference, reference.reference = ('urn:uuid:' + %familyMember.id) then FamilyMemberFunction(organizer, familyMember, patient) "family";
                        }"org";
                    }"List";
                
                }"organizer";
            }"entry";
        }"StoriaClinica1";
        section where code.code = '30954-2' -> bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST', e4.resource = create('Observation') as obs4,  obs4.id = uuid() as uuid4,  e4.fullUrl = append('urn:uuid:', uuid4), request.url = append('Observation/', uuid4), dReport.result = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs4.id) then Observation(observation, patient, encounter, obs4, bundle) "Precedenti Esami Eseguiti";
        section where code.code = '29548-5' ->  bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('Observation') as obs5,  obs5.id = uuid() as uuid5,  e5.fullUrl = append('urn:uuid:', uuid5), request.url = append('Observation/', uuid5), dReport.result = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs5.id) then Observation(observation, patient, encounter, obs5, bundle) "Diagnosi";
    }"entryObs";

    src.act as act then{
        section where code.code ='62387-6' -> dReport.encounter = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) then {
            //DA MODIFICARE
            act.code -> encounter.type "type";
            act.effectiveTime as effectiveTime -> encounter.period as period then{
                effectiveTime -> period.start "start";
            }"period";
            act ->  bundle.entry as e10, e10.request = create('BackboneElement') as request, request.method = 'POST', e10.resource = create('Procedure') as procedureRes,  procedureRes.id = uuid() as uuid10,  e10.fullUrl = append('urn:uuid:', uuid10), request.url = append('Procedure/', uuid10), encounter.reasonReference = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %procedureRes.id) then{
                act -> procedureRes.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
                act -> procedureRes.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";
                act.statusCode -> procedureRes.status "status1";
                act where statusCode.exists().not() ->procedureRes.status = 'unknown' "status2";
                //cambiato
                act.entryRelationship as entryRel then{
                    entryRel.procedure as proc-> bundle.entry as e9, e9.request = create('BackboneElement') as request, request.method = 'POST', e9.resource = create('Procedure') as procedure2,  procedure2.id = uuid() as uuid9,  e9.fullUrl = append('urn:uuid:', uuid9), request.url = append('Procedure/', uuid9), procedureRes.partOf = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %procedure2.id) then Procedure(proc, patient, encounter, procedure2, bundle) "procedure Prestazioni";
                    entryRel.substanceAdministration as subAdmin -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('MedicationAdministration') as medAdmin,  medAdmin.id = uuid() as uuid8,  e8.fullUrl = append('urn:uuid:', uuid8), request.url = append('MedicationAdministration/', uuid8), procedureRes.partOf = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %medAdmin.id) then MedicationAdministration(subAdmin, patient, encounter, medAdmin, bundle) "farmac Prestazioni";
                    entryRel.observation as entryRobs -> bundle.entry as e7, e7.request = create('BackboneElement') as request, request.method = 'POST', e7.resource = create('Observation') as obs7,  obs7.id = uuid() as uuid7,  e7.fullUrl = append('urn:uuid:', uuid7), request.url = append('Observation/', uuid7), procedureRes.partOf = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs7.id) then ObservationPrest(entryRobs, patient, encounter, obs7, bundle) "osservazioni Prestazioni";
                    entryRel.act as act2 -> bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST', e6.resource = create('Procedure') as procedure3,  procedure3.id = uuid() as uuid6,  e6.fullUrl = append('urn:uuid:', uuid6), request.url = append('Procedure/', uuid6), procedureRes.partOf = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %procedure3.id) then Procedure(act2, patient, encounter, procedure3, bundle) "procedure generiche Prestazioni";
                }"Relationship";
            } "procedura Madre";
        }"Prestazioni";
        section where code.code ='80615-8' -> bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('Observation') as obs12,  obs12.id = uuid() as uuid12,  e12.fullUrl = append('urn:uuid:', uuid12), request.url = append('Observation/', uuid12), dReport.result = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs12.id) then Observation(act, patient, encounter, obs12, bundle) "Follow up";
    
    }"entryAct";

    //src.substanceAdministration
    src.substanceAdministration as substanceadmin then{
        section where code.code ='93341-6' -> bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST', e6.resource = create('MedicationRequest') as medre1,  medre1.id = uuid() as uuid6,  e6.fullUrl = append('urn:uuid:', uuid6), request.url = append('MedicationRequest/', uuid6), dReport.basedOn = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %medre1.id) then MedicationRequest(substanceadmin, patient, encounter,medre1,bundle)"Terapia farmacologica consigliata";
    }"substanceadmin";

    section where section.entry.exists().not() then {
        section where (code.code = '55110-1').not() then{
            section.text as text -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'POST', e13.resource = create('Observation') as obs13,  obs13.id = uuid() as uuid13,  e13.fullUrl = append('urn:uuid:', uuid13), request.url = append('Observation/', uuid13), dReport.result = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs13.id) then {
                section -> obs13.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
                section -> obs13.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";  
                section -> obs13.status = 'preliminary' "obsst";
                section.code -> obs13.code "obscde";
                section -> obs13.status = 'final' "statusS";
                text -> obs13.note as note then{
                    text as t-> note.text = create('string') as textNote then EDstring(t,textNote) "note";
                } "narrative";    
            }"txtsec";
          } "NonConclusion";
        section where(code.code = '55110-1') then {
            section.text as t -> dReport.conclusion = create('string')  as textConclusion then EDstring(t,textConclusion) "conc";
        }"conclusion";
    }"whereCond";
}

group Observation(source cda : observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {  
    cda->ob.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
    cda->ob.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference"; 
    cda.code -> ob.code;
    cda -> ob.status = 'final' "Stats";
    //value datatype
    cda.value:ST as st -> ob.value =create('string'),  ob.value= (st.dataString) "value";
    cda.value:BL as boolean ->ob.value=(boolean.value)"boolean";
    cda.value:CE as val then{
        val->ob.value =create('CodeableConcept') as ce then {
        val.originalText as originalText then{
            originalText.reference as reference-> ce.text = (reference.value) "reference";
        }"originalText";
        val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        } "code";
        val.translation as translation -> ce.coding as coding then {
          translation.code as code -> coding.code = cast(code, 'string');
          translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          translation.displayName as display -> coding.display = cast(display, 'string');
          translation.qualifier as qualifier then{
            qualifier.value as value -> ce.coding as coding then {
              value.code as code -> coding.code = cast(code, 'string');
              value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
              value.displayName as display -> coding.display = cast(display, 'string');
              } "value";
            };
          } "translation";
        }"coding";
      }"val";
      cda.value:CD as val then{
        val->ob.value =create('CodeableConcept') as ce then {
        val.originalText as originalText then{
            originalText.reference as reference-> ce.text = (reference.value) "reference";
        }"originalText";
        val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        } "code";
        val.translation as translation -> ce.coding as coding then {
          translation.code as code -> coding.code = cast(code, 'string');
          translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          translation.displayName as display -> coding.display = cast(display, 'string');
          translation.qualifier as qualifier then{
            qualifier.value as value -> ce.coding as coding then {
              value.code as code -> coding.code = cast(code, 'string');
              value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
              value.displayName as display -> coding.display = cast(display, 'string');
              } "value";
            };
          } "translation";
        }"coding";
      }"val";
    cda.value:PQ as val then{
        val->ob.value = create('Quantity') as quantity then {
            val.value as value->quantity.value = value;
            val.unit as unit-> quantity.unit = unit "unit";
        }"quantity";
    }"valueQuantity";
    //
    cda.effectiveTime as effectiveTime where (value.exists()) -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
    cda.effectiveTime as effectiveTime where (low.exists()) -> ob.effective = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
    cda.text as text -> ob.note as note then{
        text.reference as reference -> note.text = (reference.value) "text";
    } "note";
    cda.statusCode as s then {
        s.code as cos-> ob.status = translate(cos, '#OBSstatus', 'code') "codeS";
    }"status";
}  


group ConditionFunction (source src: cdaElement, target tgt: Condition, target patient : patient, target encounter : encounter, target bundle : Bundle) {
    src.code -> tgt.category;
    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference"; 
    src.statusCode as stscode -> tgt.verificationStatus as verifstatus then { 
        stscode as codeS -> verifstatus.coding = create('Coding') as coding then {
            codeS.code -> coding.code = 'confirmed' "code";
            codeS -> coding.system ='http://terminology.hl7.org/CodeSystem/condition-ver-status' "system";
            codeS -> coding.display= cast('Confirmed', 'string') "display";
    }"coding";    
    }"verifstatus";
    src.effectiveTime as effectiveTime -> tgt.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
    src.value -> tgt.code;
    src.entryRelationship as entryRelationship then{
        entryRelationship.observation as obsentry then{
            obsentry.code where code ='89261-2' then{
                obsentry -> tgt.evidence as evidence, bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as obsy,  obsy.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1), evidence.detail = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obsy.id) then Observation(obsentry, patient, encounter, obsy, bundle) "observation";
            }"observation";

            obsentry.code where code = '33999-4' then{
                obsentry.value as value -> tgt.clinicalStatus as clinicalstatus then {
                    value as val -> clinicalstatus.coding = create('Coding') as coding then {
                        val where(code = 'LA9041-0') -> coding.code =  'resolved' "code";
                        val where(code = 'LA18632-2') -> coding.code =  'inactive' "code";
                        val where(code = 'LA16666-2') -> coding.code =  'active' "code";
                        val -> coding.system = 'http://terminology.hl7.org/CodeSystem/condition-clinical' "system";
                        val.displayName as display-> coding.display= cast(display, 'string') "display";
                    }"coding";           
                    obsentry.text as text then{
                        text.reference as reference -> clinicalstatus.text = (reference.value) "text";
                    }"text";
                }"clinicalstatus";
            }"clinicalStatus2";
            
        }"EntryRelObsevation";
    } "entryR";
}

group Procedure(source src : procedure, target patient : Patient, target encounter: Encounter, target tgt: Procedure, target bundle: Bundle){
    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
    //discutere quale encounter
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";
    src.statusCode -> tgt.status "status1";
    src where statusCode.exists().not() ->tgt.status = 'unknown' "status2";
    src.id -> tgt.identifier "id";
    src.code -> tgt.code;
    src.effectiveTime as effectiveTime where (value.exists()) -> tgt.performed = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
    src.effectiveTime as effectiveTime where (low.exists()) -> tgt.performed = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";

    src.methodCode as methodCode -> tgt.extension as ext1 then ITMethodExt(methodCode, ext1);
    
    src.participant as participant then{
        participant.participantRole as participantRole -> tgt.performer as performer then{
            participantRole.playingDevice as device -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Device') as deviceRes,  deviceRes.id = uuid() as uuid2,  e2.fullUrl = append('urn:uuid:', uuid2), request.url = append('Device/', uuid2), performer.actor = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %deviceRes.id) then{
                device.manufacturerModelName as manufacturerModelName then{
                    manufacturerModelName.displayName as displayName -> deviceRes.manufacturer =cast(displayName,'string') "manuf";
                }"manufacturer";
                device.code -> deviceRes.type "code";
            }"device";
        }"participantRole";
    }"participant";

    src.entryRelationship as entryR then{
        entryR.observation as observation -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST', e3.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid3,  e3.fullUrl = append('urn:uuid:', uuid3), request.url = append('Observation/', uuid3), tgt.partOf = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs1.id) then Observation(observation, patient, encounter, obs1, bundle) "Parametri";
        entryR.act as act then{
            act.text as text -> tgt.note as note then{
                text.reference as reference -> note.text = (reference.value) "text";
            }"note";
        }"act"; 
    }"entryRel Procedure";
}

group ITMethodExt(source src, target ext) {
    src -> ext.url = 'http://hl7.org/fhir/StructureDefinition/procedure-method' "url";
    src -> ext.value = create('CodeableConcept') as value then CECodeableConcept(src, value) "value";
}

group MedicationAdministration(source src : substanceAdministration, target patient : Patient, target encounter: Encounter, target tgt: MedicationAdministration, target bundle: Bundle){
    
    src -> tgt.subject = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
    src -> tgt.context = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";
    
    src.statusCode -> tgt.status "status1";
    src where statusCode.exists().not() ->tgt.status = 'unknown' "status2";
    src.id -> tgt.identifier "id";
    src.effectiveTime as effectiveTime where (value.exists()) -> tgt.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
    src.effectiveTime as effectiveTime where (low.exists()) -> tgt.effective = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
    
    src -> tgt.dosage as dosage then{
        src.routeCode -> dosage.route "route";
        src.repeatNumber as repeatNumber -> dosage.rate = create('SimpleQuantity') as value then PQQuantity(repeatNumber,value) "repQ";
        src.approachSiteCode -> dosage.site "site";
        src.targetSiteCode -> dosage.site "site";
    }"dosage";

    src.consumable as consumable -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Medication/', uuid1) , tgt.medication = create('Reference') as medref,  medref.reference = ('urn:uuid:' + %medication.id) then Medication(src,medication,patient,bundle) "medication";
    
    src.participant as participant then{
        participant.participantRole as participantRole -> tgt.performer as performer then{
            participantRole.device as device -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Device') as deviceRes,  deviceRes.id = uuid() as uuid2,  e2.fullUrl = append('urn:uuid:', uuid2), request.url = append('Device/', uuid2), performer.actor = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %deviceRes.id) then{
                device.ManufacturerModelName as ManufacturerModelName then{
                    ManufacturerModelName.code -> deviceRes.manufacturer "manuf";
                }"manufacturer";
        }"device";
        }"participantRole";
    }"participant";

    src.entryRelationship as entryR then{
        entryR.observation as observation -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST', e3.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid3,  e3.fullUrl = append('urn:uuid:', uuid3), request.url = append('Observation/', uuid3), tgt.partOf = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs1.id) then Observation(observation, patient, encounter, obs1, bundle) "Parametri";
        entryR.act as act then {
            act.text as text -> tgt.note as note then{
                text.reference as reference -> note.text = (reference.value) "text";
            }"note";
        }"act"; 
    }"entryRel Medication";

    src where (src.doseQuantity.exists() or src.rateQuantity.exists()) ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationRequest') as medicationRq,  medicationRq.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('MedicationRequest/', uuid1) ,tgt.request  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %medicationRq.id) then MedicationRequest(src, patient, encounter,medicationRq,bundle) "medRequ";

    src.text as text -> tgt.note as note then{
        text -> note.text "text";
    }"note";
}

group ObservationPrest(source src : observation, target patient : Patient, target encounter : Encounter, target tgt : Observation, target bundle : Bundle) {  
    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
    //discutere quale encounter
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";
    
    src.statusCode as s then {
        s.code as cos-> tgt.status = translate(cos, '#OBSstatus', 'code') "codeS";
    }"status";
    
    src.id -> tgt.identifier "id";
    src.code -> tgt.code "code";
    src.effectiveTime as effectiveTime where (value.exists()) -> tgt.perfomed = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
    src.effectiveTime as effectiveTime where (low.exists()) -> tgt.perfomed = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";

    src.methodCode -> tgt.method;

    src.participant as participant then{
        participant.participantRole as participantRole then{
            participantRole.device as device -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Device') as deviceRes,  deviceRes.id = uuid() as uuid2,  e2.fullUrl = append('urn:uuid:', uuid2), request.url = append('Device/', uuid2), tgt.device = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %deviceRes.id) then{
                device.ManufacturerModelName as ManufacturerModelName then{
                    ManufacturerModelName.code -> deviceRes.manufacturer "manuf";
                }"manufacturer";
            }"device";
        }"participantRole";
    }"participant";

    src.entryRelationship as entryR then{
        entryR.observation as observation -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST', e3.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid3,  e3.fullUrl = append('urn:uuid:', uuid3), request.url = append('Observation/', uuid3), tgt.hasMember = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs1.id) then Observation(observation, patient, encounter, obs1, bundle) "Parametri";
        entryR.act as act then{
            act.text as text -> tgt.note as note then{
                text.reference as reference -> note.text = (reference.value) "text";
            }"note";
        }"act"; 
    }"entryRel Osservazioni";
}   

group MedicationRequest(source src : substanceAdministration, target patient : Patient, target encounter: Encounter, target tgt: MedicationRequest, target bundle: Bundle){
    //default  + mandatory
    src -> tgt.subject = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
    src -> tgt.encounter = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";
    src -> tgt.intent = 'order' "intent";
    src where statusCode.exists().not() -> tgt.status = 'unknown' "st";
    src.statusCode as sc then {
        sc.code as cos-> tgt.status = translate(cos, '#MedicationStatusMap', 'code') "codeS";
    }"status";
    //
    src.text as txt -> tgt.note as note then{
        txt.reference as reference -> note.text = (reference.value) "text";
    }"note";

    src.effectiveTime: IVL_TS as eff -> tgt.dosageInstruction = create('Dosage') as dosage then{
        eff -> dosage.timing = create('Timing') as timing then {
          eff -> timing.repeat as rep then {
            eff -> rep.bounds = create('Period') as period then{
              eff.low as lo1 -> period.start = (lo1 .value);
              eff.high as hi1 -> period.end = (hi1.value);  
            }"period";
          }"rep";
        }"timing";
      }"period";

      src.effectiveTime: EIVL_TS as effe -> tgt.dosageInstruction = create('Dosage') as dosage then{
        effe -> dosage.timing = create('Timing') as timing then {
          effe -> timing.repeat as rep then {
            effe.eventCode as ev -> rep.when = (ev.code);
          }"rep";
        }"timing";
      }"period";

      src.effectiveTime: IVL_TS as eff -> tgt.dosageInstruction = create('Dosage') as dosage, dosage.timing = create('Timing') as timing, timing.event = (eff.value) "tim";

      src.effectiveTime: PIVL_TS as eff -> tgt.dosageInstruction = create('Dosage') as dosage then{
        eff -> dosage.timing = create('Timing') as timing then periodTiming(eff,timing) "cod";
      }"eff";
    
    src where (src.doseQuantity.exists() or src.rateQuantity.exists()) then{
        src ->  tgt.dosageInstruction = create('Dosage') as dosageInstruction then{
            src.doseQuantity as doseQuant then{
                doseQuant.originalText as ot then{
                    ot.reference -> dosageInstruction.text;
                }"ot";  
                doseQuant -> dosageInstruction.doseAndRate as dosageRate then{
                doseQuant -> dosageRate.dose = create('Range') as d then{
                doseQuant -> d.low = create('SimpleQuantity') as l then{
                    doseQuant.low as lo -> l.value = (lo.value); 
                    doseQuant.low as lo -> l.unit = (lo.unit); 
                }"low";
                doseQuant -> d.high = create('SimpleQuantity') as h then{
                    doseQuant.high as hi -> h.value = (hi.value);
                    doseQuant.high as hi -> h.unit = (hi.unit); 
                }"low";
                }"d";
            }"dosageRate";
        } "doseQuantity";
            src.rateQuantity as rateQuantity then{
                rateQuantity.originalText as ot then{
                    ot.reference -> dosageInstruction.text;
                }"ot";
                rateQuantity -> dosageInstruction.doseAndRate as dosageRate then{
                    rateQuantity -> dosageRate.rate = create('Range') as d then{
                        rateQuantity -> d.low = create('SimpleQuantity') as l then{
                            rateQuantity.low as lo -> l.value = (lo.value); 
                            rateQuantity.low as lo -> l.unit = (lo.unit); 
                        }"low";
                        rateQuantity -> d.high = create('SimpleQuantity') as h then{
                            rateQuantity.high as hi -> h.value = (hi.value);
                            rateQuantity.high as hi -> h.unit = (hi.unit); 
                        }"high";
                    }"r";
                }"dosageRate";

            }"rate";
        
        src.routeCode -> dosageInstruction.route "route";
        //src.repeatNumber as repeatNumber -> dosageInstruction.rate = create('SimpleQuantity') as value then PQQuantity(repeatNumber,value) "repQ";
        src.approachSiteCode -> dosageInstruction.site "site";
        src.targetSiteCode -> dosageInstruction.site "site";

        }"dosageIn";
    }"condition";

    src.consumable as consumable -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Medication/', uuid1) , tgt.medication = create('Reference') as medref,  medref.reference = ('urn:uuid:' + %medication.id) then Medication(src,medication,patient,bundle) "medication";       
    src.entryRelationship as entryRelationship then{
        entryRelationship.supply as supply -> tgt.dispenseRequest as dispenseRequest then{
            supply.quantity as quantityCDA -> dispenseRequest.quantity as quantityFHIR then{
                quantityCDA -> quantityFHIR.value = (quantityCDA.value) "value";
            }"quantity";
        }"supply";
    }"entryR";

    src.participant as participant then{
        participant then Practitioner(participant, tgt, bundle) "function"; 
        participant.effectiveTime -> tgt.authoredOn "autor"; 
    }"Partecipant";
}
    
group periodTiming(source effectiveTime: PIVL_TS, target timing: Timing){
    effectiveTime -> timing.repeat as r then{
      effectiveTime.period as p -> r.period = (p.value); 
      effectiveTime.period as p -> r.periodUnit = (p.unit);   
    }"repeat";
  }

group Medication(source src:cda , target tgt: Medication, target patient: Patient, target bundle : Bundle){

    src.consumable as consumable then{
        consumable.manufacturedProduct as manufacturedProduct then{
            manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                manufacturedMaterial.code -> tgt.code "CE";
                src.administrationUnitCode -> tgt.form "form";
            }"material";
        }"product";
    }"consumable";

    src.entryRelationship as entryR then{
        entryR.observation as observation then{
            observation.code where displayName='Grammatura' -> tgt.ingredient as ingredient then{
                src.consumable as consumable then{
                    consumable.manufacturedProduct as manufacturedProduct then{
                        manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                            manufacturedMaterial.code as code -> ingredient.item = create('CodeableConcept') as value then CECodeableConcept(code,value) "CE";
                        }"material";
                    }"product";
                }"consumable";
                observation.value as value -> ingredient.strength as strength then{
                    value -> strength.numerator as numerator then{
                        value -> numerator.value = (value.value) "valueN";
                    } "numerator";
                    value -> strength.denominator as denominator then{
                        value -> denominator.value = 1 "valueD";
                    } "denominator";
                }"strenght";
            }"ingredient";
            observation.code where displayName='Quantità nella Confezione' then{
                observation.value as value -> tgt.amount as amount then{
                    value -> amount.numerator  as numerator then{
                        value -> numerator.value = (value.value) "valueN";
                    } "numerator";
                    value -> amount.denominator as denominator then{
                        value -> denominator.value = 1 "valueD";
                    } "denominator";
                }"amount";
            }"quantità";
        }"obs";
    }"entry R";
}

group MedicationStatement(source src: subAdmin, target tgt: Medicationstatement, target patient: Patient, target encounter : Encounter, target bundle: Bundle){
    
    src -> tgt.subject = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
    src -> tgt.context = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";
    src.statusCode -> tgt.status "status"; 

    src.consumable as consumable then{
        consumable.manufacturedProduct as manufacturedProduct then{
            manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                manufacturedMaterial.code as code -> tgt.medication  =create('CodeableConcept') as ce then CECodeableConcept(code,ce) "CE";
            }"material";
        }"product";
    }"consumable";
}

group FamilyMemberFunction(source src : organizer, target tgt : familyMember, target patient : patient){
    src -> tgt.patient = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "patReference";    
    src.statusCode -> tgt.status;
    src.effectiveTime as effectiveTime -> tgt.date = create('date') as value then TSDate(effectiveTime,value) "date";
    src.subject as subject then{
        subject.relatedSubject as relatedSubject then{
            relatedSubject.code -> tgt.relationship "relationship code";
            relatedSubject.subject as subject -> tgt.sex as sex then {
                subject.administrativeGenderCode as administrativeGenderCode -> sex.coding as coding then {
                    administrativeGenderCode.code as sexCode-> coding.code = translate(sexCode, '#cm-v3-administrative-gender', 'code') "gender";
                    administrativeGenderCode -> coding.system = 'http://hl7.org/fhir/administrative-gender' "system";
                }"coding";
            }"subject";
        }"relatedSub";
    }"relationship";
    src.component as component -> tgt.condition as condition then{
        component.observation as observation then{
            observation.code -> condition.code "code";
            observation.text as text -> tgt.note as note then{
                text.reference as reference -> note.text = (reference.value) "value";
            }"reference";
            observation.statusCode -> tgt.status;
            observation.effectiveTime as effectiveTime -> condition.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
            observation.value -> condition.outcome "codeable";
            observation.entryRelationship as entryR then{
                entryR.observation as obs then{
                    obs where (code.code ='35267-4') then{
                        obs.value as value -> condition.onset = create('Age') as Age then {
                            value.value as valueAge -> Age.value = valueAge "age";
                            value.unit as unit -> Age.code = unit "unit";
                            value.unit as unit -> Age.unit = unit "unit";
                            value -> Age.system = 'http://unitsofmeasure.org' "system";
                    } "value";
                }"insorgenza";
                    obs where (code.code ='39016-1') then{
                        obs.value as value -> tgt.deceased = create('Age') as Age then {
                            value.value as valueAge -> Age.value = valueAge "age";
                            value.unit as unit -> Age.code = unit "unit";
                            value.unit as unit -> Age.unit = unit "unit";
                            value -> Age.system = 'http://unitsofmeasure.org' "system";
                    } "value";
                }"death";
            }"obser";
            }"EntryRel";
        }"observation";
    }"component";
}

group allergyFunction(source src: cdaElement, target tgt: AllergyIntolerance, target patient : patient, target encounter : encounter) {
    src -> tgt.patient=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference"; 
    src.entryRelationship as entryRelationship1 then{
        entryRelationship1.observation as observation1 then{
            observation1.effectiveTime as effectiveTime -> tgt.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
            observation1.value as code then{
                code.code as code1-> tgt.type = translate(code1,'#AllergyTypeMap','code') "type"; 
                code.code as code1 -> tgt.category = translate(code1,'#AllergyCategoryMap','code') "category";   
            }"code";
            observation1.participant as participant-> tgt.reaction as reaction then{
                observation1.entryRelationship as entryRelationship2 where (typeCode = 'MFST') then{
                    entryRelationship2.observation as observation2 then{
                        observation2.value -> reaction.manifestation "manifestation";
                        observation2.effectiveTime as effectiveTime then{
                            effectiveTime.low as low -> reaction.onset = create('dateTime') as value then TSDateTime(low, value) "valuePeriodLow";
                        }"low";
                    }"observ2";
                }"entryR2";
                participant.participantRole as participantRole then{
                    participantRole.playingEntity as playingEntity then{
                        playingEntity.code -> reaction.substance "reaction";
                    }"playingEntity";
                }"participantRole";
            }"participant";
            observation1.entryRelationship as entryRelationship2 where (typeCode = 'MFST') then{
                entryRelationship2.observation as observation2 where observation1.participant.exists().not() -> tgt.reaction as reaction then{
                    observation2.value -> reaction.manifestation "manifestation";
                    observation2.effectiveTime as effectiveTime then{
                        effectiveTime.low as low -> reaction.onset = create('dateTime') as value then TSDateTime(low, value) "valuePeriodLow";
                    }"low";
                }"observ2";
            }"entryR2";
            observation1.entryRelationship as entryRelationship3 where (typeCode = 'SUBJ') then{
                entryRelationship3.observation as observation3 then{
                    //criticality
                    observation3.value as value then{
                        value.code as c-> tgt.criticality = translate(c,'#CricalityMap','code') "value";
                    }"criticality"; 
                }"observ3";
                entryRelationship3.act as act -> tgt.note as note then{
                    act.text as text then{
                        text.reference as reference -> note.text = (reference.value);
                    }"note";
                }"act";
            }"entryR3";
            observation1.entryRelationship as entryRelationship4 where (typeCode = 'REFR') then{
                entryRelationship4.observation as observation4  then{
                    //observation4.value -> tgt.clinicalStatus;
                    observation4.value as value -> tgt.clinicalStatus as clinicalStatus then{
                        value as valu -> clinicalStatus.coding = create('Coding') as coding then{
                            valu where(code = 'LA9041-0') -> coding.code =  'resolved' "code";
                            valu where(code = 'LA18632-2') -> coding.code =  'inactive' "code";
                            valu where(code = 'LA16666-2') -> coding.code =  'active' "code";
                            valu -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical' "system";
                            valu.displayName as display-> coding.display= cast(display, 'string') "display";
                        }"coding";
                    }"clinicalStatus";
                }"observ4";
            }"entryR4";
        }"observation";
    }"entryrelationship";
}

group Practitioner(source src : participant, target tgt: MedicationRequest, target bundle: Bundle){
    src -> bundle.entry as e22, e22.request = create('BackboneElement') as request, request.method = 'PUT', e22.resource = create('Practitioner') as practitioner1 then{       
        src.participantRole as practr then{
            practr.id as id ->practitioner1.identifier as identifier then{
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext "ext";
                id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                id.root as r then {
                    id.extension as ext -> practitioner1.id = (r + '-' + ext) as uuid22,  e22.fullUrl = append('urn:uuid:', uuid22), tgt.requester = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner1.id) "id";
                }"r";
            }"identifier";
            practr.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
            practr.addr -> practitioner1.address;      
            practr.telecom -> practitioner1.telecom;
            practr.playingEntity as plentity then{
                plentity.name ->  practitioner1.name "name"; 
                plentity.birthTime -> practitioner1.birthDate;
            }"partname";
        }"resurceCreation";
    }"practitionerCreate";

}


",
          "subType": "00"
        }
      }
    }
  ],
  "definitions": [],
  "valuesets": [],
  "template_id_root": "2.16.840.1.113883.2.9.10.1.9.1",
  "last_update_date": {
    "$date": {
      "$numberLong": "1671446387563"
    }
  },
  "version": "1.0",
  "root_map": "RefertodiSpecialisticaAmbulatorialeBody",
  "deleted": false,
  "last_sync": {
    "$date": {
      "$numberLong": "1673389070410"
    }
  }
},{
  "_id": {
    "$oid": "63a03f7559b6e6165a992973"
  },
  "maps": [
    {
      "name_map": "Vaccinazioni",
      "filename_map": "Vaccinazioni_v1.0.map",
      "content_map": {
        "$binary": {
          "base64": "map "http://hl7.org/fhir/StructureMap/Vaccinazioni" = "Vaccinazioni"

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL_PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target
uses "http://hl7.org/fhir/StructureDefinition/Immunization" alias Immunization as target

imports "http://hl7.org/fhir/StructureMap/CdaToFhirDataTypes"
imports "http://hl7.org/fhir/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
  cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('urn:uuid:', uuid1), request.url = append('Composition/', uuid1),  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('urn:uuid:', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('urn:uuid:', uuid3),request.url = append('Encounter/', uuid3),
  bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST',  e5.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid5,  e5.fullUrl = append('urn:uuid:', uuid5),request.url = append('DocumentReference/', uuid5) then {
  cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
   
  cda.recordTarget as recordTarget then{
    recordTarget.patientRole as patient then{
      patient.id as id-> patient.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext1 -> identifier.value = ext1 "value";
        id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
      }"idfr";
      patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7')
      or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17') or (root='2.16.840.1.113883.2.9.4.3.15')  then {
        id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
        }"ext";
      }"record";
    }"recPat";

   }"patient";
 } 

group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference : DocumentReference) {
  cda -> encounter.status = 'finished' "finished";
  cda -> encounter.class = create("Coding") as coding then{
    cda -> coding.code = 'AMB' "amb";
  }"coding";
  cda -> bundle.id = uuid() "id";
  cda.id -> bundle.identifier "identifier";
  cda -> bundle.type = 'transaction' "type";
  cda.effectiveTime -> bundle.timestamp;
  cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";  
  cda.component as component then {
    component.structuredBody as body then {
      body.component as component  then {       
	     component.section as srcSection then {
        srcSection -> composition.section as tgtSection  then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle,encounter) "Terapia Farmacologica alla dimissione";
       };
      };
    } "body";
  };
}

//----------------

group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";    
  } "cdaText";
  src.entry as entry1 then {
    
    entry1.substanceAdministration as substance  then {
      substance.templateId where(root = '2.16.840.1.113883.2.9.10.1.11.4.1') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Immunization') as immunization,  immunization.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Immunization/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %immunization.id) then{
        substance -> immunization.patient  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "patientRef"; 
        substance.templateId as tid -> immunization.identifier as idf then{
          tid.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        }"id";
        substance.statusCode  as statusc where (code='completed') -> immunization.status ='completed';  
        substance.statusCode  as statusc where (code='aborted') -> immunization.status ='final';  
        substance.statusCode  as statusc where (code='suspended') -> immunization.status ='enterer-in-error';  
        substance.statusCode  as statusc where (code='cancelled') -> immunization.status ='not-done';          
        substance.effectiveTime as time -> immunization.occurrence = (time.value) "efftime";
        substance.routeCode -> immunization.route;
        substance.approachSiteCode ->immunization.site;
        substance -> immunization.doseQuantity = create('SimpleQuantity') as quantity then{
          substance.doseQuantity as q then{
            q -> quantity.value = (q.value) "val";
            q -> quantity.unit = (q.unit) "uni"; 
          }"qua"; 
        }"q";

        substance.consumable as cons then{
          cons.manufacturedProduct as manufact then{
            manufact.manufacturedMaterial as manufactmat then{
              manufactmat.code -> immunization.vaccineCode;
              manufactmat.lotNumberText as t -> immunization.lotNumber = (t.dataString);
            }"manufactmat";
            manufact.manufacturerOrganization as manufactOrg -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Organization') as organization  then{
              manufactOrg.id as id -> organization.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  manufactOrg -> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid,  e1.fullUrl = append('urn:uuid:', uuid), immunization.manufacturer  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %organization.id) "idasi";       
                }"r" ;
            }"identifier";                                         
              manufactOrg.name as n -> organization.name = (n.other);
                  manufactOrg-> organization.meta as meta then {
                  manufactOrg-> meta.tag = create('Coding') as coding then {
                  manufactOrg -> coding.system ='http://algoritmodiscoring'"system";
                  manufactOrg -> coding.code ='ClinicalDocument/body/vaccinazione/manufacturerOrganization'"code";
                }"coding";
              }"meta";
            }"manufactOrg";          
          }"manufact";
        }"cons";
       
        substance.participant as part ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Location') as location,  location.id = uuid() as uuid1 then{
              part-> location.meta as meta then {
              part-> meta.tag = create('Coding') as coding then {
              part -> coding.system ='http://algoritmodiscoring'"system";
              part -> coding.code ='ClinicalDocument/body/vaccinazione/participant'"code";
          }"coding";
        }"meta";
          part.participantRole as partRole then{
            partRole.id as id -> location.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                partRole -> request.url = append('Location?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> location.id = (r +'-'+ ext) as uuid,  e1.fullUrl = append('urn:uuid:', uuid), immunization.location  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %location.id) "idasi";       
              }"r" ;
          }"identifier";                          
          }"role";
        }"part";

        substance.entryRelationship as entrirel1 then{
          entrirel1.observation as obs then{          
            obs.code where( code = '30973-2') then {
              obs -> immunization.protocolApplied = create('BackboneElement') as prot then{
                obs.value as v then {
                  v.value as int -> prot.doseNumber = int; // = cast(int,'positiveInt') "val"; next version of lib
                }"value"; 
              }"val";            
            }"code control";
          }"obs";
        }"entrirel1";

        substance.entryRelationship as entrirel2 then{
          entrirel2.observation as obs then{          
            obs.code where( code = '59778-1' or code = '30981-5' or code = '30980-7' or code = '59777-3')then{
              obs.value as value then{
                value.high as h -> immunization.expirationDate = (h.value);
              }"value";
            }"code control";
          }"obs";
        }"entrirel2";


        substance.entryRelationship as entrirel3 then{
          entrirel3.observation as obs then{          
            obs.code where( code = '95715-9') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) , immunization.reasonReference  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id) then {
              obs then Observation(entrirel3,patient,tgt,bundle,enc,observation) "observation";
            }"code control";
          }"obs";
        }"entrirel2";

        substance.entryRelationship as entrirel4 then{
          entrirel4.observation as obs then{          
            obs.code where( code = '59785-6') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) , immunization.reasonReference  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id) then {
              obs then Observation1(entrirel4,patient,tgt,bundle,enc,observation) "observation";
            }"code control";
          }"obs";
        }"entrirel2";

        substance.entryRelationship as entrirel4 then{
          entrirel4.observation as obs then{          
            obs.code where( code = '31044-1') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) , immunization.reasonReference  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id) then {
              obs then Observation1(entrirel4,patient,tgt,bundle,enc,observation) "observation";
            }"code control";
          }"obs";
        }"entrirel2";

        substance.entryRelationship as entrirel4 then{
          entrirel4.observation as obs then{          
            obs.code where( code = '75323-6')  then {
              obs -> immunization.protocolApplied = create('BackboneElement') as prot then{
                obs.code -> prot.targetDisease;
                obs.value as v then{
                  v.originalText as ortx then{
                    ortx.reference as ref -> prot.targetDisease as tardis, tardis.text = (ref.value);
                  }"ortext";
                }"val";
              }"protocolApp";
            }"code control";
          }"obs";
        }"entrirel2";
      }"Controllo+Immunization";

      substance.templateId where(root = '2.16.840.1.113883.2.9.10.1.11.4.2') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Immunization') as immunization,  immunization.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Immunization/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %immunization.id) then{
        substance -> immunization.patient  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "patientRef"; 
        substance.templateId as tid -> immunization.identifier as idf then{
          tid.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        }"id";
        substance.statusCode  as statusc where (code='completed') -> immunization.status ='completed';  
        substance.statusCode  as statusc where (code='aborted') -> immunization.status ='final';  
        substance.statusCode  as statusc where (code='suspended') -> immunization.status ='enterer-in-error';  
        substance.statusCode  as statusc where (code='cancelled') -> immunization.status ='not-done';          
        substance.effectiveTime as time -> immunization.occurrence = (time.value);

        substance.consumable as cons then{
          cons.manufacturedProduct as manufact then{
            manufact.manufacturedMaterial as manufactmat then{
              manufactmat.code -> immunization.vaccineCode;
              manufactmat.lotNumberText as t -> immunization.lotNumber = (t.dataString);
            }"manufactmat";

            manufact.manufacturerOrganization as manufactOrg -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Organization') as organization  then{
              manufactOrg.id as id -> organization.identifier as identifier then {
                 id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                 id.extension as ext->identifier.value = ext then {
                 manufactOrg -> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid,  e1.fullUrl = append('urn:uuid:', uuid), immunization.manufacturer  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %organization.id) "idasi";       
              }"r" ;
            }"identifier";                           
              manufactOrg.name as n -> organization.name = (n.other);
              manufactOrg-> organization.meta as meta then {
              manufactOrg-> meta.tag = create('Coding') as coding then {
              manufactOrg -> coding.system ='http://algoritmodiscoring'"system";
              manufactOrg -> coding.code ='ClinicalDocument/body/vaccinazione/manufacturerOrganization'"code";
              }"coding";
            }"meta";

            }"manufactOrg";          
          }"manufact";
        }"cons";

        substance.entryRelationship as entrirel1 then{
          entrirel1.observation as obs then{          
            obs.code where( code = '30973-2') then {
              obs -> immunization.protocolApplied = create('BackboneElement') as prot then{
              obs.value: INT as v -> prot.doseNumber = (v.value) "val"; 
              }"val";            
            }"code control";
          }"obs";
        }"entrirel1";

        substance.entryRelationship as entrirel1 then{
          entrirel1.observation as obs then{          
            obs.code where( code = '85714-4') then {
              obs.code -> immunization.statusReason;
            }"code control";
            obs.code where( code = '59784-9') then {
              obs.value as val then{
                val.originalText as original -> immunization.statusReason = create('CodeableConcept') as cod then{
                  original.reference as reff -> cod.text = (reff.value);
                }"cod";
              }"val";
            }"code control";
          }"obs";
        }"entrirel1";

        substance.entryRelationship as entrirel1 then{
          entrirel1.observation as obs then{          
            obs.code where( code = '75323-6') then {
              obs -> immunization.protocolApplied = create('BackboneElement') as prot then{
              obs.code as c -> prot.targetDisease = create('CodeableConcept') as td then{
                c -> td.coding = create('Coding') as codi then {
                  c -> codi.code = (c.code) "cd";
                  c -> codi.display = (c.displayName) "disp";
                  c.codeSystem as r -> codi.system  = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                }"codi";
                obs.statusCode as st -> td.text = (st.code); 
              }"td"; 
              obs.value -> prot.targetDisease;  
              }"val";            
            }"code control";
          }"obs";
        }"entrirel1";


        substance -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Location') as location then{         
          substance.participant as part then{
            part-> location.meta as meta then {
              part-> meta.tag = create('Coding') as coding then {
              part -> coding.system ='http://algoritmodiscoring'"system";
              part -> coding.code ='ClinicalDocument/body/vaccinazione/participant'"code";
          }"coding";
        }"meta";

        part.participantRole as partRole then{
          partRole.id as id -> location.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              partRole -> request.url = append('Location?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> location.id = (r +'-'+ ext) as uuid,  e1.fullUrl = append('urn:uuid:', uuid), immunization.location  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %location.id) "idasi";       
            }"r" ;
            }"identifier";                          
           }"role";
          }"part";
        }"location";
      }"sub2";
    }"substance";
  }"entry";
}

group Observation(source entrirel2: entryRelationship, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target obs: Observation){  
  entrirel2.observation as observation then{
    observation.templateId as tid -> obs.identifier as idf then{
      tid.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
    }"idf";
    observation.code -> obs.code;
    observation.statusCode as statusc where (code='completed') -> obs.status ='final';
    observation.statusCode as statusc where (code='active') -> obs.status ='registered';
    observation.statusCode as statusc where (code='aborted') -> obs.status ='cancelled';
    observation.statusCode as statusc where (code='suspended') -> obs.status ='partial';

    observation -> obs.referenceRange as refRange then{
      observation.value -> refRange.appliesTo;
      observation -> refRange.text = 'string' "text";
    }"refRange";
  }"obs";
}

group Observation1(source entrirel4: entryRelationship, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target obs: Observation){  
  entrirel4.observation as observation then{
    observation.templateId as tid -> obs.identifier as idf then{
      tid.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
    }"idf";
    observation.code -> obs.code;
    observation.statusCode as statusc where (code='completed') -> obs.status ='final';
    observation.statusCode as statusc where (code='active') -> obs.status ='registered';
    observation.statusCode as statusc where (code='aborted') -> obs.status ='cancelled';
    observation.statusCode as statusc where (code='suspended') -> obs.status ='partial';
    observation.effectiveTime as eff -> obs.effective = create('Period') as period then IVLTSPeriod(eff,period) "period";
    observation -> obs.value = create('CodeableConcept') as concept then{      
      observation.value -> concept.coding = create('Coding') as coding then{
        observation.value as v -> coding.code = (v.code);
        observation.value as v then{
          v.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        }"vv";
        observation.value as v -> coding.display = (v.displayName);
      }"coding";
      observation.value as valu then {
        valu.originalText as txt then{
          txt.reference as ref ->  concept.text = (ref.value);
        }"txt";  
      }"value";
    }"refRange";
  }"obs";
}",
          "subType": "00"
        }
      }
    }
  ],
  "definitions": [],
  "valuesets": [],
  "template_id_root": "2.16.840.1.113883.2.9.10.1.11.1.2",
  "last_update_date": {
    "$date": {
      "$numberLong": "1671446389914"
    }
  },
  "version": "1.0",
  "root_map": "Vaccinazioni",
  "deleted": false,
  "last_sync": {
    "$date": {
      "$numberLong": "1673389070410"
    }
  }
},{
  "_id": {
    "$oid": "63a0de416f5a1a70603c4902"
  },
  "maps": [
    {
      "name_map": "Vaccinazioni",
      "filename_map": "TODO.map",
      "content_map": {
        "$binary": {
          "base64": "map "http://hl7.org/fhir/StructureMap/Vaccinazioni" = "Vaccinazioni"

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL_PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target
uses "http://hl7.org/fhir/StructureDefinition/Immunization" alias Immunization as target

imports "http://hl7.org/fhir/StructureMap/CdaToFhirDataTypes"
imports "http://hl7.org/fhir/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
  cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('urn:uuid:', uuid1), request.url = append('Composition/', uuid1),  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('urn:uuid:', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('urn:uuid:', uuid3),request.url = append('Encounter/', uuid3),
  bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST',  e5.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid5,  e5.fullUrl = append('urn:uuid:', uuid5),request.url = append('DocumentReference/', uuid5) then {
  cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
   
  cda.recordTarget as recordTarget then{
    recordTarget.patientRole as patient then{
      patient.id as id-> patient.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext1 -> identifier.value = ext1 "value";
        id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
      }"idfr";
      patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7')
      or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17') or (root='2.16.840.1.113883.2.9.4.3.15')  then {
        id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
        }"ext";
      }"record";
    }"recPat";

   }"patient";
 } 

group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference : DocumentReference) {
  cda -> encounter.status = 'finished' "finished";
  cda -> encounter.class = create("Coding") as coding then{
    cda -> coding.code = 'AMB' "amb";
  }"coding";
  cda -> bundle.id = uuid() "id";
  cda.id -> bundle.identifier "identifier";
  cda -> bundle.type = 'transaction' "type";
  cda.effectiveTime -> bundle.timestamp;
  cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";  
  cda.component as component then {
    component.structuredBody as body then {
      body.component as component  then {       
	     component.section as srcSection then {
        srcSection -> composition.section as tgtSection  then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle,encounter) "Terapia Farmacologica alla dimissione";
       };
      };
    } "body";
  };
}

//----------------

group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";    
  } "cdaText";
  src.entry as entry1 then {
    
    entry1.substanceAdministration as substance  then {
      substance.templateId where(root = '2.16.840.1.113883.2.9.10.1.11.4.1') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Immunization') as immunization,  immunization.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Immunization/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %immunization.id) then{
        substance -> immunization.patient  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "patientRef"; 
        substance.templateId as tid -> immunization.identifier as idf then{
          tid.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        }"id";
        substance.statusCode  as statusc where (code='completed') -> immunization.status ='completed';  
        substance.statusCode  as statusc where (code='aborted') -> immunization.status ='final';  
        substance.statusCode  as statusc where (code='suspended') -> immunization.status ='enterer-in-error';  
        substance.statusCode  as statusc where (code='cancelled') -> immunization.status ='not-done';          
        substance.effectiveTime as time -> immunization.occurrence = (time.value) "efftime";
        substance.routeCode -> immunization.route;
        substance.approachSiteCode ->immunization.site;
        substance -> immunization.doseQuantity = create('SimpleQuantity') as quantity then{
          substance.doseQuantity as q then{
            q -> quantity.value = (q.value) "val";
            q -> quantity.unit = (q.unit) "uni"; 
          }"qua"; 
        }"q";

        substance.consumable as cons then{
          cons.manufacturedProduct as manufact then{
            manufact.manufacturedMaterial as manufactmat then{
              manufactmat.code -> immunization.vaccineCode;
              manufactmat.lotNumberText as t -> immunization.lotNumber = (t.dataString);
            }"manufactmat";
            manufact.manufacturerOrganization as manufactOrg -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Organization') as organization  then{
              manufactOrg.id as id -> organization.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  manufactOrg -> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid,  e1.fullUrl = append('urn:uuid:', uuid), immunization.manufacturer  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %organization.id) "idasi";       
                }"r" ;
            }"identifier";                                         
              manufactOrg.name as n -> organization.name = (n.other);
                  manufactOrg-> organization.meta as meta then {
                  manufactOrg-> meta.tag = create('Coding') as coding then {
                  manufactOrg -> coding.system ='http://algoritmodiscoring'"system";
                  manufactOrg -> coding.code ='ClinicalDocument/body/vaccinazione/manufacturerOrganization'"code";
                }"coding";
              }"meta";
            }"manufactOrg";          
          }"manufact";
        }"cons";
       
        substance.participant as part ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Location') as location,  location.id = uuid() as uuid1 then{
              part-> location.meta as meta then {
              part-> meta.tag = create('Coding') as coding then {
              part -> coding.system ='http://algoritmodiscoring'"system";
              part -> coding.code ='ClinicalDocument/body/vaccinazione/participant'"code";
          }"coding";
        }"meta";
          part.participantRole as partRole then{
            partRole.id as id -> location.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                partRole -> request.url = append('Location?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> location.id = (r +'-'+ ext) as uuid,  e1.fullUrl = append('urn:uuid:', uuid), immunization.location  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %location.id) "idasi";       
              }"r" ;
          }"identifier";                          
          }"role";
        }"part";

        substance.entryRelationship as entrirel1 then{
          entrirel1.observation as obs then{          
            obs.code where( code = '30973-2') then {
              obs -> immunization.protocolApplied = create('BackboneElement') as prot then{
                obs.value as v then {
                  v.value as int -> prot.doseNumber = int; // = cast(int,'positiveInt') "val"; next version of lib
                }"value"; 
              }"val";            
            }"code control";
          }"obs";
        }"entrirel1";

        substance.entryRelationship as entrirel2 then{
          entrirel2.observation as obs then{          
            obs.code where( code = '59778-1' or code = '30981-5' or code = '30980-7' or code = '59777-3')then{
              obs.value as value then{
                value.high as h -> immunization.expirationDate = (h.value);
              }"value";
            }"code control";
          }"obs";
        }"entrirel2";


        substance.entryRelationship as entrirel3 then{
          entrirel3.observation as obs then{          
            obs.code where( code = '95715-9') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) , immunization.reasonReference  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id) then {
              obs then Observation(entrirel3,patient,tgt,bundle,enc,observation) "observation";
            }"code control";
          }"obs";
        }"entrirel2";

        substance.entryRelationship as entrirel4 then{
          entrirel4.observation as obs then{          
            obs.code where( code = '59785-6') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) , immunization.reasonReference  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id) then {
              obs then Observation1(entrirel4,patient,tgt,bundle,enc,observation) "observation";
            }"code control";
          }"obs";
        }"entrirel2";

        substance.entryRelationship as entrirel4 then{
          entrirel4.observation as obs then{          
            obs.code where( code = '31044-1') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) , immunization.reasonReference  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id) then {
              obs then Observation1(entrirel4,patient,tgt,bundle,enc,observation) "observation";
            }"code control";
          }"obs";
        }"entrirel2";

        substance.entryRelationship as entrirel4 then{
          entrirel4.observation as obs then{          
            obs.code where( code = '75323-6')  then {
              obs -> immunization.protocolApplied = create('BackboneElement') as prot then{
                obs.code -> prot.targetDisease;
                obs.value as v then{
                  v.originalText as ortx then{
                    ortx.reference as ref -> prot.targetDisease as tardis, tardis.text = (ref.value);
                  }"ortext";
                }"val";
              }"protocolApp";
            }"code control";
          }"obs";
        }"entrirel2";
      }"Controllo+Immunization";

      substance.templateId where(root = '2.16.840.1.113883.2.9.10.1.11.4.2') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Immunization') as immunization,  immunization.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Immunization/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %immunization.id) then{
        substance -> immunization.patient  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "patientRef"; 
        substance.templateId as tid -> immunization.identifier as idf then{
          tid.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        }"id";
        substance.statusCode  as statusc where (code='completed') -> immunization.status ='completed';  
        substance.statusCode  as statusc where (code='aborted') -> immunization.status ='final';  
        substance.statusCode  as statusc where (code='suspended') -> immunization.status ='enterer-in-error';  
        substance.statusCode  as statusc where (code='cancelled') -> immunization.status ='not-done';          
        substance.effectiveTime as time -> immunization.occurrence = (time.value);

        substance.consumable as cons then{
          cons.manufacturedProduct as manufact then{
            manufact.manufacturedMaterial as manufactmat then{
              manufactmat.code -> immunization.vaccineCode;
              manufactmat.lotNumberText as t -> immunization.lotNumber = (t.dataString);
            }"manufactmat";

            manufact.manufacturerOrganization as manufactOrg -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Organization') as organization  then{
              manufactOrg.id as id -> organization.identifier as identifier then {
                 id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                 id.extension as ext->identifier.value = ext then {
                 manufactOrg -> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid,  e1.fullUrl = append('urn:uuid:', uuid), immunization.manufacturer  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %organization.id) "idasi";       
              }"r" ;
            }"identifier";                           
              manufactOrg.name as n -> organization.name = (n.other);
              manufactOrg-> organization.meta as meta then {
              manufactOrg-> meta.tag = create('Coding') as coding then {
              manufactOrg -> coding.system ='http://algoritmodiscoring'"system";
              manufactOrg -> coding.code ='ClinicalDocument/body/vaccinazione/manufacturerOrganization'"code";
              }"coding";
            }"meta";

            }"manufactOrg";          
          }"manufact";
        }"cons";

        substance.entryRelationship as entrirel1 then{
          entrirel1.observation as obs then{          
            obs.code where( code = '30973-2') then {
              obs -> immunization.protocolApplied = create('BackboneElement') as prot then{
              obs.value: INT as v -> prot.doseNumber = (v.value) "val"; 
              }"val";            
            }"code control";
          }"obs";
        }"entrirel1";

        substance.entryRelationship as entrirel1 then{
          entrirel1.observation as obs then{          
            obs.code where( code = '85714-4') then {
              obs.code -> immunization.statusReason;
            }"code control";
            obs.code where( code = '59784-9') then {
              obs.value as val then{
                val.originalText as original -> immunization.statusReason = create('CodeableConcept') as cod then{
                  original.reference as reff -> cod.text = (reff.value);
                }"cod";
              }"val";
            }"code control";
          }"obs";
        }"entrirel1";

        substance.entryRelationship as entrirel1 then{
          entrirel1.observation as obs then{          
            obs.code where( code = '75323-6') then {
              obs -> immunization.protocolApplied = create('BackboneElement') as prot then{
              obs.code as c -> prot.targetDisease = create('CodeableConcept') as td then{
                c -> td.coding = create('Coding') as codi then {
                  c -> codi.code = (c.code) "cd";
                  c -> codi.display = (c.displayName) "disp";
                  c.codeSystem as r -> codi.system  = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                }"codi";
                obs.statusCode as st -> td.text = (st.code); 
              }"td"; 
              obs.value -> prot.targetDisease;  
              }"val";            
            }"code control";
          }"obs";
        }"entrirel1";


        substance -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Location') as location then{         
          substance.participant as part then{
            part-> location.meta as meta then {
              part-> meta.tag = create('Coding') as coding then {
              part -> coding.system ='http://algoritmodiscoring'"system";
              part -> coding.code ='ClinicalDocument/body/vaccinazione/participant'"code";
          }"coding";
        }"meta";

        part.participantRole as partRole then{
          partRole.id as id -> location.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              partRole -> request.url = append('Location?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> location.id = (r +'-'+ ext) as uuid,  e1.fullUrl = append('urn:uuid:', uuid), immunization.location  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %location.id) "idasi";       
            }"r" ;
            }"identifier";                          
           }"role";
          }"part";
        }"location";
      }"sub2";
    }"substance";
  }"entry";
}

group Observation(source entrirel2: entryRelationship, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target obs: Observation){  
  entrirel2.observation as observation then{
    observation.templateId as tid -> obs.identifier as idf then{
      tid.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
    }"idf";
    observation.code -> obs.code;
    observation.statusCode as statusc where (code='completed') -> obs.status ='final';
    observation.statusCode as statusc where (code='active') -> obs.status ='registered';
    observation.statusCode as statusc where (code='aborted') -> obs.status ='cancelled';
    observation.statusCode as statusc where (code='suspended') -> obs.status ='partial';

    observation -> obs.referenceRange as refRange then{
      observation.value -> refRange.appliesTo;
      observation -> refRange.text = 'string' "text";
    }"refRange";
  }"obs";
}

group Observation1(source entrirel4: entryRelationship, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target obs: Observation){  
  entrirel4.observation as observation then{
    observation.templateId as tid -> obs.identifier as idf then{
      tid.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
    }"idf";
    observation.code -> obs.code;
    observation.statusCode as statusc where (code='completed') -> obs.status ='final';
    observation.statusCode as statusc where (code='active') -> obs.status ='registered';
    observation.statusCode as statusc where (code='aborted') -> obs.status ='cancelled';
    observation.statusCode as statusc where (code='suspended') -> obs.status ='partial';
    observation.effectiveTime as eff -> obs.effective = create('Period') as period then IVLTSPeriod(eff,period) "period";
    observation -> obs.value = create('CodeableConcept') as concept then{      
      observation.value -> concept.coding = create('Coding') as coding then{
        observation.value as v -> coding.code = (v.code);
        observation.value as v then{
          v.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        }"vv";
        observation.value as v -> coding.display = (v.displayName);
      }"coding";
      observation.value as valu then {
        valu.originalText as txt then{
          txt.reference as ref ->  concept.text = (ref.value);
        }"txt";  
      }"value";
    }"refRange";
  }"obs";
}",
          "subType": "00"
        }
      }
    }
  ],
  "definitions": [],
  "valuesets": [],
  "template_id_root": "2.16.840.1.113883.2.9.10.1.11.1.1",
  "last_update_date": {
    "$date": {
      "$numberLong": "1671487041319"
    }
  },
  "version": "1.0",
  "root_map": "Vaccinazioni",
  "deleted": false,
  "last_sync": {
    "$date": {
      "$numberLong": "1673389070410"
    }
  }
},{
  "_id": {
    "$oid": "63b6b7336f995b18073604f7"
  },
  "maps": [
    {
      "name_map": "ProfiloSanitarioSinteticoBody",
      "filename_map": "ProfiloSanitarioSinteticoBody.map",
      "content_map": {
        "$binary": {
          "base64": "map "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/ProfiloSanitarioSinteticoBody" = "ProfiloSanitarioSinteticoBody"

conceptmap "AllergyTypeMap" {

  prefix s = "http://terminology.hl7.org/ValueSet/v3-type"

  prefix t = "http://hl7.org/fhir/Allergy-type.html"

  s:OINT == t:intolerance
  s:ALG == t:allergy
  s:DALG == t:allergy
  s:EALG == t:allergy
  s:FALG == t:allergy
  s:NAINT == t:intolerance
  s:FNAINT == t:intolerance
  s:DNAINT == t:intolerance
  s:ENAINT == t:intolerance
  s:FINT == t:intolerance
  s:DINT == t:intolerance
  s:EINT == t:intolerance
}

conceptmap "AllergyCategoryMap" {

  prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
  prefix t = "http://hl7.org/fhir/Allergy-type.html"

  s:DALG == t:medication
  s:EALG == t:enviroment
  s:FALG == t:food
  s:FNAINT == t:food
  s:DNAINT == t:medication
  s:ENAINT == t:enviroment
  s:FINT == t:food
  s:DINT == t:medication
  s:EINT == t:enviroment
}

conceptmap "AllergyCriticality" {

  prefix s = "https://art-decor.org/art-decor/decor-valuesets--hl7it-?id=2.16.840.1.113883.2.9.77.22.11.6"
  prefix t = "https://www.hl7.org/fhir/codesystem-allergy-intolerance-criticality.html"
  
  s:L == t:low
  s:H == t:high
  s:M == t:unable_to_assess
}


uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL_PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target


imports "http://hl7.org/fhir/StructureMap/CdaToFhirDataTypes"
imports "http://hl7.org/fhir/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
  cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('urn:uuid:', uuid1), request.url = append('Composition/', uuid1),  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('urn:uuid:', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('urn:uuid:', uuid3),request.url = append('Encounter/', uuid3),
  bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST', e4.resource = create('Specimen') as specimen,  specimen.id = uuid() as uuid4,  e4.fullUrl = append('urn:uuid:', uuid4), request.url = append('Specimen/', uuid4),
  bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST',  e5.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid5,  e5.fullUrl = append('urn:uuid:', uuid5),request.url = append('DocumentReference/', uuid5) then {
  cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
   cda.recordTarget as recordTarget then{
    recordTarget.patientRole as patient then{
      patient.id as id -> patient.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext->identifier.value = ext then {
        recordTarget-> requestPAT.url = append('Patient?identifier=',ext) "UUID";
        }"ext";
        id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
      }"record";
    }"recPat";
   }"patient";
 } "ClinicalDocumentToBody";
}

group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference : DocumentReference) {
  cda -> bundle.id = uuid() "id";
  cda.id -> bundle.identifier "identifier";
  cda -> bundle.type = 'transaction' "type";
  cda.effectiveTime -> bundle.timestamp;
  cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";  
  cda.component as component then {
    component.structuredBody as body then {
      body.component as component  then {
       //discretizzi il primo livello di component 
	     component.section as srcSection then {
        srcSection.code where(code = '46241-6') -> composition.section as tgtSection  then ClinicalDocumentSectionMotivoRicovero(cda, srcSection, patient, tgtSection, bundle,encounter) "motivo ricovero";
        srcSection.code where(code = '47039-3') -> composition.section as tgtSection  then ClinicalDocumentSectionInquadramentoClinico(cda, srcSection, patient, tgtSection, bundle,encounter) "inquadramento clinico";
        srcSection.code where(code = '8648-8') -> composition.section as tgtSection  then ClinicalDocumentSectionDecorsoOspedaliero(cda, srcSection, patient, tgtSection, bundle,encounter) "Decorso Ospedaliero";
        srcSection.code where(code = '55109-3') -> composition.section as tgtSection  then ClinicalDocumentSectionComplicanze(cda, srcSection, patient, tgtSection, bundle,encounter) "Complicazioni";
        srcSection.code where(code = '11493-4') -> composition.section as tgtSection  then ClinicalDocumentSectionRiscontri(cda, srcSection, patient, tgtSection, bundle,encounter) "Hospital discharge studies summary";
        srcSection.code where(code = '34104-0') -> composition.section as tgtSection  then ClinicalDocumentSectionConsulenza(cda, srcSection, patient, tgtSection, bundle,encounter) "Hospital discharge studies summary";
        srcSection.code where(code = '30954-2') -> composition.section as tgtSection  then ClinicalDocumentSectionEsamiEseguitiRicovero(cda, srcSection, patient, tgtSection, bundle,encounter) "Esami_Eseguiti_Durante_il_Ricovero";
        srcSection.code where(code = '47519-4') -> composition.section as tgtSection  then ClinicalDocumentSectionProcedureEseguiteRicovero(cda, srcSection, patient, tgtSection, bundle,encounter) "History of Procedures Document";
        srcSection.code where(code = '48765-2') -> composition.section as tgtSection  then ClinicalDocumentSectionAllergie(cda, srcSection, patient, tgtSection, bundle,encounter) "Esami_Eseguiti_Durante_il_Ricovero";
        srcSection.code where(code = '10160-0') -> composition.section as tgtSection  then ClinicalDocumentSectionTerapiaFarmacologicaDuranteRicovero(cda, srcSection, patient, tgtSection, bundle,encounter) "Terapia Farmacologica alla dimissione";       
        srcSection.code where(code = '11535-2') -> composition.section as tgtSection  then ClinicalDocumentSectionDiagnosiDimissione(cda, srcSection, patient, tgtSection, bundle,encounter) "Diagnosi di Dimissione";
        srcSection.code where(code = '18776-5') -> composition.section as tgtSection  then ClinicalDocumentSectionIstruzioniFollowUp(cda, srcSection, patient, tgtSection, bundle,encounter) "Diagnosi di Dimissione";
        srcSection.code where(code = '10183-2') -> composition.section as tgtSection  then ClinicalDocumentSectionTerapiaDimissione(cda, srcSection, patient, tgtSection, bundle,encounter) "Terapia Farmacologica alla dimissione";
       };
      };
    } "body";
  };
}


// -----------------------------------------------------------------------------------------


group ClinicalDocumentSectionMotivoRicovero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";    
  } "cdaText";
  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id) then {
    entry1.observation as obs then Observation(obs, patient ,enc ,observation, bundle) "act";
  }"entry";
}

group ClinicalDocumentSectionInquadramentoClinico(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id), tgt.text as fhirText then {
    cdaText -> observation.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
    cdaText -> observation.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference"; 
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
    src.code -> observation.code;
    src where observation.statusCode.exists().not() then {
      src->observation.status ='final'"status";
      }"statuscode";
    cdaText->observation.note as note then{
      cdaText as t ->note.text =t "reference";
    }"reference";
  } "cdaText";
  src.component as component then {
    component.section as section2 then{
      // ANAMNESI
      section2 -> tgt.section as sec2 then{
      section2.code where(code = '11329-0') ->  sec2.code;
        section2.title as t -> sec2.title = (t.dataString);
        //section2.code -> sec2.code;
        section2.text as cdaText -> sec2.text as fhirText then {
          cdaText -> fhirText.status = 'generated' "narrativeStatus";
          cdaText as t -> fhirText.div = t "narrativeText";          
        } "cdaText";
        section2.entry as entry1 then {
          entry1.observation as obs then {
            //EntryRelationship per il Problem
            obs.code where (code = '75326-9')  then {
            obs->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Condition') as condition, condition.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('condtiion/', uuid1), sec2.entry = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %condition.id) then{
            obs.code -> condition.category;
            obs->condition.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
            obs->condition.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference"; 
            obs.statusCode as status where (code='completed') -> condition.verificationStatus as status2 then {
              status ->  status2.coding as status3 then{
                status -> status3.code ='confirmed' "finald";
                status -> status3.system='http://terminology.hl7.org/CodeSystem/condition-ver-status'"system";
              }"st3";
            }"status";
            obs.effectiveTime as effective1 then {
              effective1 where effective1.low.exists() or effective1.high.exists() then{
                effective1  -> condition.onset=create('Period') as periodonset then IVLTSPeriod(effective1,periodonset)"onsetperiod";
                }"ef";
              }"effectivetime1";
           
            obs.value:CD as val then{
              val->condition.code =create('CodeableConcept') as ce then {
                val.originalText -> ce.text;
                val -> ce.coding as coding then {
                val.code as code -> coding.code = cast(code, 'string');
                val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                val.displayName as display -> coding.display = cast(display, 'string');
                }"coding";  
              }"Ce"; 
            }"Value";
            obs.entryRelationship as entriRel  then{
              entriRel -> condition.evidence = create('BackboneElement') as evidence then{
              entriRel.observation as observation2 then {
                observation2.code as code then {
                code.code where (code.code = '89261-2') then { 
                  obs -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as observation, observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) then {
                 // entriRel -> condition.evidence = create('BackboneElement') as evidence then{
                   entriRel -> evidence.detail  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id) "ref";
                // }"evidence";   
                observation2.code -> observation.code;
                  observation2 where observation.statusCode.exists().not() then {
                    observation2->observation.status ='final'"status";
                    }"statuscode";            
                  observation2.text as text -> observation.note = create('Annotation') as note then{
                    text.reference as ref -> note.text = (ref.value) "val";
                  }"Annontation"; 
                  obs->observation.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
                  obs->observation.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";                            
                  observation2.statusCode as statusc where (code='completed') -> ob.status ='final';
                  observation2.statusCode as statusc where (code='active') -> ob.status ='registered';
                  observation2.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
                  observation2.statusCode as statusc where (code='suspended') -> ob.status ='partial';
                  observation2.value:CE as val then{
                    val->observation.value =create('CodeableConcept') as ce then {
                      val.originalText -> ce.text;
                      val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      }"coding";  
                    }"Ce"; 
                  }"Value"; 
                 }"obser";
                }"where Decorso Clinico";
                }"code";
                         
              }"Observation2";
            }"evidence";
         }"EntryRelationship1";
         obs.entryRelationship as entriRel  then{
          entriRel.observation as observation2 then {
            observation2.code as code then {
             code.code where (code.code ='33999-4') then{
               observation2 -> condition.clinicalStatus = create('CodeableConcept') as status then {
                observation2.text as text then{
                  text.reference as refstat -> status.text=(refstat.value)"statref";
                  }"textstat";
                 observation2  -> status.coding = create('Coding') as coding then{
                   observation2.value as value then{
                     value.code  where (value.code = 'LA16666-2')-> coding.code = 'active'"active";
                     value.code  where (value.code = 'LA18632-2')-> coding.code = 'inactive'"inactive";
                     value.codeSystem as system -> coding.system ='http://terminology.hl7.org/CodeSystem/condition-clinical'"system";
                     //value->coding.version='ConditionClinicalStatusCodes 4.0.1'"version";
                     value.displayName as display -> coding.display = cast(display, 'string');
                     }"value1";
                 }"coding";
               }"code";                       
             }"where Decorso Clinico"; 
            }"codestatus";  
           }"observationstatus"; 
          }"entryrelationshipstatus";           
          }"where entry patologica prossima";
        } "observationcondition";
       
        }"entry 1";
     
      
      
    }"subsection1";
 
  // ESAME PBIETTIVO
  section2.code where(code = '29545-1') then ClinicalDocumentSottoSectionOBS(section2, sec2, bundle,enc,patient) "esame obiettivo";
      // TETAPIA FARMACOLOGICA
   section2.code where(code = '42346-7') then ClinicalDocumentSottoSectionMS(section2, sec2, bundle,patient,enc) "Terapia Farmacologica all'ingresso";
    }"sec2fhir";
  }"componentSec";
 };
}


group ClinicalDocumentSectionDecorsoOspedaliero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id), tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";          
    src.code -> observation.code;
    src where observation.statusCode.exists().not() then {
      src->observation.status ='final'"status";
      }"statuscode";
      src->observation.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
      src->observation.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";                            
      cdaText->observation.note as note then{
      cdaText as t ->note.text =t "reference";
    }"reference";
  } "cdaText";
  src.component as component then {
    component.section as section2 then{
      src then  ClinicalDocumentSottoSectionOBS(section2, tgt, bundle,enc,patient) "Decorso";
    }"1";
  }"2";
  
}

group ClinicalDocumentSectionComplicanze(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";
  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id) then {
    entry1.observation as obs then Observation(obs, patient ,enc ,observation, bundle) "act";
  }"entry";

  //src then  ClinicalDocumentSottoSectionOBS(src, tgt, bundle,enc) "Decorso";

}

group ClinicalDocumentSectionRiscontri(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id), tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";          
    src.code -> observation.code;
    src where observation.statusCode.exists().not() then {
      src->observation.status ='final'"status";
      }"statuscode";
      src->observation.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
      src->observation.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";
      cdaText->observation.note as note then {
      cdaText as t ->note.text =t "reference";
    }"reference";
  } "cdaText";
  src.component as component then {
    component.section as section2 then{
      src then  ClinicalDocumentSottoSectionOBS(section2, tgt, bundle,enc,patient) "Decorso";
    }"1";
  }"2";
}

group ClinicalDocumentSectionConsulenza(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id) then {
    entry1.observation as obs then ObservationConsulenza(obs, patient ,enc ,observation, bundle) "act";
  }"entry";

}

group ClinicalDocumentSectionEsamiEseguitiRicovero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id) then {
    entry1.observation as obs then ObservationEsamiDuranteRicovero(obs, patient ,enc ,observation, bundle) "act";
  }"entry";

}

group ClinicalDocumentSectionProcedureEseguiteRicovero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";
 
  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Procedure') as procedure,  procedure.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Procedure/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %procedure.id) then {
    src -> procedure.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
    src -> procedure.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";
    entry1.procedure as proceduresrc then{
      proceduresrc.code -> procedure.code;
      proceduresrc.text as txt -> procedure.note as note then {
        txt.reference as ref -> note.text = (ref.value);
      }"text";
      
      proceduresrc where proc.statusCode .exists().not() then {
      proceduresrc->procedure.status ='unknown'"statuscode";
      }"status";
      proceduresrc.statusCode as statusc where (code='completed') -> procedure.status ='completed';
      proceduresrc.statusCode as statusc where (code='active') -> procedure.status ='in-progress';
      proceduresrc.statusCode as statusc where (code='aborted') -> procedure.status ='stopped';
      proceduresrc.statusCode as statusc where (code='suspended') -> procedure.status ='on-hold';
      proceduresrc.statusCode as statusc where (code='cancelled') -> procedure.status ='not-done';
      proceduresrc.statusCode as statusc where (code='held') -> procedure.status ='on-hold';
      proceduresrc.statusCode as statusc where (code='new') -> procedure.status ='preparation';
      proceduresrc.statusCode as statusc where (code='obsolete') -> procedure.status ='entered-in-error';
      proceduresrc.statusCode as statusc where (code='nullified') -> procedure.status ='unknown';

      proceduresrc.effectiveTime as efft -> procedure.performed = create('Period') as period then{
        efft.low as l -> period.start = (l.value) "val";
        efft.high as h -> period.end = (h.value) "val2";
      }"efft";

      proceduresrc.entryRelationship as entriRel ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Procedure/', uuid1) ,procedure.reasonReference  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id) then{
        entriRel->observation.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
        entriRel->observation.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference"; 
        entriRel.observation as obs then{
          obs.code -> observation.code;
          obs where observation.statusCode.exists().not() then {
            obs->observation.status ='final'"status";
            }"statuscode";           
        }"Observation value";
      }"Observation"; 
    }"Procedure";
  }"Entry";
}

group ClinicalDocumentSectionAllergie(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";
  
  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('AllergyIntolerance') as allergy,  allergy.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('AllergyIntolerance/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %allergy.id) then {
    src -> allergy.patient=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
    src -> allergy.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";
    entry1.act as actallint then {
  actallint.effectiveTime as eff -> allergy.onset = create('Period') as per then{
    eff.low as l -> per.start = (l.value) "val";
    eff.high as h -> per.end = (h.value) "val2";
  }"eff";
  actallint.entryRelationship as entryact then {
    entryact.observation as entryobs then {
      entryobs.value as code then{
        code.code as code1-> allergy.type = translate(code1,'#AllergyTypeMap','code') "type";
        code.code as code2 -> allergy.category = translate(code2,'#AllergyCategoryMap','code') "category";  
      }"code";
    
      entryobs.participant as partic then {
        partic.participantRole as pratRole then {
           pratRole.playingEntity as pratent then {
               pratent -> allergy.reaction = create('BackboneElement') as reaction then{
               pratent.code -> reaction.substance "subs";
           entryobs.entryRelationship as entryobs1 where (typeCode='MFST') then {
           entryobs1.observation as entobs then {
             entobs.effectiveTime as eff  then{
                    eff.low as l -> reaction.onset =(l.value);
            }"eff";
            entobs.value->reaction.manifestation "manifest";
                     }"observ";
                   }"entry";
               }"cod";  
          }"react";
        }"pratentit";
       }"PratRole";

       entryobs.entryRelationship as entryobs2 then {
        entryobs2.observation as entobs then {
          entobs.code as code where (code='SEV') then {
          entobs.value as value then{
             value.code where(value.code = 'M') ->allergy.criticality = 'unable-to-assess'"active";
             value.code where(value.code = 'L') ->allergy.criticality = 'low'"active"; 
             value.code where(value.code = 'H') ->allergy.criticality = 'high'"active"; 
              }"entobs";
             } "sev";
            }"severity";
          }"observ";
       

       entryobs.entryRelationship as entryobs3 then {
        entryobs3.observation as entobs then {
          entobs.code as code where (code='33999-4') then {
           // entobs.value->allergy.clinicalStatus "cstatus";
           entobs -> allergy.clinicalStatus = create('CodeableConcept') as status then {
           entobs  -> status.coding = create('Coding') as coding then{
            entobs.value as value then{
                value.code  where (value.code = 'LA16666-2')-> coding.code = 'active'"active";
                value.code  where (value.code = 'LA18632-2')-> coding.code = 'inactive'"active";
                value.codeSystem as system -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical'"system";
               // value->coding.version='ConditionClinicalStatusCodes 4.0.1'"version";
                value.displayName as display -> coding.display = cast(display, 'string');
                 }"value1";
               }"coding";
             }"clinicalStatus";
            }"stat";
          }"obobs3serv";
       }"entry3";

        entryobs.entryRelationship as entryobs4 then {
         entryobs4.act as entact then {
          entact.text as actext then {
              actext.reference as reftxt -> allergy.note = create('BackboneElement') as note  then {
              reftxt as ref->note.text= (ref.value) "notxt";
                }"notetxt";
              }"txtact";
          }"obobs4serv";
       }"entry4";

         }"partic";
        };
       };
      }"allergy";
}

group ClinicalDocumentSectionDiagnosiDimissione(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";
  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id) then {
    entry1.observation as obs then Observation(obs, patient ,enc ,observation, bundle) "act";
  }"entry";
}

group ClinicalDocumentSectionIstruzioniFollowUp(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";
  src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('CarePlan') as carePlan,  carePlan.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('CarePlan/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %carePlan.id) then {
    cdaText-> carePlan.note as note then{
      cdaText as t ->note.text =t "reference";
    }"reference";
    src-> carePlan.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
    src-> carePlan.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";
    src -> carePlan.status='active'"status";
    src -> carePlan.intent='order'"intent";
  }"entry";
}

group ClinicalDocumentSectionTerapiaFarmacologicaDuranteRicovero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";
  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationAdministration') as medicationAdm,  medicationAdm.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('MedicationAdministration/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %medicationAdm.id) then {
    entry1->medicationAdm.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
    entry1->medicationAdm.context=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";
   entry1.substanceAdministration as sa then{
      sa.text as tx -> medicationAdm.note as note then{
        sa.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Practitioner/', uuid1) ,medicationAdm.performer as perf,  perf.actor  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner.id) then{
           performer.time as ti -> note.time = (ti.value);
          performer.assignedEntity as assEnty then{
            assEnty.id -> practitioner.identifier;
            assEnty.assignedPerson as assPers then{
              assPers.name -> practitioner.name;
            }"assPer";
          }"ass";
        }"erformer";
        tx.reference as ref -> note.text = (ref.value);
      }"tx"; 
      sa.statusCode as st -> medicationAdm.status = (st.code);
      sa.effectiveTime as eff -> medicationAdm.effective = create('Period') as period then IVLTSPeriod(eff,period) "period";//then{
      //   eff.low as l -> period.start = (l.value);
      //   eff.high as h -> period.start = (h.value);        
      // }"period";
      
      sa ->  medicationAdm.dosage as dos then {
        sa.routeCode -> dos.route;        
      }"dos";
      sa ->  medicationAdm.dosage as dos then {
        sa.approachSiteCode -> dos.site;        
      }"dos";
      

      sa.doseQuantity as doseQuant ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationRequest') as medicationRq,  medicationRq.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('MedicationRequest/', uuid1) ,medicationAdm.request  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %medicationRq.id) then{
        doseQuant -> medicationRq.dosageInstruction = create('Dosage') as dosageInstruction then{
          doseQuant.originalText as ot then{
            ot.reference -> dosageInstruction.text;
          }"ot";
          doseQuant -> dosageInstruction.doseAndRate as dosageRate then{
            doseQuant -> dosageRate.dose = create('Range') as d then{
              doseQuant -> d.low = create('SimpleQuantity') as l then{
                doseQuant.low as lo -> l.value = (lo.value); 
                doseQuant.low as lo -> l.unit = (lo.unit); 
              }"low";
              doseQuant -> d.high = create('SimpleQuantity') as h then{
                doseQuant.high as hi -> h.value = (hi.value);
                doseQuant.high as hi -> h.unit = (hi.unit); 
              }"low";
            }"d";
          }"dosageRate";
        }"Dosage";
        sa-> medicationRq.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
        sa-> medicationRq.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";
        sa -> medicationRq.status='active'"status";
        sa -> medicationRq.intent='order'"intent";
        sa.rateQuantity as rateQuantity -> medicationRq.dosageInstruction = create('Dosage') as dosageInstruction1 then{
          rateQuantity.originalText as ot then{
            ot.reference -> dosageInstruction1.text;
          }"ot";
          rateQuantity -> dosageInstruction1.doseAndRate as dosageRate then{
            rateQuantity -> dosageRate.rate = create('Range') as d then{
              rateQuantity -> d.low = create('SimpleQuantity') as l then{
                rateQuantity.low as lo -> l.value = (lo.value); 
                rateQuantity.low as lo -> l.unit = (lo.unit); 
              }"low";
              rateQuantity -> d.high = create('SimpleQuantity') as h then{
                rateQuantity.high as hi -> h.value = (hi.value);
                rateQuantity.high as hi -> h.unit = (hi.unit); 
              }"low";
            }"d";
          }"dosageRate";
        }"Dosage";

       
        sa -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Medication/', uuid1) ,medicationAdm.medication  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %medication.id) then{
        sa-> medicationRq.medication=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %medication.id) "reference";
          sa.administrationUnitCode -> medication.form;
          sa.consumable as consumable then {
            consumable.manufacturedProduct as manufac then{
              manufac.manufacturedMaterial as manuprod then{
                  manuprod.code -> medication.code;
              }"manufactproduct"; 
            }"manufac";
          }"consumable";
          
          sa.entryRelationship as entryRelationship then{

            entryRelationship.supply as sup -> medicationRq.dispenseRequest as dispreq then {              
                sup -> dispreq.quantity = create('SimpleQuantity') as quantity then{
                  sup.quantity as q -> quantity.value = (q.value);
                }"quantity";              
            }"sub";

            entryRelationship.observation as obs -> medication then{
              obs.code where(code = '123') then{
                obs.code -> medication.code; 
                obs -> medication.ingredient as ingr then{
                  obs -> ingr.item = create('Reference') as ref then{
                    obs-> ref.display = 'string' "string";
                  }"ref";
                  obs -> ingr.strength = create('Ratio') as st then{
                    obs -> st.numerator = create('Quantity') as num then{
                      obs.value as v -> num.value = (v.value);
                    }"num";
                    obs -> st.denominator = create('Quantity') as num then{
                      obs.value as v -> num.value = '1';
                    }"num";
                  }"st";
                }"ingr";
              }"where1";
  
              obs.code where(code = '1234') then{
                obs.code -> medication.code;               
                  obs -> medication.amount = create('Ratio') as st then{
                    obs -> st.numerator = create('Quantity') as num then{
                      obs.value as v -> num.value = (v.value);
                    }"num";
                    obs -> st.denominator = create('Quantity') as num then{
                      obs.value as v -> num.value = '1';
                    }"num";
                  }"st";              
              }"where2";
            }"obs"; 
          }"med";
        }"Medication";
        
        //giusto
        sa.participant as participant then {
          participant.time as t -> medicationRq.authoredOn = (t.value);

          participant.participantRole as participantR -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Practitioner/', uuid1) ,medicationRq.requester  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner.id) then{
            participantR.id -> practitioner.identifier;
            participantR.playingEntity as playingEntity then{
              playingEntity.name -> practitioner.name;
            }"playingEntity";
          }"PR";
        }"participant";
  
  
        sa.effectiveTime: EIVL as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
          eff -> dosage.timing = create('Timing') as timing then {
            eff -> timing.repeat as rep then {
              eff.event as ev -> rep.where = (ev.code);
            }"rep";
          }"timing";
        }"period";
  
        sa.effectiveTime: TS as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage, dosage.timing = create('Timing') as timing, timing.event = (eff.value) "tim";
  
          
        sa.effectiveTime: PIVL_TS as eff -> medicationAdm.dosage = create('BackboneElement') as dosage then{
          eff -> dosage.rate = create('Ratio') as ratio then{
            eff -> ratio.numerator = create('Quantity') as quan then{
              eff.period as per ->  quan.value = (per.value);
              eff.period as per ->  quan.unit = (per.unit);
            }"quanti";
            eff -> ratio.denominator = create('Quantity') as quan then{
              eff.period ->  quan.value = '1';
              eff.period as per ->  quan.unit = (per.unit);
            }"quanti";
          }"ratio";
        }"eff";     

      }"Medicationrequest";

     
    }"sa";
  }"entry";
}

group ClinicalDocumentSectionTerapiaDimissione(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationRequest') as medicationRq,  medicationRq.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('MedicationRequest/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %medicationRq.id) then {
    src-> medicationRq.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
    src-> medicationRq.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";
    src -> medicationRq.status='active'"status";
    src -> medicationRq.intent='order'"intent";
    entry1.substanceAdministration as substract then{      
      substract.consumable as cons then{
        cons.manufacturedProduct as man1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Medication/', uuid1) ,medicationRq.medication = create('Reference') as medref,  medref.reference = ('urn:uuid:' + %medication.id) then {
          man1.manufacturedMaterial as mm then{
            mm.code -> medication.code;
          }"mm";
          substract.administrationUnitCode -> medication.form;

          substract.entryRelationship as entryRelationship then{
            entryRelationship.observation as obs -> medication then{
              obs.code where(code = '12345') then{
                obs.code -> medication.code; 
                obs -> medication.ingredient as ingr then{
                  obs -> ingr.item = create('Reference') as ref then{
                    obs-> ref.display = 'string' "string";
                  }"ref";
                  obs -> ingr.strength = create('Ratio') as st then{
                    obs -> st.numerator = create('Quantity') as num then{
                      obs.value as v -> num.value = (v.value);
                    }"num";
                    obs -> st.denominator = create('Quantity') as num then{
                      obs.value as v -> num.value = '1';
                    }"num";
                  }"st";
                }"ingr";
              }"where1";
  
              obs.code where(code = '123456') then{
                obs.code -> medication.code;               
                  obs -> medication.amount = create('Ratio') as st then{
                    obs -> st.numerator = create('Quantity') as num then{
                      obs.value as v -> num.value = (v.value);
                    }"num";
                    obs -> st.denominator = create('Quantity') as num then{
                      obs.value as v -> num.value = '1';
                    }"num";
                  }"st";              
              }"where2";
            }"obs"; 
          }"med";
  
          substract.entryRelationship as entryRelationship then{
            entryRelationship.supply as sup -> medicationRq.dispenseRequest as dispreq then {              
                sup -> dispreq.quantity = create('SimpleQuantity') as quantity then{
                  sup.quantity as q -> quantity.value = (q.value);
                }"quantity";              
            }"sub";
          }"entry";
        }"man1";
      }"cons";
      substract.text as tx -> medicationRq.note as note then{
        tx.reference as ref -> note.text = (ref.value);
      }"tx"; 
      substract.statusCode as st -> medicationRq.status = (st.code);

      substract.effectiveTime: IVL_TS as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
        eff -> dosage.timing = create('Timing') as timing then {
          eff -> timing.repeat as rep then {
            eff -> rep.bounds = create('Period') as period then{
              eff.low as lo1 -> period.start = (lo1 .value);
              eff.high as hi1 -> period.end = (hi1.value);  
            }"period";
          }"rep";
        }"timing";
      }"period";

      substract.effectiveTime: EIVL_TS as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
        eff -> dosage.timing = create('Timing') as timing then {
          eff -> timing.repeat as rep then {
            eff.event as ev -> rep.when = (ev.code);
          }"rep";
        }"timing";
      }"period";

      substract.effectiveTime: IVL_TS as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage, dosage.timing = create('Timing') as timing, timing.event = (eff.value) "tim";

      substract.effectiveTime: PIVL_TS as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
        eff -> dosage.timing = create('Timing') as timing then periodTiming(eff,timing) "cod";
      }"eff";     

      substract -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
        substract.routeCode -> dosage.route;        
      }"dosage";
      
      substract -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
        substract.approachSiteCode -> dosage.site;        
      }"dosage";

      substract.doseQuantity as doseQuant -> medicationRq.dosageInstruction = create('Dosage') as dosageInstruction then{
        doseQuant.originalText as ot then{
          ot.reference -> dosageInstruction.text;
        }"ot";
        doseQuant -> dosageInstruction.doseAndRate as dosageRate then{
          doseQuant -> dosageRate.dose = create('Range') as d then{
            doseQuant -> d.low = create('SimpleQuantity') as l then{
              doseQuant.low as lo -> l.value = (lo.value); 
              doseQuant.low as lo -> l.unit = (lo.unit); 
            }"low";
            doseQuant -> d.high = create('SimpleQuantity') as h then{
              doseQuant.high as hi -> h.value = (hi.value); 
              doseQuant.high as hi -> h.unit = (hi.unit);
            }"low";
          }"d";
        }"dosageRate";
      }"Dosage";
      
      substract.rateQuantity as rateQuantity -> medicationRq.dosageInstruction = create('Dosage') as dosageInstruction1 then{
        rateQuantity.originalText as ot then{
          ot.reference -> dosageInstruction1.text;
        }"ot";
        rateQuantity -> dosageInstruction1.doseAndRate as dosageRate then{
          rateQuantity -> dosageRate.rate = create('Range') as d then{
            rateQuantity -> d.low = create('SimpleQuantity') as l then{
              rateQuantity.low as lo -> l.value = (lo.value); 
              rateQuantity.low as lo -> l.unit = (lo.unit); 
            }"low";
            rateQuantity -> d.high = create('SimpleQuantity') as h then{
              rateQuantity.high as hi -> h.value = (hi.value);
              rateQuantity.high as hi -> h.unit = (hi.unit); 
            }"low";
          }"d";
        }"dosageRate";
      }"rateq";
            
      substract.participant as part then{
        part.time as time -> medicationRq.authoredOn = (time.value);
      }"Participant";

      substract.participant as part -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Practitioner/', uuid1) ,medicationRq.performer = create('Reference') as medref,  medref.reference = ('urn:uuid:' + %practitioner.id) then{
        part.participantRole as partRole then{
          partRole.id -> practitioner.identifier;
          partRole.playingEntity as playingEntity then{
            playingEntity.name -> practitioner.name;
          }"playingEntity";
        }"partRole";
      }"participant";  

    }"substract";
  };
}

//---------------------------------------------------------------------------------------------------

group ClinicalDocumentSottoSectionOBS(source src : Section,  target tgt, target bundle : Bundle, target enc : Encounter , target patient : Patient){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Observation/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %observation.id), tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
   
    src.code -> observation.code;
    src->observation.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
    src->observation.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";
    src where observation.statusCode.exists().not() then {
      src->observation.status ='final'"status";
      }"statuscode";
    cdaText->observation.note as note then{
      cdaText as t ->note.text =t "reference";      
    }"reference";
  } "cdaText";
}

group ClinicalDocumentSottoSectionMS(source src : Section,  target tgt, target bundle : Bundle, target patient : Patient,target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('MedicationStatement') as Medicationstatement,  Medicationstatement.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Medicationstatement/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %Medicationstatement.id), tgt.text as fhirText then {
    cdaText->Medicationstatement.note as note then{
      cdaText as t ->note.text =t "reference";
      cdaText as t-> Medicationstatement.medication= create('CodeableConcept') as medication, medication.text=t"text";
    }"reference";
    
    src->Medicationstatement.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
    src->Medicationstatement.context=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";

     src->Medicationstatement.status ='unknown'"status";
    
  } "cdaText";
}


group Observation (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {
    
  obs->ob.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";  
  obs.code -> ob.code;
  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs where obs.statusCode.exists().not() then {
  obs->ob.status ='final'"status";
  }"statuscode";
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";

  obs.value:CD as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        };
      } "translation";
    }"coding";
  }"val";

  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
    val.value as value->quantity.value = value;
    val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";

  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";
  obs.interpretationCode -> ob.interpretation;
    obs.methodCode -> ob.method;

    
    obs.effectiveTime as eff -> ob.effective = create('Period') as per then{
      eff.low as l -> per.start = (l.value) "val";
      eff.high as h -> per.end = (h.value) "val2";
    }"eff";
    
    obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
      refRange.observationRange as obsRange -> ref.low = create('SimpleQuantity') as Low  then {
          obsRange.value: IVL_PQ as v  then {
            v.low as l1 then {
              l1.value as decValue-> Low.value = decValue;
              l1.unit as Unit-> Low.unit = Unit;
            }"decValue";          
          }"IVL_PQ";                      
      }"obsRange";              
    }"refRange";  
};


group ObservationConsulenza (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {
    
  obs->ob.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";  
  obs.code -> ob.code;
  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs where obs.statusCode.exists().not() then {
    obs->ob.status ='final'"status";
    }"statuscode";
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";


  obs.value:CD as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        };
      } "translation";
    }"coding";
  }"val";

  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
    val.value as value->quantity.value = value;
    val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";

  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";

    obs->ob.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
    obs->ob.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";
    obs.interpretationCode -> ob.interpretation;
    obs.methodCode -> ob.method;

    
    obs.effectiveTime as eff -> ob.effective = create('Period') as per then{
      eff.low as l -> per.start = (l.value) "val";
      eff.high as h -> per.end = (h.value) "val2";
    }"eff";
    
    obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
      refRange.observationRange as obsRange -> ref.low = create('SimpleQuantity') as Low  then {
          obsRange.value: IVL_PQ as v  then {
            v.low as l1 then {
              l1.value as decValue-> Low.value = decValue;
              l1.unit as Unit-> Low.unit = Unit;
            }"decValue";          
          }"IVL_PQ";                      
      }"obsRange";              
    }"refRange";  


    obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Practitioner/', uuid1) ,ob.performer  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner.id) then{
      performer.assignedEntity as assEntity then {
        assEntity.id -> practitioner.identifier;
        assEntity.assignedPerson as assi then {
          assi.name -> practitioner.name;
        }"assi";
      }"assEntity";
    }"perf";

    obs.participant as participant -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('ServiceRequest') as serviceRequest,  serviceRequest.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('ServiceRequest/', uuid1) ,ob.basedOn  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %serviceRequest.id) then{
      participant.time as t -> serviceRequest.authoredOn = (t.value);
      obs->serviceRequest.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
      obs->serviceRequest.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";
      obs -> serviceRequest.status='active'"status";
      obs -> serviceRequest.intent='order'"intent";
      participant.participantRole as participantRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Practitioner/', uuid1) ,serviceRequest.performer  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner.id) then{
        participantRole.id -> practitioner.identifier;
        participantRole.playingEntity as pe then{
          pe.name -> practitioner.name;
        }"pe";
      }"participantRole";
    }"participant";


};

group ObservationEsamiDuranteRicovero (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {
    
  obs->ob.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";  
  obs.code -> ob.code;
  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs where obs.statusCode.exists().not() then {
    obs->ob.status ='final'"status";
    }"statuscode";
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";


  obs.value:CD as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        };
      } "translation";
    }"coding";
  }"val";

  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
    val.value as value->quantity.value = value;
    val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";

  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";

    obs->ob.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
    obs->ob.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";
    obs.interpretationCode -> ob.interpretation;
    obs.methodCode -> ob.method;

    
    obs.effectiveTime as eff -> ob.effective = create('Period') as per then{
      eff.low as l -> per.start = (l.value) "val";
      eff.high as h -> per.end = (h.value) "val2";
    }"eff";
    
    obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
      refRange.observationRange as obsRange -> ref.low = create('SimpleQuantity') as Low  then {
          obsRange.value: IVL_PQ as v  then {
            v.low as l1 then {
              l1.value as decValue-> Low.value = decValue;
              l1.unit as Unit-> Low.unit = Unit;
            }"decValue";          
          }"IVL_PQ";                      
      }"obsRange";              
    }"refRange";  


    obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Practitioner/', uuid1) ,ob.performer  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner.id) then{
      performer.assignedEntity as assEntity then {
        assEntity.id -> practitioner.identifier;
        assEntity.assignedPerson as assi then {
          assi.name -> practitioner.name;
        }"assi";
      }"assEntity";
    }"perf";

    obs.participant as participant -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('ServiceRequest') as serviceRequest,  serviceRequest.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('ServiceRequest/', uuid1) ,ob.basedOn  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %serviceRequest.id) then{
      participant.time as t -> serviceRequest.authoredOn = (t.value);
      obs->serviceRequest.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
      obs->serviceRequest.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";
      obs -> serviceRequest.status='active'"status";
      obs -> serviceRequest.intent='order'"intent";
      participant.participantRole as participantRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('Practitioner/', uuid1) ,serviceRequest.performer  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %practitioner.id) then{
        participantRole.id -> practitioner.identifier;
        participantRole.playingEntity as pe then{
          pe.name -> practitioner.name;
        }"pe";
      }"participantRole";
    }"participant";
};

group periodTiming(source effectiveTime: PIVL_TS, target timing: Timing){
  effectiveTime -> timing.repeat as r then{
    effectiveTime.period as p -> r.period = (p.value); 
    effectiveTime.period as p -> r.periodUnit = (p.unit);   
  }"repeat";
}

//---------------------------------------------------------------------------------------

group Act (source cda: Act, target pat : Patient, target ac : DiagnosticReport, target enc : Encounter, target bundle : Bundle){
  cda.code -> ac.code;
  cda.statusCode as statusc where (code='completed') -> ob.status ='final';
  cda.statusCode as statusc where (code='active') -> ob.status ='registered';
  cda.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  cda.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  cda.effectiveTime as effectiveTime -> ac.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value3";
  cda -> ac.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %pat.id) "reference";
  cda -> ac.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";
  cda.participant  as part->  enc.participant as participant then{
     part  -> participant.type as type then { 
          part -> type.coding as coding then{
            part-> coding.code = (part.typeCode) "codice";
            part-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
          } "codeType"; 
        }"type";
    part.participantRole as participantRole ->  participant.individual = create('Reference') as reference then {
      participantRole ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'PUT', e.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e.fullUrl = append('urn:uuid:', uuid1),  reference.reference = ('urn:uuid:' + %practitioner.id) then { 
        participantRole.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
            participantRole-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
        }"identifier";
        participantRole.playingEntity  as playingEntity then{
          playingEntity.name -> practitioner.name;
        }"playingEntity";
         }"participanRoleBund";  
    }"participantRole";
  }"participant";
  cda.entryRelationship as entryRelationship then {
    entryRelationship.observation as observation ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST', e.resource = create('Observation') as obs,  obs.id = uuid() as uuid2,  e.fullUrl = append('urn:uuid:', uuid2), request.url = append('Observation/', uuid2), ac.result = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs.id) then Observation(observation,pat,enc,obs,bundle) "OBS";
  }"entryRelationship";
}

",
          "subType": "00"
        }
      }
    }
  ],
  "definitions": [],
  "valuesets": [],
  "template_id_root": "2.16.840.1.113883.2.9.10.1.4.1.1",
  "last_update_date": {
    "$date": {
      "$numberLong": "1672918835700"
    }
  },
  "version": "1.0",
  "root_map": "ProfiloSanitarioSinteticoBody",
  "deleted": false,
  "last_sync": {
    "$date": {
      "$numberLong": "1673389070410"
    }
  }
},{
  "_id": {
    "$oid": "63bde40b52385b1d3ed817e1"
  },
  "maps": [
    {
      "name_map": "verbalePS",
      "filename_map": "VPS_Completo.map",
      "content_map": {
        "$binary": {
          "base64": "map "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/verbalePS" = "verbalePS"

conceptmap "cm-v3-administrative-gender" {
  prefix s = "http://terminology.hl7.org/ValueSet/v3-AdministrativeGender"
  prefix t = "http://hl7.org/fhir/ValueSet/administrative-gender"

  s:M == t:male
  s:F == t:female
}

conceptmap "AllergyTypeMap" {

    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
  
    prefix t = "http://hl7.org/fhir/Allergy-type.html"
  
    s:OINT == t:intolerance
    s:ALG == t:allergy
    s:DALG == t:allergy
    s:EALG == t:allergy
    s:FALG == t:allergy
    s:NAINT == t:intolerance
    s:FNAINT == t:intolerance
    s:DNAINT == t:intolerance
    s:ENAINT == t:intolerance
    s:FINT == t:intolerance
    s:DINT == t:intolerance
    s:EINT == t:intolerance
  }
  conceptmap "AllergyCategoryMap" {

    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://hl7.org/fhir/Allergy-type.html"
  
    s:DALG == t:medication
    s:EALG == t:enviroment
    s:FALG == t:food
    s:FNAINT == t:food
    s:DNAINT == t:medication
    s:ENAINT == t:enviroment
    s:FINT == t:food
    s:DINT == t:medication
    s:EINT == t:enviroment
  }

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL_PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL_TS" as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target


imports "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes"
imports "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/FULLHEADER"

//--------------------------------------------------------------------------------------------
//----Orgest

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
  cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('https://example/Composition/', uuid1), request.url = 'Composition',  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Patient/', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3),request.url = 'Encounter',
  bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST',  e6.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid6,  e6.fullUrl = append('https://example/DocumentReference/', uuid6),request.url = 'DocumentReference' then {
    cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle,DocumentReference) "cdatobundle";
    cda.recordTarget as recordTarget then{
      recordTarget.patientRole as patient then{
         patient.id as id-> patient.identifier as identifier then {
           id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext1 -> identifier.value = ext1 "value";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          }"idfr";
          patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7')
          or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17') or (root='2.16.840.1.113883.2.9.4.3.15')  then {
            id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
            }"ext";
          }"record";
        }"recPat";
  } "ClinicalDocumentToBody";
}

group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle , target documentreference : DocumentReference) {
  cda -> bundle.id = uuid() "id";
  cda.id -> bundle.identifier "identifier";
  cda -> bundle.type = 'transaction' "type";
  cda.effectiveTime -> bundle.timestamp;
  cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle,documentreference) "composition";
  cda.component as component then {
    component.structuredBody as body then {
      body.component as component  then {
	     component.section as srcSection then {
        srcSection.code where (code='11459-5' )-> composition.section as tgtSection  then ModalitadiTrasposto(cda, srcSection, patient, tgtSection, bundle,encounter)"Modalita_di_trasporto";
        srcSection.code where(code = '78337-3') -> composition.section as tgtSection  then InquadramentoClinicoIniziale(cda, srcSection, patient, tgtSection, bundle,encounter) "Inquadramento_clinico";
        srcSection.code where(code = '46239-0') -> composition.section as tgtSection  then MotivoDellaVisita(cda, srcSection, patient, tgtSection, bundle,encounter) "Inquadramento_clinico";
        srcSection.code where(code = '54094-8') -> composition.section as tgtSection  then Triage(cda, srcSection, patient, tgtSection, bundle,encounter) "Inquadramento_clinico";
        srcSection.code where(code = '46240-8') -> composition.section as tgtSection  then ClinicalDocumentSectionEncounter(cda, srcSection, patient, tgtSection, bundle,encounter) "motivo ricovero";
        srcSection.code where(code = '8648-8') -> composition.section as tgtSection  then ClinicalDocumentSectionDecorsoOspedaliero(cda, srcSection, patient, tgtSection, bundle,encounter) "Decorso Ospedaliero";
        srcSection.code where(code = '55109-3') -> composition.section as tgtSection  then ClinicalDocumentSectionComplicanze(cda, srcSection, patient, tgtSection, bundle,encounter) "Complicazioni";
        srcSection.code where(code = '62387-6') -> composition.section as tgtSection  then ClinicalDocumentSectionConsulenza(cda, srcSection, patient, tgtSection, bundle,encounter) "Hospital discharge studies summary";
        srcSection.code where(code = '30954-2') -> composition.section as tgtSection  then ClinicalDocumentSectionAccertamenti(cda, srcSection, patient, tgtSection, bundle,encounter) "Accertamenti";
        srcSection.code where(code = '8716-3') -> composition.section as tgtSection  then ClinicalDocumentSectionParametriVitali(cda, srcSection, patient, tgtSection, bundle,encounter) "Accertamenti";
        srcSection.code where(code = '29549-3') -> composition.section as tgtSection  then ClinicalDocumentSectionTerapiaFarmacoInPronto(cda, srcSection, patient, tgtSection, bundle,encounter) "Accertamenti";
        srcSection.code where(code = '18776-5') -> composition.section as tgtSection  then ClinicalDocumentSectionPianoCuraDimissione(cda, srcSection, patient, tgtSection, bundle,encounter) "Piano di cura alla dimissione";
        srcSection.code where(code = '28574-2') -> composition.section as tgtSection  then ClinicalDocumentSectionDimissione(cda, srcSection, patient, tgtSection, bundle,encounter) "Piano di cura alla dimissione";
        srcSection.code where(code = '75311-1') -> composition.section as tgtSection  then ClinicalDocumentSectionTerapiaFarmacologicaDimissione(cda, srcSection, patient, tgtSection, bundle,encounter) "Piano di cura alla dimissione";
      };
      };
    }"body";
  };
}

//Sezione complicanze--------------------------------------------------------------------------
group ClinicalDocumentSectionComplicanze(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
    src.title as t -> tgt.title = (t.dataString);
    src.code -> tgt.code;
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";
    src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
      entry1.observation as obs then Observation(obs, patient ,enc ,observation, bundle) "act";
    }"entry";
}

group Observation (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {
  
  obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";  
  obs.code -> ob.code;
  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs where obs.statusCode.exists().not() then {
  obs->ob.status ='final'"status";
  }"statuscode";
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
  
  obs.value:CD as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        };
      } "translation";
    }"coding";
  }"val";

  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
    val.value as value->quantity.value = value;
    val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";

  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";
  obs.interpretationCode -> ob.interpretation;
    obs.methodCode -> ob.method;

  obs.value:BL as value->ob.value =create('boolean'),ob.value= (value.value) "value";
    
    obs.effectiveTime as eff -> ob.effective = create('Period') as per then{
      eff.low as l -> per.start = (l.value) "val";
      eff.high as h -> per.end = (h.value) "val2";
    }"eff";
    obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT', e1.resource = create('Practitioner') as practitioner then {
      performer.assignedEntity as entity then {
        entity->practitioner.meta as meta then {
          entity->meta.tag = create('Coding') as coding then {
            entity -> coding.system ='http://algoritmodiscoring'"system";
            entity -> coding.code ='ClinicalDocument/body/entry/observation/performer'"code";
          }"coding";
        }"meta";
        entity.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            entity-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid1, e1.fullUrl  = append('https://example/Practitioner/', uuid1), ob.performer = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "performer";
          }"r";
        }"identifier";
        entity.assignedPerson as person then {
          person.name -> practitioner.name;
          person.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
          }"birth";
        }"name";
      }"assignedEntity";
    }"performer";
  obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
      refRange.observationRange as obsRange -> ref.low = create('SimpleQuantity') as Low  then {
          obsRange.value: IVL_PQ as v  then {
            v.low as l1 then {
              l1.value as decValue-> Low.value = decValue;
              l1.unit as Unit-> Low.unit = Unit;
            }"decValue";          
          }"IVL_PQ";                      
      }"obsRange";              
    }"refRange";  
}
//------------------------------------------------------------------------------------------------------

//Sezione Decorso Ospedaliero----------------------------------------------------------------------------
group ClinicalDocumentSectionDecorsoOspedaliero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
    src.title as t -> tgt.title = (t.dataString);
    src.code -> tgt.code;
    src ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',  e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id),  observation.note as note then {
        src.code -> observation.code;
        src where observation.statusCode.exists().not() then {
            src->observation.status ='final'"status";
            }"statuscode";
            src->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            src->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";                            
            src.text as t ->note.text =t "reference";                  
      src.author as auth -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT', e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then {
              auth.time as ti -> note.time = (ti.value) "time";
              auth.assignedAuthor as assAuth then{
              //meta+identifier
              assAuth->practitioner.meta as meta then {
                assAuth->meta.tag = create('Coding') as coding then {
                  assAuth -> coding.system ='http://algoritmodiscoring'"system";
                  assAuth -> coding.code ='clinicalDocument/body/InquadramentoClinicoIniziale/author'"code";
                }"coding";
              }"meta";
              assAuth.id as id -> practitioner.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext;
                id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                id.root as r then {
                  id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), note.author  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                }"r";
              }"identifier";
              assAuth.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
           
              assAuth.assignedPerson as assPers then{
                  assPers.name -> practitioner.name;
              }"assPers";
            }"assAuth";
        }"Auth";
    }"OB-note";
}
//--------------------------------------------------------------------------------------------------------

//Sezione Encounter---------------------------------------------------------------------------------------
group ClinicalDocumentSectionEncounter(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc1 : Encounter){
    src.title as t -> tgt.title = (t.dataString);
    src.code -> tgt.code;
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";
    src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Encounter/', uuid1), request.url = 'Encounter' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) then {
        entry1 -> encounter.partOf = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc1.id) "refer";
        entry1 -> encounter.subject = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "refer";
        entry1 -> encounter.status = 'finished' "status";
        entry1 -> encounter.class = create('Coding') as cl then{
          entry1 -> cl.code = 'AMB' "code";
          entry1 -> cl.display = 'ambulatory' "code";
        }"class";
        entry1.encounter as enc then{
            enc.code -> encounter.type;               
            enc.effectiveTime as eff -> encounter.period = create('Period') as period then{
                eff.low as l -> period.start = (l.value);
                eff.high as h -> period.end = (h.value);
            }"period";
            enc.participant as part where(typeCode != 'LOC') -> encounter.participant = create('BackboneElement') as patarg then {
                  part -> patarg.type as type then { 
                  part -> type.coding as coding then{
                  part-> coding.code = (part.typeCode) "codice";
                  part-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
                } "codeType"; 
              }"type";
                part.time as ti -> patarg.period = create('Period') as period then{                
                    ti.low as l -> period.start = (l.value);
                    ti.high as h -> period.end = (h.value);
                }"time";
                part.participantRole as partRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then {                    
                    //modifica meta+identifier
                    partRole->practitioner.meta as meta then {
                      partRole->meta.tag = create('Coding') as coding then {
                        partRole -> coding.system ='http://algoritmodiscoring'"system";
                        partRole -> coding.code ='clinicalDocument/body/InquadramentoClinicoIniziale/author'"code";
                      }"coding";
                    }"meta";
                    partRole.id as id -> practitioner.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext;
                      id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                      id.root as r then {
                        id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), patarg.individual = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                      }"r";
                    }"identifier";
                    partRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"2.16.840.1.113883.2.9.4.3.2";
                   
                    partRole.playingEntity as playEnt then{
                      playEnt.name -> practitioner.name;
                    }"playEnt";                    
                }"partRole";
            }"participant-ADM";
            enc.participant as part where(typeCode = 'LOC') then{
                part.time as tim -> encounter.location as locat then{
                    tim -> locat.period = create('Period') as period then{
                        tim.low as l -> period.start = (l.value);
                        tim.high as h -> period.end = (h.value);
                    }"period";
                part.participantRole as partRole ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Location') as location,  location.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Location/', uuid1) then{                  
                    
                   
                    part-> location.meta as meta then {
                      part-> meta.tag = create('Coding') as coding then {
                      part -> coding.system ='http://algoritmodiscoring'"system";
                      part -> coding.code ='ClinicalDocument/body/vaccinazione/participant'"code";
                      }"coding";
                    }"meta";       
                    
                    partRole.id as id -> location.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext then {
                        partRole -> request.url = append('Location?identifier=',ext)"UUID";
                      }"ext";
                      id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                      id.root as r then {
                        id.extension as ext  -> location.id = (r +'-'+ ext) as uuid,  e1.fullUrl = append('https://example/Location/', uuid),  locat.location = create('Reference') as reference,  reference.reference = ('https://example/Location/' + %location.id) "idasi";       
                      }"r" ;
                    }"identifier";                                                      
                    partRole.code -> location.type;
                }"partRole";
              }"location";
            }"participant2";
            
            enc.entryRelationship as entr -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as observation, observation.id = uuid() as uuid1, e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , encounter.reasonReference = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
              entr.act as act then{                    

                act.code -> observation.code;
                act -> observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
                act -> observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc1.id) "reference";
                act where act.statusCode.exists().not() then {
                  act->observation.status ='final'"status";
                }"statuscode";
                    act -> observation.note = create('Annotation') as note then{
                        act.text as text then{
                            text.reference as reff -> note.text = (reff.value);
                        }"text";
                        act.text as tx then {
                          tx.reference as ref -> note.text = (ref.value) "val"; 
                        }"String";
                        act.author as auth ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT', e1.resource = create('Practitioner') as practitioner, practitioner.id = uuid() as uuid1, e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
                        auth.time as ti -> note.time = (ti.value) "time";
                        auth.assignedAuthor as assAuth then{
                              
                                assAuth->practitioner.meta as meta then {
                                  assAuth->meta.tag = create('Coding') as coding then {
                                    assAuth -> coding.system ='http://algoritmodiscoring'"system";
                                    assAuth -> coding.code ='clinicalDocument/body/InquadramentoClinicoIniziale/author'"code";
                                  }"coding";
                                }"meta";
                                assAuth.id as id -> practitioner.identifier as identifier then {
                                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                                  id.extension as ext->identifier.value = ext;
                                  id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                                  id.root as r then {
                                    id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                                  }"r";
                                }"identifier";
                                assAuth.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                                  id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                                }"2.16.840.1.113883.2.9.4.3.2";                  
                                // fine modifica
                                //assAuth.id -> practitioner.identifier;
                                assAuth.time as t -> note.text = (t.value);
                                assAuth.assignedPerson as assPers then{
                                    assPers.name -> practitioner.name;
                                }"name";    
                            }"assAush";
                        }"practitioner";    
                    }"note";
                }"act";
            }"entryRel SUBJ";
        }"encounter";
    }"entry";
}
//--------------------------------------------------------------------------------------------------------

//Sezione Consulenza--------------------------------------------------------------------------------------

group ClinicalDocumentSectionConsulenza(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";
  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('ServiceRequest') as serviceRequest,  serviceRequest.id = uuid() as uuid1,  e1.fullUrl = append('https://example/ServiceRequest/', uuid1), request.url = 'ServiceRequest' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/ServiceRequest/' + %serviceRequest.id), serviceRequest.note as note then {
    
    entry1->serviceRequest.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
    entry1->serviceRequest.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
    entry1 -> serviceRequest.status='active'"status";
    entry1 -> serviceRequest.intent='order'"intent";    
    
    entry1.act as act then{
     act.code -> serviceRequest.code;
      act.text as t -> note.text = (t.dataString) "text"; 
      act.statusCode as code -> serviceRequest.status = (code.code);
      act.performer as perf -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
      perf.time as time  -> serviceRequest.occurrence=create('dateTime') as t then TSDateTime(time,t) "time";
      perf.assignedEntity as assEnt then{

       
          assEnt->practitioner.meta as meta then {
            assEnt->meta.tag = create('Coding') as coding then {
              assEnt -> coding.system ='http://algoritmodiscoring'"system";
              assEnt -> coding.code ='clinicalDocument/body/InquadramentoClinicoIniziale/author'"code";
            }"coding";
          }"meta";
          assEnt.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext;
            id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
            id.root as r then {
              id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), serviceRequest.performer  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
            }"r";
          }"identifier";
          assEnt.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";
          assEnt.assignedPerson as assPer then {
            assPer.name -> practitioner.name;
          }"assPer";
        }"assEnt";
      }"performer";           
      act.participant as parti -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
         parti.time as time  -> serviceRequest.authoredOn=create('dateTime') as t then TSDateTime(time,t) "time";
      parti.participantRole as partRole then {
             partRole->practitioner.meta as meta then {
            partRole->meta.tag = create('Coding') as coding then {
              partRole -> coding.system ='http://algoritmodiscoring'"system";
              partRole -> coding.code ='clinicalDocument/body/InquadramentoClinicoIniziale/author'"code";
            }"coding";
          }"meta";
          partRole.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext;
            id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
            id.root as r then {
              id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), serviceRequest.requester  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
            }"r";
          }"identifier";
          partRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";

         
          partRole.playingEntity as entity then{
            entity.name -> practitioner.name;
          }"entity";
        }"partRole";
      }"participant";   
    }"ACT";
  }"entry";
}
//---------------------------------------------------------------------------------------------------------

//Sezione Accertamenti--------------------------------------------------------------------------------------
group ClinicalDocumentSectionAccertamenti(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {    
    entry1.organizer as obs then{      
      src.code -> observation.code;
       obs then ObservationAccertamenti(obs, patient ,enc ,observation, bundle) "act";
    }"obs"; 
  }"entry";
}


group ObservationAccertamenti (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {
  obs.code -> ob.code;
  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs where obs.statusCode.exists().not() then {
    obs->ob.status ='final'"status";
    }"statuscode";
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";

  obs.value:CD as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        }"qual";
      } "translation";
    }"coding";
  }"val";

  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
    val.value as value->quantity.value = value;
    val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";

  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";

    obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
    obs.interpretationCode -> ob.interpretation;
    obs.methodCode -> ob.method;
   
    obs.effectiveTime as eff -> ob.effective = create('Period') as per then{
      eff.low as l -> per.start = (l.value) "val";
      eff.high as h -> per.end = (h.value) "val2";
    }"eff";
    
    obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
      refRange.observationRange as obsRange -> ref.low = create('SimpleQuantity') as Low  then {
          obsRange.value: IVL_PQ as v  then {
            v.low as l1 then {
              l1.value as decValue-> Low.value = decValue;
              l1.unit as Unit-> Low.unit = Unit;
            }"decValue";          
          }"IVL_PQ";                      
      }"obsRange";              
    }"refRange";  


    obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
      performer.assignedEntity as assEntity then {

        //inizio modifica identifier+meta 
        assEntity->practitioner.meta as meta then {
          assEntity->meta.tag = create('Coding') as coding then {
            assEntity -> coding.system ='http://algoritmodiscoring'"system";
            assEntity -> coding.code ='clinicalDocument/body/InquadramentoClinicoIniziale/author'"code";
          }"coding";
        }"meta";
        assEntity.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext;
          id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
          id.root as r then {
            id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), ob.performer  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
          }"r";
        }"identifier";
        assEntity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"2.16.840.1.113883.2.9.4.3.2";
        //fine modifica
        //assEntity.id -> practitioner.identifier;
        assEntity.assignedPerson as assi then {
          assi.name -> practitioner.name;
        }"assi";
      }"assEntity";
    }"perf";

    obs.participant as participant -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('ServiceRequest') as serviceRequest,  serviceRequest.id = uuid() as uuid1,  e1.fullUrl = append('https://example/ServiceRequest/', uuid1), request.url = 'ServiceRequest' ,ob.basedOn  = create('Reference') as reference,  reference.reference = ('https://example/ServiceRequest/' + %serviceRequest.id) then{
      
      participant.time as t -> serviceRequest.authoredOn = (t.value);
      obs->serviceRequest.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
      obs->serviceRequest.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
      obs -> serviceRequest.status='active'"status";
      obs -> serviceRequest.intent='order'"intent";
      participant.participantRole as participantRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
        
        //modifica meta+identifier
        participantRole->practitioner.meta as meta then {
          participantRole->meta.tag = create('Coding') as coding then {
            participantRole -> coding.system ='http://algoritmodiscoring'"system";
            participantRole -> coding.code ='clinicalDocument/body/InquadramentoClinicoIniziale/author'"code";
          }"coding";
        }"meta";
        participantRole.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext;
          id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
          id.root as r then {
            id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), serviceRequest.requester  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
          }"r";
        }"identifier";
        participantRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"2.16.840.1.113883.2.9.4.3.2";
        //fine modifica         
        
        //participantRole.id -> practitioner.identifier;
        participantRole.playingEntity as pe then{
          pe.name -> practitioner.name;
        }"pe";
      }"participantRole";
    }"participant";

    obs.component as comp -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , ob.hasMember  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then{
      comp.observation as obs then{
           
        obs.code -> observation.code;             
        obs.statusCode as statusc where (code='completed') -> observation.status ='final';
        obs.statusCode as statusc where (code='active') -> observation.status ='registered';
        obs.statusCode as statusc where (code='aborted') -> observation.status ='cancelled';
        obs.statusCode as statusc where (code='suspended') -> observation.status ='partial';
        obs where obs.statusCode.exists().not() then {
        obs->observation.status ='final'"status";
        }"statuscode"; 
        
        obs->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
        obs->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
    
        obs.effectiveTime as eff -> observation.effective = (eff.value);
        obs.value as val -> observation.value = (val.dataString);
      }"obs";
    }"observation";
}
//-----------------------------------------------------------------------------------------------------------

//Sezione ParametriVitali--------------------------------------------------------------------------------------
group ClinicalDocumentSectionParametriVitali(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
    entry1.organizer as org then{
      org -> observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      org -> observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";     
      org.statusCode as statusc where (code='completed') -> observation.status ='final';
      org.statusCode as statusc where (code='active') -> observation.status ='registered';
      org.statusCode as statusc where (code='aborted') -> observation.status ='cancelled';
      org.statusCode as statusc where (code='suspended') -> observation.status ='partial';
      org where obs.statusCode.exists().not() then {
        org->observation.status ='final'"status";
      }"statuscode";       
      org.code -> observation.code;
      org.component as component ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation1,  observation1.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,observation.hasMember  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation1.id) then {
        component.observation as obs then {
          obs -> observation1.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
          obs -> observation1.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
          obs.code -> observation1.code;
          obs.statusCode -> observation1.status;
          obs.statusCode as statusc where (code='completed') -> observation1.status ='final';
          obs.statusCode as statusc where (code='active') -> observation1.status ='registered';
          obs.statusCode as statusc where (code='aborted') -> observation1.status ='cancelled';
          obs.statusCode as statusc where (code='suspended') -> observation1.status ='partial';
          obs where obs.statusCode.exists().not() then {
          obs->observation1.status ='final'"status";
          }"statuscode";           
         
          obs -> observation1.value = create('Quantity') as quant then{
            obs.value as v -> quant.value = (v.value);
            obs.value as v -> quant.unit = (v.unit);
          }"quant";
          obs.interpretationCode -> observation1.interpretation;
          obs.methodCode -> observation1.method;
          obs.targetSiteCode -> observation1.bodySite;
          
          obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
              performer.time as t -> observation1.issued = (t.value);
              performer.assignedEntity as assEntity then{
              
              //inizio modifica meta+ identifier
              assEntity->practitioner.meta as meta then {
                assEntity->meta.tag = create('Coding') as coding then {
                  assEntity -> coding.system ='http://algoritmodiscoring'"system";
                  assEntity -> coding.code ='clinicalDocument/body/InquadramentoClinicoIniziale/author'"code";
                }"coding";
              }"meta";
              assEntity.id as id -> practitioner.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext;
                id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                id.root as r then {
                  id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), observation1.performer  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                }"r";
              }"identifier";
              assEntity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";                
              //fine modifica
              
              //assEntity.id -> practitioner.identifier;
              assEntity.assignedPerson as assPerson then{
                assPerson.name -> practitioner.name;
              }"assPerson";
            }"assEntity";
          }"performer";

          obs.participant as parti -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('ServiceRequest') as serviceRequest,  serviceRequest.id = uuid() as uuid1,  e1.fullUrl = append('https://example/ServiceRequest/', uuid1), request.url = 'ServiceRequest' ,observation1.basedOn  = create('Reference') as reference,  reference.reference = ('https://example/ServiceRequest/' + %serviceRequest.id) then{
            
            parti->serviceRequest.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
            parti->serviceRequest.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
            parti -> serviceRequest.status='active'"status";
            parti -> serviceRequest.intent='order'"intent";                        
            
            parti.time as t -> serviceRequest.authoredOn = (t.value);
            parti.participantRole as partRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
              
              //inizio modifica meta + identifier
              partRole->practitioner.meta as meta then {
                partRole->meta.tag = create('Coding') as coding then {
                  partRole -> coding.system ='http://algoritmodiscoring'"system";
                  partRole -> coding.code ='clinicalDocument/body/InquadramentoClinicoIniziale/author'"code";
                }"coding";
              }"meta";
              partRole.id as id -> practitioner.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext;
                id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                id.root as r then {
                  id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), serviceRequest.requester  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                }"r";
              }"identifier";
              partRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
              //fine modifica
              
              //partRole.id -> practitioner.identifier;
              partRole.playingEntity as playingEntity then{
                playingEntity.name -> practitioner.name;
              }"name";
            }"partRole";
          }"parti";

        }"obs";
      }"component";
    }"obs"; 
  }"Observation";
}
//-----------------------------------------------------------------------------------------------------------------

//Sezione terapia Farma in Pronto----------------------------------------------------------------------------------

group ClinicalDocumentSectionTerapiaFarmacoInPronto(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationAdministration') as medAdm,  medAdm.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationAdministration/', uuid1), request.url = 'MedicationAdministration' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationAdministration/' + %medAdm.id), medAdm.note as note then {
    entry1->medAdm.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    entry1->medAdm.context=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";    
    entry1.substanceAdministration as sub then{
      sub.text as tx then{ 
        tx.reference as reff -> note.text = (reff.value);
      }"txx";
      sub.statusCode -> medAdm.status;
      sub.effectiveTime: IVL_TS as eff -> medAdm.effective = create('Period') as period then{
        eff.low as l -> period.start = (l.value);
        eff.high as h -> period.end = (h.value);
      }"eff1";
      sub.effectiveTime: PIVL_TS as eff -> medAdm.dosage as dosage then{
        eff -> dosage.rate = create('Ratio') as ratio then {
          eff -> ratio.numerator = create('Quantity') as num then{
            eff.period as per -> num.value = (per.value);
            eff.period as per -> num.unit = (per.unit);
          }"num";
          eff -> ratio.denominator = create('Quantity') as num then{
            eff.period as per -> num.value = '1';
            eff.period as per -> num.unit = (per.unit);
          }"den";
        }"ratio";
      }"eff2";
      sub -> medAdm.dosage as dosage then{
        sub.routeCode -> dosage.route;
      }"route";
      sub -> medAdm.dosage as dosage then{
        sub.approachSiteCode -> dosage.site;
      }"route";
      
      sub -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationRequest') as medRq,  medRq.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationRequest/', uuid1), request.url = 'MedicationRequest' ,medAdm.request  = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medRq.id) then{
        
        sub.entryRelationship as rel then{
          rel.supply as supl -> medRq.dispenseRequest = create('BackboneElement') as disp  then{
            supl -> disp.quantity = create('SimpleQuantity') as q then {
              supl.quantity as qua -> q.value = (qua.value) "fds";
            }"SimpleQuantity";
          }"obs";
        }"rel";
        sub-> medRq.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
        sub-> medRq.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";    
        sub -> medRq.status='active'"status";
        sub -> medRq.intent='order'"intent";            
        
        sub -> medRq.medication = create('CodeableConcept') as cod then{
          sub -> cod.text = 'medication' "Medi";
        }"code";

        sub.doseQuantity as quantity then  {
          quantity -> medRq.dosageInstruction = create('Dosage') as dosage then{
            quantity -> dosage.doseAndRate as dosRange then{
              quantity -> dosRange.dose = create('Range') as range then {
                quantity ->  range.low = create('SimpleQuantity') as quant then{
                  quantity.low as l -> quant.value = (l.value) "v1";
                  quantity.low as l -> quant.unit = (l.unit) "v1";
                }"low";
                quantity ->  range.high = create('SimpleQuantity') as quant then{
                  quantity.high as h -> quant.value = (h.value) "v1";
                  quantity.high as h -> quant.unit = (h.unit) "v1";
                }"high";
              }"range";
            }"dos";
          }"dosage";
        }"dose_quantity";
          sub.rateQuantity as rate then {
            rate -> medRq.dosageInstruction = create('Dosage') as dosage then{
              rate -> dosage.doseAndRate as dosRange then{
                rate -> dosRange.dose = create('Range') as range then {
                  rate ->  range.low = create('SimpleQuantity') as quant then{
                    rate.low as l -> quant.value = (l.value) "v1";
                    rate.low as l -> quant.unit = (l.unit) "v1";
                  }"low";
                  rate ->  range.high = create('SimpleQuantity') as quant then{
                    rate.high as h -> quant.value = (h.value) "v1";
                    rate.high as h -> quant.unit = (h.unit) "v1";
                  }"high";
                }"range";
              }"dos";
            }"dosage";
          }"Rate_quantity";

        sub.participant as part then{
          part.time as t -> medRq.authoredOn = (t.value) "time";  
          part.participantRole as partRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
            
            //inizio meta+identifier
            partRole->practitioner.meta as meta then {
              partRole->meta.tag = create('Coding') as coding then {
                partRole -> coding.system ='http://algoritmodiscoring'"system";
                partRole -> coding.code ='clinicalDocument/body/InquadramentoClinicoIniziale/author'"code";
              }"coding";
            }"meta";
            partRole.id as id -> practitioner.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext;
              id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
              id.root as r then {
                id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), medRq.requester  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
              }"r";
            }"identifier";
            partRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
              id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"2.16.840.1.113883.2.9.4.3.2";            
            //fine modifiche
            
            partRole.id -> practitioner.identifier;
            partRole.playingEntity as play then{
              play.name -> practitioner.name;
            }"play";
          }"Part";
        }"part";
      }"medicationRequest";

      sub -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as med,  med.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Medication/', uuid1), request.url = 'Medication' ,medAdm.medication  = create('Reference') as reference,  reference.reference = ('https://example/Medication/' + %med.id) then{
        sub.administrationUnitCode as adduni then {
          sub.administrationUnitCode -> med.form;
          sub.consumable as consum then{
            consum.manufacturedProduct as manuProd then{
              manuProd.manufacturedMaterial as manuMt then{
                manuMt.code -> med.code;
              }"manuMat";
            }"manuMat";
          }"consum";
        }"unicode";
        sub.entryRelationship as entryR then{
          entryR.observation as observation then{
                 observation.code where displayName='Grammatura' -> med.ingredient as ingredient then{
                  sub.consumable as consumable then{
                          consumable.manufacturedProduct as manufacturedProduct then{
                              manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                                  manufacturedMaterial.code as code -> ingredient.item = create('CodeableConcept') as value then CECodeableConcept(code,value) "CE";
                              }"material";
                          }"product";
                      }"consumable";
                      observation.value as value -> ingredient.strength as strength then{
                          value -> strength.numerator as numerator then{
                              value -> numerator.value = (value.value) "valueN";
                          } "numerator";
                          value -> strength.denominator as denominator then{
                              value -> denominator.value = 1 "valueD";
                          } "denominator";
                     }"strenght";
                  }"ingredient";
                  observation.code where displayName='Quantità nella Confezione' then{
                      observation.value as value -> med.amount as amount then{
                          value -> amount.numerator  as numerator then{
                              value -> numerator.value = (value.value) "valueN";
                          } "numerator";
                          value -> amount.denominator as denominator then{
                              value -> denominator.value = 1 "valueD";
                          } "denominator";
                      }"amount";
                 }"quantità";
             }"obs";
        }"entry R";
        
      }"med";     

      

      sub.performer as perf -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
        
      perf ->medAdm.note as note then {
        perf->note.text='performertime' "notaaaaaa";
       perf.time as t ->note.time =(t.value);
      }"preftime";
      perf.assignedEntity as ent then{

          // inizio modifica meta+identifier
          ent->practitioner.meta as meta then {
            ent->meta.tag = create('Coding') as coding then {
              ent -> coding.system ='http://algoritmodiscoring'"system";
              ent -> coding.code ='clinicalDocument/body/InquadramentoClinicoIniziale/author'"code";
            }"coding";
          }"meta";
          ent.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext;
            id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
            id.root as r then {
              id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), medAdm.performer as p, p.actor = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
            }"r";
          }"identifier";
          ent.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";
          //fine modifica

          //ent.id -> practitioner.identifier;
          ent.assignedPerson as assPerson then{
            assPerson.name -> practitioner.name;
          }"assperson";
        }"ent";
        
      }"perform";
    }"MedAdm";
  }"entry";
}
//------------------------------------------------------------------------------------------------------------------

//-
group ClinicalDocumentSectionPianoCuraDimissione(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('CarePlan') as careplan,  careplan.id = uuid() as uuid1,  e1.fullUrl = append('https://example/CarePlan/', uuid1), request.url = 'CarePlan' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/CarePlan/' + %careplan.id) then {
    src-> careplan.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    src-> careplan.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";    
    src -> careplan.status='active'"status";
    src -> careplan.intent='order'"intent";
    src.text as cdaText -> careplan.note as carenote then {
      cdaText as t -> carenote.text=t "notetxt";
      entry1.author as author then {
        author.time-> carenote.time "notetime";
        author.assignedAuthor as assauthor -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
          
          //inizio modifica meta+identifier
          assauthor->practitioner.meta as meta then {
            assauthor->meta.tag = create('Coding') as coding then {
              assauthor -> coding.system ='http://algoritmodiscoring'"system";
              assauthor -> coding.code ='clinicalDocument/body/InquadramentoClinicoIniziale/author'"code";
            }"coding";
          }"meta";
          assauthor.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext;
            id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
            id.root as r then {
              id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), carenote.author = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
            }"r";
          }"identifier";
          assauthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";            
          //fine modifica
          
          //assauthor.id->practitioner.identifier "cfauthor";
          assauthor.assignedPerson as pers then{
            pers.name -> practitioner.name;
            }"namepers";
          }"authpract";
        }"CFauthor";
      }"author";
      entry1.entry as entry2 then{ 
        entry2.act as entryact ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('ServiceRequest') as servicerequest,  servicerequest.id = uuid() as uuid1,  e1.fullUrl = append('https://example/ServiceRequest/', uuid1), request.url = 'ServiceRequest' , careplan.activity = create('BackboneElement') as activ, activ.reference =create('Reference') as reference, reference.reference = ('https://example/ServiceRequest/' + %servicerequest.id) then{

          entryact->servicerequest.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
          entryact->servicerequest.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
          entryact -> servicerequest.status='active'"status";
          entryact -> servicerequest.intent='order'"intent";          

          entryact-> servicerequest.identifier = create('BackboneElement') as identif then {
           
            entryact.reference as actref then {
              actref.externalAct as extact then{
             
                extact->servicerequest.identifier = create('BackboneElement') as identif3 then{
                  extact.id as id  then {
                    id.root as r ->identif3.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identif3.value = ext then {
                      id.assigningAuthorityName as s -> identif3.assigner as a, a.display = s;
                    }"ext";
                 }"idnetn";
              }"extact";
            }"actref";
          }"jarilemes";
          entryact.code->servicerequest.code;
          entryact.statusCode->servicerequest.status;
          entryact.author as actauthor then {
            actauthor.time->servicerequest.authoredOn;
            actauthor.assignedAuthor as assauthor -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
              
              //inizio modifica identifier
              assauthor->practitioner.meta as meta then {
                assauthor->meta.tag = create('Coding') as coding then {
                  assauthor -> coding.system ='http://algoritmodiscoring'"system";
                  assauthor -> coding.code ='clinicalDocument/body/InquadramentoClinicoIniziale/author'"code";
                }"coding";
              }"meta";
              assauthor.id as id -> practitioner.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext;
                id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                id.root as r then {
                  id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), servicerequest.requester = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                }"r";
              }"identifier";
              assauthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
              //fine modifica
              
              //assauthor.id->practitioner.identifier "cfauthor";
              assauthor.assignedPerson as pers then{
                pers.name -> practitioner.name;
                }"namepers";
            }"author";
          }"servReq";
        }"entry2";
      }"carnote";
    }"entry1";
  }"entryident3";
}

//-------Dimissione------------------------------------------------------------------------------------------------------
group ClinicalDocumentSectionDimissione(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";

  src.entry as entry1  then {
    entry1.act as act -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Encounter') as encountert,  encountert.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Encounter/', uuid1), request.url = 'Encounter' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encountert.id) then{
      
      act -> encountert.status = 'finished' "status";
      act -> encountert.class = create('Coding') as cl then{
        act -> cl.code = 'AMB' "code";
        act -> cl.display = 'ambulatory' "code";
      }"class";

      act -> encountert.partOf  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + enc.id)"ref enc";
      act -> encountert.subject  = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + patient.id)"ref enc"; 
      act.code -> encountert.type;
      act.effectiveTime as efft -> encountert.period = create('Period') as period then{
        efft -> period.start = (efft.value) "val"; 
      }"efft";

      act.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
        performer.time as ti -> note.time = (ti.value);
       performer.assignedEntity as assEnty then{
       
        assEnty->practitioner.meta as meta then {
          assEnty->meta.tag = create('Coding') as coding then {
            assEnty -> coding.system ='http://algoritmodiscoring'"system";
            assEnty -> coding.code ='clinicalDocument/body/InquadramentoClinicoIniziale/author'"code";
          }"coding";
        }"meta";
        assEnty.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext;
          id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
          id.root as r then {
            id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), encountert.participant as perf,  perf.individual  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
          }"r";
        }"identifier";
        assEnty.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"2.16.840.1.113883.2.9.4.3.2";
        //fine modifiche
        
        //assEnty.id -> practitioner.identifier;
        assEnty.assignedPerson as assPers then{
           assPers.name -> practitioner.name;
         }"assPer";
       }"ass";
      }"erformer";
      //Encounter Post dimissione
      act.entryRelationship as entriRel then {
        entriRel.encounter as enc1 then{
          enc1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Encounter') as encountert1,  encountert1.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Encounter/', uuid1), request.url = 'Encounter' ,encountert1.partOf  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + encountert.id)  then {
            enc1 -> encountert1.status = 'finished' "status";
            enc1 -> encountert1.class = create('Coding') as cl then{
              enc1 -> cl.code = 'AMB' "code";
              enc1 -> cl.display = 'ambulatory' "code";
            }"class";                        
            
            enc1 -> encountert1.subject  = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + patient.id)"ref enc";
            enc1.id -> encountert1.identifier;
            // enc1.code -> encountert1.type;
            enc1 -> encountert1.type = create('CodeableConcept') as ti then{
              enc1 -> ti.coding = create('Coding') as cod then{
                enc1.code as c -> cod.code = (c.code) "code";
                enc1.code as c then{
                  c.codeSystem as s -> cod.system = translate(s, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "system";
                }"syst";
                enc1.code as c -> cod.display = (c.displayName) "dispaly";
              }"coding"; 
              enc1.text as tx then{
                tx.reference as ref -> ti.text = (ref.value) "val"; 
              }"text";              
            }"code";
            
            enc1.effectiveTime as efft -> encountert1.period = create('Period') as period then{
              efft -> period.start = (efft.value) "val"; 
            }"efft";
      
            enc1.participant as part where(typeCode = 'LOC')  -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Location') as location,  location.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Location/', uuid1), request.url = append('Location/', uuid1) then {
              part-> location.meta as meta then {
                part-> meta.tag = create('Coding') as coding then {
                part -> coding.system ='http://algoritmodiscoring'"system";
                part -> coding.code ='ClinicalDocument/body/vaccinazione/participant'"code";
                }"coding";
              }"meta";              
              
              part.time as tim -> encountert1.location as locat then{
                  tim -> locat.period = create('Period') as period then{
                      tim.low as l -> period.start = (l.value);
                      tim.high as h -> period.end = (h.value);
                  }"period";
              part.participantRole as partRole then{
                partRole.id as id -> location.identifier as identifier then {
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext then {
                    partRole -> request.url = append('Location?identifier=',ext)"UUID";
                  }"ext";
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                  id.root as r then {
                    id.extension as ext  -> location.id = (r +'-'+ ext) as uuid,  e1.fullUrl = append('https://example/Location/', uuid), locat.location  = create('Reference') as reference,  reference.reference = ('https://example/Location/' + %location.id) "idasi";       
                  }"r" ;
                }"identifier";                          
    
              
                //partRole.id -> location.identifier;  
                partRole.code -> location.type;
              }"partRole";
            }"location1";
            }"Location";
           
            enc1.entryRelationship as entryrel2 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , encountert1.reasonReference  = create('BackboneElement') as reference ,  reference.reference = ('https://example/Observation/' + %observation.id) then{
              entryrel2.observation as obs then{
                obs->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
                obs->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encountert1.id) "reference"; 
                obs.code -> observation.code;
                obs.statusCode as statusc where (code='completed') -> observation.status ='final';
                obs.statusCode as statusc where (code='active') -> observation.status ='registered';
                obs.statusCode as statusc where (code='aborted') -> observation.status ='cancelled';
                obs.statusCode as statusc where (code='suspended') -> observation.status ='partial';
                obs  -> observation.status = 'final' "not present";
                obs.effectiveTime as effectiveTime -> observation.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
                obs.value:INT as int->observation.value=(int.value) "value";
                obs.value:BL as boolean ->observation.value=(boolean.value)"boolean";
                obs.value:CE as val then{
                  val->observation.value =create('CodeableConcept') as ce then {
                    val.originalText as originalText then{
                      originalText.reference as reference-> ce.text=reference;
                    }"originltext";
                    val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      val.codeSystemVersion as version -> coding.version = cast(version, 'string');
                    }"code";
                    val.translation as translation -> ce.coding as coding then {
                      translation.code as code -> coding.code = cast(code, 'string');
                      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      translation.displayName as display -> coding.display = cast(display, 'string');
                      translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
                      translation.qualifier as qualifier then{
                        qualifier.value as value -> ce.coding as coding then {
                          value.code as code -> coding.code = cast(code, 'string');
                          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                          value.displayName as display -> coding.display = cast(display, 'string');
                          value.codeSystemVersion as version -> coding.version = cast(version, 'string');
                        }"value";
                      }"qualifier";
                    }"translation";
                  }"coding";
                }"val";
                obs.value:PQ as val then{
                  val->observation.value = create('Quantity') as quantity then {
                    val.value as value->quantity.value = value;
                    val.unit as unit-> quantity.unit = unit "unit";
                  }"quantity";
                }"valueQuantity";
                obs.value:ST as value->observation.value =create('string'),observation.value= (value.dataString) "value";
  
              }"obs";
            }"entryrel2";
          }"enc1";
        }"enc";
      }"entriRel";
      //Trasferimento post dimissione
      act.entryRelationship as entriRel2 then {
        entriRel2.act as a then{
           a -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Encounter') as encountert2,  encountert2.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Encounter/', uuid1), request.url = 'Encounter' ,encountert2.partOf  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + encountert.id)  then {
            a -> encountert2.status = 'finished' "status";
            a -> encountert2.class = create('Coding') as cl then{
              a -> cl.code = 'AMB' "code";
              a -> cl.display = 'ambulatory' "code";
            }"class";
            a -> encountert2.subject  = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + patient.id)"ref enc";
             a.effectiveTime -> encountert2.period;
            // effectiveTime = time-stamp
            a.effectiveTime as effectivetime1 -> encountert2.period as period, period.start=(effectivetime1.value);
            a -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Location') as location,  location.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Location/', uuid1), request.url = append('Location/', uuid1) then{

              a.text as tx then {
                tx.reference as ref -> location.description = (ref.value) "dfs";
              }"text";
              a.participant as part   then {              
                part-> location.meta as meta then {
                  part-> meta.tag = create('Coding') as coding then {
                  part -> coding.system ='http://algoritmodiscoring'"system";
                  part -> coding.code ='ClinicalDocument/body/vaccinazione/participant'"code";
                  }"coding";
                }"meta";              
                
                part.time as tim -> encountert2.location as locat then{
                    tim -> locat.period = create('Period') as period then{
                        tim.low as l -> period.start = (l.value);
                        tim.high as h -> period.end = (h.value);
                    }"period";
                    
                part.participantRole as partRole then{

                  partRole.id as id -> location.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext then {
                      partRole -> request.url = append('Location?identifier=',ext)"UUID";
                    }"ext";
                    id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                    id.root as r then {
                      id.extension as ext  -> location.id = (r +'-'+ ext) as uuid,  e1.fullUrl = append('https://example/Location/', uuid),  locat.location  = create('Reference') as reference,  reference.reference = ('https://example/Location/' + %location.id) "idasi";       
                    }"r" ;
                  }"identifier";  

                
                  //partRole.id -> location.identifier;  
                  partRole.code -> location.type;
                }"partRole";
              }"loc2";
              }"Location";
            }"loc";
          }"act";
        }"a";
     }"entri-act";
     //--------------Diagnosi alla dimissione-------------------------------------------------------------
     act.entryRelationship as entryrel2 then{
      entryrel2.observation as obs then{
        obs.code as code where (code = '29308-4') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , encountert.reasonReference  = create('Reference') as reference ,  reference.reference = ('https://example/Observation/' + %observation.id) then{
            obs->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
            obs->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encountert.id) "reference"; 
                obs.code -> observation.code;
                obs.statusCode as statusc where (code='completed') -> observation.status ='final';
                obs.statusCode as statusc where (code='active') -> observation.status ='registered';
                obs.statusCode as statusc where (code='aborted') -> observation.status ='cancelled';
                obs.statusCode as statusc where (code='suspended') -> observation.status ='partial';
               // obs where obs.statusCode.exists().not() then {
                    obs->observation.status ='final'"status";
                  //  }"statuscode";
               obs.effectiveTime as effectiveTime -> observation.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
               obs.value as val then{
                  val->observation.value =create('CodeableConcept') as ce then {
                    val.originalText as originalText then{
                      originalText.reference as reference-> ce.text=reference;
                    }"originltext";
                    val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      val.codeSystemVersion as version -> coding.version = cast(version, 'string');
                    }"code";
                    val.translation as translation -> ce.coding as coding then {
                      translation.code as code -> coding.code = cast(code, 'string');
                      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      translation.displayName as display -> coding.display = cast(display, 'string');
                      translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
                      translation.qualifier as qualifier then{
                        qualifier.value as value -> ce.coding as coding then {
                          value.code as code -> coding.code = cast(code, 'string');
                          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                          value.displayName as display -> coding.display = cast(display, 'string');
                          value.codeSystemVersion as version -> coding.version = cast(version, 'string');
                        }"value";
                      }"qualifier";
                    }"translation";
                  }"coding";
                }"val";
         }"222";
      }"obs";
      }"entryrel2";
      //--------Esito----------------------------
      act.entryRelationship as entriRel3 then{
        entriRel3.observation as obs2 then{
            obs2.code as code then {
            code.code where (code.code = '11302-7') then { 
            obs2 -> encountert.hospitalization as hospital then{
            obs2.value -> hospital.dischargeDisposition;	
          }"hospital";          
      }"entry-obs1";
    }"act";
    }"x";
    }"3";

    }"act";
  }"entry1";

  src.entry as entry1 then {
    entry1.observation as obs then {
      obs -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then{
    
      obs.value as val where("xsi:type" = 'BL') -> observation.value = (val.value);
      obs then Observation(obs, patient ,enc ,observation, bundle) "act";
      }"obstarg";
    }"obs"; 
  }"entry";

}
//-----------------------------------------------------------------------------------------------------------------------

//------------------------------TerapiaFarmacologicaDimissione-----------------------------------------------------------------------------------------
group ClinicalDocumentSectionTerapiaFarmacologicaDimissione(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationRequest') as medRq,  medRq.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationRequest/', uuid1), request.url = 'MedicationRequest' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medRq.id), medRq.note = create('Annotation') as note then {
    src.text as t ->note.text =t "reference";  
    src-> medRq.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    src-> medRq.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";     
    src -> medRq.status='active'"status";
    src -> medRq.intent='order'"intent";    
     

    src.author as auth -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1)  then{
      
      auth.time as t -> note.time = (t.value);
      auth.assignedAuthor as assAuth then{
          assAuth.time -> note.time;

       
        assAuth->practitioner.meta as meta then {
          assAuth->meta.tag = create('Coding') as coding then {
            assAuth -> coding.system ='http://algoritmodiscoring'"system";
            assAuth -> coding.code ='clinicalDocument/body/InquadramentoClinicoIniziale/author'"code";
          }"coding";
        }"meta";
        assAuth.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext;
          id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
          id.root as r then {
            id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2),note.author  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
          }"r";
        }"identifier";
        assAuth.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"2.16.840.1.113883.2.9.4.3.2";
       
        assAuth.assignedPerson as asspers then{
          asspers.name -> practitioner.name;
        }"assPers";
      }"assAuth";
    }"auth";

    src.entry as entry1 then {
      entry1.substanceAdministration as sub then{   
        sub.statusCode -> medRq.status;
        sub -> medRq.dosageInstruction = create('Dosage') as dosage then{
          sub -> dosage.timing = create('Timing') as tim then{
            sub.effectiveTime as eff -> tim.repeat as repeat then{
              eff -> repeat.bounds = create('Period') as bound then{
                eff.low as l -> bound.start = (l.value) "low";
                eff.high as h -> bound.end = (h.value) "high";                
              }"bound";
            }"repeat";
          }"timing";
        }"dosage";
       
        sub.effectiveTime: PIVL_TS as eff -> medRq.dosageInstruction = create('Dosage') as dosage then{
        eff -> dosage.timing = create('Timing') as timing then periodTiming(eff,timing) "cod";
        }"eff";



        sub -> medRq.dosageInstruction = create('Dosage') as dosage then{
          sub.routeCode -> dosage.route;        
        }"dosage";
        
        sub -> medRq.dosageInstruction = create('Dosage') as dosage then{
          sub.approachSiteCode -> dosage.site;        
        }"dosage";

        sub.doseQuantity as doseQuant then{
          doseQuant -> medRq.dosageInstruction = create('Dosage') as dosageInstruction then{
            doseQuant.originalText as ot then{
              ot.reference -> dosageInstruction.text;
            }"ot";
            doseQuant -> dosageInstruction.doseAndRate as dosageRate then{
              doseQuant -> dosageRate.dose = create('Range') as d then{
                doseQuant -> d.low = create('SimpleQuantity') as l then{
                  doseQuant.low as lo -> l.value = (lo.value); 
                  doseQuant.low as lo -> l.unit = (lo.unit); 
                }"low";
                doseQuant -> d.high = create('SimpleQuantity') as h then{
                  doseQuant.high as hi -> h.value = (hi.value);
                  doseQuant.high as hi -> h.unit = (hi.unit); 
                }"low";
              }"d";
            }"dosageRate";
            sub.rateQuantity as rateQuantity -> medRq.dosageInstruction = create('Dosage') as dosageInstruction1 then{
              rateQuantity.originalText as ot then{
                ot.reference -> dosageInstruction1.text;
              }"ot";
              rateQuantity -> dosageInstruction1.doseAndRate as dosageRate then{
                rateQuantity -> dosageRate.rate = create('Range') as d then{
                  rateQuantity -> d.low = create('SimpleQuantity') as l then{
                    rateQuantity.low as lo -> l.value = (lo.value); 
                    rateQuantity.low as lo -> l.unit = (lo.unit); 
                  }"low";
                  rateQuantity -> d.high = create('SimpleQuantity') as h then{
                    rateQuantity.high as hi -> h.value = (hi.value);
                    rateQuantity.high as hi -> h.unit = (hi.unit); 
                  }"low";
                }"d";
              }"qualcosa";
            }"dosageRate";
          }"Dosage";  
        }"doseQuant";
        sub -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Medication/', uuid1), request.url = 'Medication' ,medRq.medication  = create('Reference') as reference,  reference.reference = ('https://example/Medication/' + %medication.id) then{
          sub.administrationUnitCode -> medication.form;
          sub.consumable as cons then{
            cons.manufacturedProduct as manuprod then{
              manuprod.manufacturedMaterial as manufact then{
                manufact.code -> medication.code;
              }"manuFact";
            }"manumat";
          }"cons";
       
          sub.entryRelationship as entryR then{
            entryR.observation as observation then{
                   observation.code where displayName='Grammatura' -> medication.ingredient as ingredient then{
                    sub.consumable as consumable then{
                            consumable.manufacturedProduct as manufacturedProduct then{
                                manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                                    manufacturedMaterial.code as code -> ingredient.item = create('CodeableConcept') as value then CECodeableConcept(code,value) "CE";
                                }"material";
                            }"product";
                        }"consumable";
                        observation.value as value -> ingredient.strength as strength then{
                            value -> strength.numerator as numerator then{
                                value -> numerator.value = (value.value) "valueN";
                            } "numerator";
                            value -> strength.denominator as denominator then{
                                value -> denominator.value = 1 "valueD";
                            } "denominator";
                       }"strenght";
                    }"ingredient";
                    observation.code where displayName='Quantità nella Confezione' then{
                        observation.value as value -> medication.amount as amount then{
                            value -> amount.numerator  as numerator then{
                                value -> numerator.value = (value.value) "valueN";
                            } "numerator";
                            value -> amount.denominator as denominator then{
                                value -> denominator.value = 1 "valueD";
                            } "denominator";
                        }"amount";
                   }"quantità";
               }"obs";
          }"entry R";

         
          sub.participant as part -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as participant,  participant.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Participant/', uuid1), request.url = append('Participant/', uuid1) then{
            part.time as t -> medRq.authoredOn = (t.value);
            part.participantRole as partRole then{

            
              partRole->participant.meta as meta then {
                partRole->meta.tag = create('Coding') as coding then {
                  partRole -> coding.system ='http://algoritmodiscoring'"system";
                  partRole -> coding.code ='clinicalDocument/body/InquadramentoClinicoIniziale/author'"code";
                }"coding";
              }"meta";
              partRole.id as id -> participant.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext;
                id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                id.root as r then {
                  id.extension as ext -> participant.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), medRq.requester  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %participant.id) "aut";
                }"r";
              }"identifier";
              partRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
             
              partRole.playingEntity as playent then{
                playent.name -> participant.name;
              }"playent";
            }"partRole";
          }"participant";   
  
          sub.reference as ref then{
            ref.externalAct as external then{
              external.id -> medRq.identifier;
            }"external";
          }"ref";
  
          sub.entryRelationship as entryRelationship then{ 
            entryRelationship.supply as sup -> medRq.dispenseRequest as dispreq then {              
                sup -> dispreq.quantity = create('SimpleQuantity') as quantity then{
                  sup.quantity as q -> quantity.value = (q.value);
                }"quantity";              
            }"sub";
  
           
    
    
           
          }"med";    
  
        }"admnistrationUnicode";
      }"sub";
    }"entry";
  }"medication";
}
//-----------------------------------------------------------------------------------------------------------------------

//______1._____________Sections________________________

group ModalitadiTrasposto(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter) {
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  }"cdaText";
  src.entry as entry1 then {
    src.entry as entry1 -> tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) then {
    entry1.act as act1  then Act(act1, patient,  enc , bundle) "act";
    };
 }"entry";
}

group MotivoDellaVisita(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  //src.text as cdaText -> tgt.text;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  }"cdaText";
  src.entry as entry -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Observation') as observation,  observation.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Observation/', uuid2), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
    entry.observation as obs then Observation(obs, patient ,enc ,observation, bundle) "observation";
  }"entry";
 
}

group Triage(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  //src.text as cdaText ->tgt.text;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  }"cdaText";
  src.entry as entry -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST',   e2.resource = create('Observation') as observation,  observation.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Observation/', uuid2), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
    entry.observation as obs then Observation(obs, patient ,enc ,observation, bundle) "observation";
  }"entry";
 
}

group InquadramentoClinicoIniziale(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter) {
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id), tgt.text as fhirText then {
    src.code -> observation.code;
    src where observation.statusCode.exists().not() then {
      src->observation.status ='final'"status";
    }"statuscode";
    src->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    src->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
    cdaText->observation.note as note then{
      src.author as author then {
        author->bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'PUT', e2.resource = create('Practitioner') as practitioner then {
          author.assignedAuthor as assignedAuthor then {
            //modificato: meta+identifier
            assignedAuthor->practitioner.meta as meta then {
              assignedAuthor->meta.tag = create('Coding') as coding then {
                assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                assignedAuthor -> coding.code ='clinicalDocument/body/InquadramentoClinicoIniziale/author'"code";
              }"coding";
            }"meta";
            assignedAuthor.id as id -> practitioner.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext;
              id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
              id.root as r then {
                id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e2.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
              }"r";
            }"identifier";
            assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
              id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"2.16.840.1.113883.2.9.4.3.2";
            assignedAuthor.assignedPerson as person then {
              person.name -> practitioner.name;
            }"name";
          }"assignedAuthor";
        }"practitioner";
        author.time->note.time;
      }"Author";
      cdaText as t ->note.text = t "reference";
    }"reference";
  }"cdaText";
    
  //START sottosections
  src.component as component then {
    component.section as sottosection then{
      sottosection -> tgt.section as section then {
        //1. Anamnesi
        sottosection.code where(code = '11329-0') -> section.code;
        sottosection.code as code1 where(code = '11329-0')  then {
          sottosection.title as t-> section.title= (t.dataString);
          sottosection.entry as entry1 then {
            entry1.observation as obs then {
              obs.code where (code = '75326-9')  then {
              obs->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Condition') as condition, condition.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Condition/', uuid1), request.url = 'Condition', section.entry = create('Reference') as reference,  reference.reference = ('https://example/Condition/' + %condition.id) then {
              obs.code -> condition.category;
              obs->condition.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
              obs->condition.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
              obs.statusCode as status where (code='completed') -> condition.verificationStatus as status2 then {
                status ->  status2.coding as status3 then{
                  status -> status3.code ='confirmed' "finald";
                  status -> status3.system='http://terminology.hl7.org/CodeSystem/condition-ver-status'"system";
                }"st3";
              }"status";

              // blocco Narrativo
              sottosection.text as cdaText1 -> condition.note as note then {
                cdaText1 as t ->note.text =t "reference";
                sottosection.author as authors then {
                  authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                  authors.assignedAuthor as assignedAuthor -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'PUT',   e5.resource = create('Practitioner') as practitioner then{
                    assignedAuthor->practitioner.meta as meta then {
                      assignedAuthor->meta.tag = create('Coding') as coding then {
                        assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                        assignedAuthor -> coding.code ='clinicalDocument/body/Anamnesi/author'"code";
                      }"coding";
                    }"meta";
                    assignedAuthor.id as id -> practitioner.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext;
                      id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                      id.root as r then {
                        id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid5,  e5.fullUrl = append('https://example/Practitioner/', uuid5), request.url = append('Practitioner/', uuid5), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id);
                      }"r";
                    }"identifier";
                    assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"2.16.840.1.113883.2.9.4.3.2";
                    assignedAuthor.assignedPerson as person then {
                      person.name -> practitioner.name;
                    }"assignedPerson";
                  }"assighedAuthor";
                }"author";
              }"cdaText1";

              obs.effectiveTime as effective1 then {
                effective1 where effective1.low.exists() or effective1.high.exists() then{
                  effective1  -> condition.onset=create('Period') as periodonset then IVLTSPeriod(effective1,periodonset)"onsetperiod";
                  }"ef";
                }"effectivetime1";
             
              obs.value:CD as val then{
                val->condition.code =create('CodeableConcept') as ce then {
                    val.originalText -> ce.text;
                      val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      }"coding";  
                   }"Ce"; 
                }"Value";
              obs.entryRelationship as entriRel then {
                entriRel -> condition.evidence = create('BackboneElement') as evidence then {
                entriRel.observation as observation2 then {
                  observation2.code as code then {
                  code.code where (code.code = '89261-2') then { 
                    obs -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as observation, observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' then {
                    entriRel -> evidence.detail  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) "ref";
                    observation2.code -> observation.code;
                    observation2 where observation.statusCode.exists().not() then {
                      observation2->observation.status ='final'"status";
                      }"statuscode";            
                    observation2.text as text -> observation.note = create('Annotation') as note then{
                      text.reference as ref -> note.text = (ref.value) "val";
                    }"Annontation"; 
                    obs->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
                    obs->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";                            
                    observation2.statusCode as statusc where (code='completed') -> ob.status ='final';
                    observation2.statusCode as statusc where (code='active') -> ob.status ='registered';
                    observation2.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
                    observation2.statusCode as statusc where (code='suspended') -> ob.status ='partial';
                    observation2.value:CE as val then{
                      val->observation.value =create('CodeableConcept') as ce then {
                        val.originalText -> ce.text;
                        val -> ce.coding as coding then {
                        val.code as code -> coding.code = cast(code, 'string');
                        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                        val.displayName as display -> coding.display = cast(display, 'string');
                        }"coding";  
                      }"Ce"; 
                    }"Value"; 
                   }"obser";
                  }"where Decorso Clinico";
                  }"code";
                }"Observation2";
              }"evidence";
           }"EntryRelationship1";
           obs.entryRelationship as entriRel  then{
            entriRel.observation as observation2 then {
              observation2.code as code then {
               code.code where (code.code ='33999-4') then{
                 observation2 -> condition.clinicalStatus = create('CodeableConcept') as status then {
                  observation2.text as text then{
                    text.reference as refstat -> status.text=(refstat.value)"statref";
                    }"textstat";
                   observation2  -> status.coding = create('Coding') as coding then{
                     observation2.value as value then {
                       value.code  where (value.code = 'LA16666-2')-> coding.code = 'active'"active";
                       value.code  where (value.code = 'LA18632-2')-> coding.code = 'inactive'"inactive";
                       value.codeSystem as system -> coding.system ='http://terminology.hl7.org/CodeSystem/condition-clinical'"system";
                       value.displayName as display -> coding.display = cast(display, 'string');
                       }"value1";
                     }"coding";
                   }"code";                       
                 }"where Decorso Clinico"; 
               }"codestatus";  
              }"observationstatus"; 
             }"entryrelationshipstatus";           
           }"condition";
          } "89261-2";
        }"entryobservation1";



         //Anamnesi Familiare
        entry1.organizer as organizer then {
          organizer.code where (code = '10157-6')  then {
              organizer->bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST', e4.resource = create('FamilyMemberHistory') as FamilyMemberHistory, FamilyMemberHistory.id = uuid() as uuid5,  e4.fullUrl = append('https://example/FamilyMemberHistory/', uuid5), request.url = 'FamilyMemberHistory', section.entry = create('Reference') as reference,  reference.reference = ('https://example/FamilyMemberHistory/' + %FamilyMemberHistory.id) then{
              organizer.effectiveTime as effective then {
                effective.value as v-> FamilyMemberHistory.date=v "date";
              }"effective"; 
              organizer->FamilyMemberHistory.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
              organizer.subject as subject then {
                  subject.relatedSubject as relatedSubject then {
                  relatedSubject.code -> FamilyMemberHistory.relationship "relationship";
                  relatedSubject.subject as subject -> FamilyMemberHistory.sex as sex then {
                      subject.administrativeGenderCode as administrativeGenderCode -> sex.coding as coding then {
                          administrativeGenderCode.code as code-> coding.code = translate(code, '#cm-v3-administrative-gender', 'code') "gender";
                          administrativeGenderCode-> coding.system = 'http://hl7.org/fhir/administrative-gender' "system";
                          }"coding";
                      }"subject1";
                  }"relatedSubject";
              }"subject";

              // blocco Narrativo
              sottosection.text as cdaText1 -> FamilyMemberHistory.note as note then {
                cdaText1 as t ->note.text =t "reference";
                sottosection.author as authors then {
                  authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                  authors.assignedAuthor as assignedAuthor -> bundle.entry as e7, e7.request = create('BackboneElement') as request, request.method = 'PUT',   e7.resource = create('Practitioner') as practitioner then{
                    assignedAuthor->practitioner.meta as meta then {
                      assignedAuthor->meta.tag = create('Coding') as coding then {
                        assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                        assignedAuthor -> coding.code ='clinicalDocument/body/Anamnesi/author'"code";
                      }"coding";
                    }"meta";
                    assignedAuthor.id as id -> practitioner.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext;
                      id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                      id.root as r then {
                        id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid7,  e7.fullUrl = append('https://example/Practitioner/', uuid7), request.url = append('Practitioner/', uuid7), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id);
                      }"r";
                    }"identifier";
                    assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"2.16.840.1.113883.2.9.4.3.2";
                    assignedAuthor.assignedPerson as person then {
                      person.name -> practitioner.name;
                    }"assignedPerson";
                  }"assighedAuthor";
                }"author";
              }"cdaText1";

              organizer.component as component -> FamilyMemberHistory.condition as condition then{
                  component.observation as observation then{
                      observation.code -> condition.code "code";
                      observation.text as text -> FamilyMemberHistory.note as note then{
                          text.reference as reference -> note.text = (reference.value) "value";
                      }"reference";
                      observation.statusCode -> FamilyMemberHistory.status;
                      observation.effectiveTime as effective1 then {
                      effective1 where effective1.low.exists().not() or effective1.high.exists().not() then{
                      effective1  -> condition.onset=create('Period') as periodonset then IVLTSPeriod(effective1,periodonset)"onsetperiod";
                          }"effective";
                  }"effectivetime";
                      observation.value -> condition.outcome "codeable";
                      observation.entryRelationship as entryRelationship then{
                      entryRelationship.observation as obsservation1 then{
                          obsservation1.code as code then {
                          code.code where (code.code ='35267-4') then{
                          obsservation1.value as value -> condition.onset = create('Age') as Age then {
                                      value.value as valueAge -> Age.value = valueAge "age";
                                      value.unit as unit -> Age.code = unit "unit";
                                      value.unit as unit -> Age.unit = unit "unit";
                                      value -> Age.system = 'http://unitsofmeasure.org' "system";
                              } "value";
                          }"insorgenza";
                      }"code";
                      obsservation1.code as code then {
                          code.code where (code.code ='39016-1') then{
                          obsservation1.value as value -> FamilyMemberHistory.deceased = create('Age') as Age then {
                                      value.value as valueAge -> Age.value = valueAge "age";
                                      value.unit as unit -> Age.code = unit "unit";
                                      value.unit as unit -> Age.unit = unit "unit";
                                      value -> Age.system = 'http://unitsofmeasure.org' "system";
                                  } "value";
                               }"deceased";
                           }"code";
                         }"obser";
                      }"EntryRel";
                   }"observationCondition";
                 }"component";
              }"organizer";
            }"10157-6";
          }"observation1";
       }"subsection1";
    }"11329-0";
       

        //2. Esame Obiettivo
        sottosection.code where(code = '29545-1') -> section.code;
        sottosection.code as code1 where(code = '29545-1')  then {
          sottosection.title as t -> section.title = (t.dataString);
          sottosection.text as cdaText -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('Observation') as observation,  observation.id = uuid() as uuid8,  e8.fullUrl = append('https://example/Observation/', uuid8), request.url = 'Observation', section.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
            cdaText -> observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            cdaText -> observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
            sottosection.code -> observation.code;
            sottosection where observation.statusCode.exists().not() then {
              sottosection -> observation.status ='final'"status";
            }"statuscode";
            cdaText -> observation.note as note then{
              cdaText as t ->note.text =t "reference";
              sottosection.author as authors then {
                authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                authors.assignedAuthor as assignedAuthor -> bundle.entry as e9, e9.request = create('BackboneElement') as request, request.method = 'PUT',   e9.resource = create('Practitioner') as practitioner then{
                  assignedAuthor->practitioner.meta as meta then {
                    assignedAuthor->meta.tag = create('Coding') as coding then {
                      assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                      assignedAuthor -> coding.code ='clinicalDocument/body/EsameObiettivo/author'"code";
                    }"coding";
                  }"meta";
                  assignedAuthor.id as id -> practitioner.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext;
                    id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                    id.root as r then {
                      id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid9,  e9.fullUrl = append('https://example/Practitioner/', uuid9), request.url = append('Practitioner/', uuid9), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id) "autore";
                    }"r";
                  }"identifier";
                  assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                    id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                  }"2.16.840.1.113883.2.9.4.3.2";
                  assignedAuthor.assignedPerson as person then {
                    person.name -> practitioner.name;
                  }"assignedPerson";
                }"assighedAuthor";
              }"author";
            }"reference";
          }"cdaText";
        }"condizione_esameObiettivo";
      
        //3. Terapia Farmacologica all'ingresso
        sottosection.code where(code = '42346-7') -> section.code; 
        sottosection.code as code1 where(code = '42346-7')  then {
          sottosection.title as t -> section.title = (t.dataString);
          sottosection.text as cdaText ->bundle.entry as e10, e10.request = create('BackboneElement') as request, request.method = 'POST', e10.resource = create('MedicationStatement') as medicStatement,  medicStatement.id = uuid() as uuid10,  e10.fullUrl = append('https://example/MedicationStatement/', uuid10), request.url = 'MedicationStatement', section.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationStatement/' + %medicStatement.id) then {
            
            cdaText -> medicStatement.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
          
            sottosection where medicStatement.statusCode.exists().not() then {
              sottosection->medicStatement.status ='completed'"status";
            }"statuscode";
            cdaText ->  medicStatement.medication =create('CodeableConcept') as medication then {
              cdaText as txt -> medication.text=txt "text";
            }"medication";
            cdaText -> medicStatement.note as note then{
              cdaText as t ->note.text =t "reference";
              sottosection.author as authors then {
                authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                authors.assignedAuthor as assignedAuthor -> bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'PUT',   e11.resource = create('Practitioner') as practitioner then{
                  assignedAuthor->practitioner.meta as meta then {
                    assignedAuthor->meta.tag = create('Coding') as coding then {
                      assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                      assignedAuthor -> coding.code ='ClinicalDocument/body/TerapiaFarmacologicaIngresso/author'"code";
                    }"coding";
                  }"meta";
                  assignedAuthor.id as id -> practitioner.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext;
                    id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                    id.root as r then {
                      id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid11,  e11.fullUrl = append('https://example/Practitioner/', uuid11), request.url = append('Practitioner/', uuid11), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id);
                    }"r";
                  }"identifier";
                  assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                    id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                  }"2.16.840.1.113883.2.9.4.3.2";
                  assignedAuthor.assignedPerson as person then {
                    person.name -> practitioner.name;
                  }"assignedPerson";
                }"assighedAuthor";
              }"author";
            }"reference";
          }"cdaText";
        }"condizione_terapia_ingresso";

        //4. Allergie
        sottosection.code where(code = '48765-2') -> section.code;
        sottosection.code as code1 where(code = '48765-2')  then {
          sottosection.title as t-> section.title= (t.dataString);
          sottosection.entry as entry1 -> bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST',   e12.resource = create('AllergyIntolerance') as allergy,  allergy.id = uuid() as uuid12,  e12.fullUrl = append('https://example/AllergyIntolerance/', uuid12), request.url = 'AllergyIntolerance' ,section.entry  = create('Reference') as reference,  reference.reference = ('https://example/AllergyIntolerance/' + %allergy.id) then {
            src -> allergy.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            src -> allergy.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
            entry1.act as actallint then {
              actallint.effectiveTime as eff -> allergy.onset = create('Period') as per then{
                eff.low as l -> per.start = (l.value) "val";
                eff.high as h -> per.end = (h.value) "val2";
              }"eff";

              //mapping note
              sottosection.text as cdaText1 -> allergy.note as note then {
                cdaText1 as t ->note.text =t "reference";
                sottosection.author as authors then {
                  authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                  authors.assignedAuthor as assignedAuthor -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'PUT',   e13.resource = create('Practitioner') as practitioner then{
                    assignedAuthor->practitioner.meta as meta then {
                      assignedAuthor->meta.tag = create('Coding') as coding then {
                        assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                        assignedAuthor -> coding.code ='clinicalDocument/body/Anamnesi/author'"code";
                      }"coding";
                    }"meta";
                    assignedAuthor.id as id -> practitioner.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext;
                      id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                      id.root as r then {
                        id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid13,  e13.fullUrl = append('https://example/Practitioner/', uuid13), request.url = append('Practitioner/', uuid13), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id);
                      }"r";
                    }"identifier";
                    assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"2.16.840.1.113883.2.9.4.3.2";
                    assignedAuthor.assignedPerson as person then {
                      person.name -> practitioner.name;
                    }"assignedPerson";
                  }"assighedAuthor";
                }"author";
              }"cdaText1";
              actallint.entryRelationship as entryact then {
                entryact.observation as entryobs then {
                  entryobs.value as code then{
                    code.code as code1-> allergy.type = translate(code1,'#AllergyTypeMap','code') "type";
                    code.code as code2 -> allergy.category = translate(code2,'#AllergyCategoryMap','code') "category";  
                  }"code";
              
                  entryobs.participant as partic then {
                    partic.participantRole as pratRole then {
                      pratRole.playingEntity as pratent then {
                        pratent -> allergy.reaction = create('BackboneElement') as reaction then{
                          pratent.code -> reaction.substance "subs";
                          entryobs.entryRelationship as entryobs1 where (typeCode='MFST') then {
                            entryobs1.observation as entobs then {
                              entobs.effectiveTime as eff  then{
                                eff.low as l -> reaction.onset =(l.value);
                              }"eff";
                              entobs.value->reaction.manifestation "manifest";
                            }"entryobservation";
                          }"entryRelationship";
                        }"reaction";  
                      }"playingEntity";
                    }"participantRole";
                  }"participant";
          
                  entryobs.entryRelationship as entryobs2 then {
                    entryobs2.observation as entobs then {
                      entobs.code as code where (code='SEV') then {
                        entobs.value as value then{
                          value.code where(value.code = 'M') ->allergy.criticality = 'unable-to-assess'"active";
                          value.code where(value.code = 'L') ->allergy.criticality = 'low'"active"; 
                          value.code where(value.code = 'H') ->allergy.criticality = 'high'"active"; 
                        }"value";
                      }"severity";
                    }"entryobservation2";
                  }"entryrelationship2";

                  entryobs.entryRelationship as entryobs3 then {
                    entryobs3.observation as entobs then {
                      entobs.code as code where (code='33999-4') then {
                        // entobs.value->allergy.clinicalStatus "cstatus";
                        entobs -> allergy.clinicalStatus = create('CodeableConcept') as status then {
                          entobs  -> status.coding = create('Coding') as coding then{
                            entobs.value as value then{
                              value.code  where (value.code = 'LA16666-2')-> coding.code = 'active'"active";
                              value.code  where (value.code = 'LA18632-2')-> coding.code = 'inactive'"active";
                              value.codeSystem as system -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical'"system";
                              // value->coding.version='ConditionClinicalStatusCodes 4.0.1'"version";
                              value.displayName as display -> coding.display = cast(display, 'string');
                            }"value1";
                          }"coding";
                        }"clinicalStatus";
                      }"33999-4";
                    }"entryobservation3";
                  }"entryrelationship3";
          
                  entryobs.entryRelationship as entryobs4 then {
                    entryobs4.act as entact then {
                      entact.text as actext then {
                        actext.reference as reftxt -> allergy.note = create('BackboneElement') as note  then {
                          reftxt as ref->note.text= (ref.value) "notxt";
                        }"notetxt";
                      }"txtact";
                    }"entryact1";
                  }"entryrelationshi4";
                    
                }"entryobservation";
              }"entryrelationshipact";
            }"entryact2";
          }"allergy";
        }"condizione_allergie";  

        //5. Problemi aperti
        sottosection.code where(code = '11450-4') -> section.code;
        sottosection.code as code1 where(code = '11450-4')  then {
          sottosection.title as t -> section.title = (t.dataString);
          sottosection.text as cdaText ->bundle.entry as e14, e14.request = create('BackboneElement') as request, request.method = 'POST', e14.resource = create('Condition') as condition,  condition.id = uuid() as uuid14,  e14.fullUrl = append('https://example/Condition/', uuid14), request.url = 'Condition', section.entry  = create('Reference') as reference,  reference.reference = ('https://example/Condition/' + %condition.id) then {
              
            cdaText -> condition.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            cdaText -> condition.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
            sottosection.code -> condition.code;
            cdaText -> condition.note as note then{
              cdaText as t ->note.text =t "reference";
              sottosection.author as authors then {
                authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                authors.assignedAuthor as assignedAuthor -> bundle.entry as e15, e15.request = create('BackboneElement') as request, request.method = 'PUT',   e15.resource = create('Practitioner') as practitioner then{
                  assignedAuthor->practitioner.meta as meta then {
                    assignedAuthor->meta.tag = create('Coding') as coding then {
                      assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                      assignedAuthor -> coding.code ='clinicalDocument/body/ProblemiAperti/author'"code";
                    }"coding";
                  }"meta";
                  assignedAuthor.id as id -> practitioner.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext;
                    id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                    id.root as r then {
                      id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid15,  e15.fullUrl = append('https://example/Practitioner/', uuid15), request.url = append('Practitioner/', uuid15), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                    }"r";
                  }"identifier";
                  assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                    id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                  }"2.16.840.1.113883.2.9.4.3.2";
                  assignedAuthor.assignedPerson as person then {
                    person.name -> practitioner.name;
                  }"assignedPerson";
                }"assighedAuthor";
              }"author";
            }"reference";
          }"cdaText";
        }"condizione_problemi_aperti";

      }"Sectionfhir";
    }"Sottosection";
  }"component";

}

//______2._____________ClinicalStatements________________________

group Act (source cda: Act, target pat : Patient, target enc : Encounter, target bundle : Bundle){
  cda.code as code -> enc.extension as extension2 then modeOfArrival(code, extension2);
  cda.participant as participant then {
    participant -> enc.participant as FhirParticipant then {
      participant as p -> FhirParticipant.type as type then { 
        p -> type.coding as coding then{
          p-> coding.code = (p.typeCode) "codice";
          p-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
        } "codeType"; 
      }"type";
    }"fhirParticipant";
    participant.participantRole as participantRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',  e1.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e1.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url = 'PractitionerRole', enc.participant = create('BackboneElement') as participant1, participant1.individual = create('Reference') as referencepart, referencepart.reference =  ('https://example/Practitioner/Role' + %practitionerRole.id) then { 
      participantRole.code -> practitionerRole.code;
    }"participantrole";
  }"participant";
    
}



//______3._____________Extensions_DtType________________________

group modeOfArrival(source src: CE, target ext: Extension) {
 
  src -> ext.url = 'http://hl7.org/fhir/StructureDefinition/encounter-modeOfArrival' "url";
  src -> ext.value = create('Coding') as code1 then coding(src,code1)"coding";

}

group coding(source src : CE, target tgt : Coding)  {
  src.code as code  -> tgt.code = cast(code, 'string');
  src.codeSystem as system -> tgt.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
  src.displayName as display -> tgt.display = cast(display, 'string');
  src.codeSystemVersion as version -> tgt.version = cast(version, 'string');
}
group periodTiming(source effectiveTime: PIVL_TS, target timing: Timing){
  effectiveTime -> timing.repeat as r then{
    effectiveTime.period as p -> r.period = (p.value);
    effectiveTime.period as p -> r.periodUnit = (p.unit);  
  }"repeat";

}",
          "subType": "00"
        }
      }
    }
  ],
  "definitions": [],
  "valuesets": [],
  "template_id_root": "2.16.840.1.113883.2.9.10.1.6.1",
  "last_update_date": {
    "$date": {
      "$numberLong": "1673389067418"
    }
  },
  "version": "1.0",
  "root_map": "verbalePS",
  "deleted": false,
  "last_sync": {
    "$date": {
      "$numberLong": "1673389070410"
    }
  }
}]